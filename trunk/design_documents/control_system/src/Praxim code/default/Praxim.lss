
Praxim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a6  00800100  000043fc  00004490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000043fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  008003a6  008003a6  00004736  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00004736  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000469  00000000  00000000  000047d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000232d  00000000  00000000  00004c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ae  00000000  00000000  00006f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000025fe  00000000  00000000  0000781a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  00009e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007f6  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e32  00000000  00000000  0000a94e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d8  00000000  00000000  0000c780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_1>
       8:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_2>
       c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_3>
      10:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_4>
      14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      18:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_6>
      1c:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_7>
      20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      24:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      30:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      40:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      4c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      54:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_21>
      58:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      5c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      60:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      68:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      6c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      70:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      74:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      7c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      80:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      84:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      88:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      8c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      90:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      94:	07 2c       	mov	r0, r7
      96:	7a a5       	ldd	r23, Y+42	; 0x2a
      98:	ba 6c       	ori	r27, 0xCA	; 202
      9a:	c5 90       	lpm	r12, Z+
      9c:	da 3b       	cpi	r29, 0xBA	; 186
      9e:	93 65       	ori	r25, 0x53	; 83
      a0:	fc 8b       	std	Y+20, r31	; 0x14
      a2:	bc 53       	subi	r27, 0x3C	; 60
      a4:	f8 10       	cpse	r15, r8
      a6:	fd 3c       	cpi	r31, 0xCD	; 205
      a8:	56 92       	.word	0x9256	; ????
      aa:	83 4d       	sbci	r24, 0xD3	; 211
      ac:	bd 87       	std	Y+13, r27	; 0x0d
      ae:	9d 3a       	cpi	r25, 0xAD	; 173
      b0:	b6 3d       	cpi	r27, 0xD6	; 214
      b2:	cb c9       	rjmp	.-3178   	; 0xfffff44a <__eeprom_end+0xff7ef44a>
      b4:	bf 5b       	subi	r27, 0xBF	; 191
      b6:	be 73       	andi	r27, 0x3E	; 62
      b8:	da 0f       	add	r29, r26
      ba:	c9 3f       	cpi	r28, 0xF9	; 249
      bc:	05 a8       	ldd	r0, Z+53	; 0x35
      be:	4c cd       	rjmp	.-1384   	; 0xfffffb58 <__eeprom_end+0xff7efb58>
      c0:	b2 d4       	rcall	.+2404   	; 0xa26 <getBlockerPos+0x456>
      c2:	4e b9       	out	0x0e, r20	; 14
      c4:	38 36       	cpi	r19, 0x68	; 104
      c6:	a9 02       	muls	r26, r25
      c8:	0c 50       	subi	r16, 0x0C	; 12
      ca:	b9 91       	ld	r27, Y+
      cc:	86 88       	ldd	r8, Z+22	; 0x16
      ce:	08 3c       	cpi	r16, 0xC8	; 200
      d0:	a6 aa       	std	Z+54, r10	; 0x36
      d2:	aa 2a       	or	r10, r26
      d4:	be 00       	.word	0x00be	; ????
      d6:	00 00       	nop
      d8:	80 3f       	cpi	r24, 0xF0	; 240

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	d0 e1       	ldi	r29, 0x10	; 16
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	13 e0       	ldi	r17, 0x03	; 3
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	ec ef       	ldi	r30, 0xFC	; 252
      ee:	f3 e4       	ldi	r31, 0x43	; 67
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0b bf       	out	0x3b, r16	; 59
      f4:	02 c0       	rjmp	.+4      	; 0xfa <__do_copy_data+0x14>
      f6:	07 90       	elpm	r0, Z+
      f8:	0d 92       	st	X+, r0
      fa:	a6 3a       	cpi	r26, 0xA6	; 166
      fc:	b1 07       	cpc	r27, r17
      fe:	d9 f7       	brne	.-10     	; 0xf6 <__do_copy_data+0x10>
     100:	1b be       	out	0x3b, r1	; 59

00000102 <__do_clear_bss>:
     102:	13 e0       	ldi	r17, 0x03	; 3
     104:	a6 ea       	ldi	r26, 0xA6	; 166
     106:	b3 e0       	ldi	r27, 0x03	; 3
     108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
     10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
     10c:	aa 3d       	cpi	r26, 0xDA	; 218
     10e:	b1 07       	cpc	r27, r17
     110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
     112:	0e 94 43 0b 	call	0x1686	; 0x1686 <main>
     116:	0c 94 fc 21 	jmp	0x43f8	; 0x43f8 <_exit>

0000011a <__bad_interrupt>:
     11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <UART_Init>:
//  SERIAL COMMUNICATION FUNCTIONS								//
//																//
//**************************************************************//

void UART_Init(uint32_t Baud)
{
     11e:	9b 01       	movw	r18, r22
     120:	ac 01       	movw	r20, r24
	unsigned int BaudRate = F_CPU / (16 * Baud) - 1;	//calculate BaudRate
     122:	84 e0       	ldi	r24, 0x04	; 4
     124:	22 0f       	add	r18, r18
     126:	33 1f       	adc	r19, r19
     128:	44 1f       	adc	r20, r20
     12a:	55 1f       	adc	r21, r21
     12c:	8a 95       	dec	r24
     12e:	d1 f7       	brne	.-12     	; 0x124 <UART_Init+0x6>
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	74 e2       	ldi	r23, 0x24	; 36
     134:	84 ef       	ldi	r24, 0xF4	; 244
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 88 21 	call	0x4310	; 0x4310 <__udivmodsi4>
     13c:	21 50       	subi	r18, 0x01	; 1
     13e:	30 40       	sbci	r19, 0x00	; 0
	//set BaudRate into registers
	UBRR0H = (unsigned char) (BaudRate>>8);
     140:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) BaudRate;
     144:	20 93 c4 00 	sts	0x00C4, r18

	UCSR0B = 0b00011000;		//enable TX(Bit4 = 1), RX(Bit3 = 1)
     148:	88 e1       	ldi	r24, 0x18	; 24
     14a:	80 93 c1 00 	sts	0x00C1, r24

	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
     14e:	86 e0       	ldi	r24, 0x06	; 6
     150:	80 93 c2 00 	sts	0x00C2, r24
}
     154:	08 95       	ret

00000156 <UART_Transmit>:

void UART_Transmit(unsigned char Data)
{
     156:	98 2f       	mov	r25, r24
	while (!(UCSR0A & 0b00100000));
     158:	80 91 c0 00 	lds	r24, 0x00C0
     15c:	85 ff       	sbrs	r24, 5
     15e:	fc cf       	rjmp	.-8      	; 0x158 <UART_Transmit+0x2>
	UDR0 = Data;
     160:	90 93 c6 00 	sts	0x00C6, r25
}
     164:	08 95       	ret

00000166 <sendString>:

void sendString(char str[])
{
     166:	fc 01       	movw	r30, r24

    if (!str) return;
     168:	00 97       	sbiw	r24, 0x00	; 0
     16a:	41 f4       	brne	.+16     	; 0x17c <sendString+0x16>
     16c:	08 95       	ret
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
     16e:	80 91 c0 00 	lds	r24, 0x00C0
     172:	85 ff       	sbrs	r24, 5
     174:	fc cf       	rjmp	.-8      	; 0x16e <sendString+0x8>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
     176:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
     178:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
     17c:	90 81       	ld	r25, Z
     17e:	99 23       	and	r25, r25
     180:	b1 f7       	brne	.-20     	; 0x16e <sendString+0x8>
     182:	08 95       	ret

00000184 <interruptInit>:
//																//
//**************************************************************//

void interruptInit()
{
		cli();
     184:	f8 94       	cli

		// Set Direction bit to Input
		BCLR(DDRD,INT0);
     186:	50 98       	cbi	0x0a, 0	; 10
		BCLR(DDRD,INT1);
     188:	51 98       	cbi	0x0a, 1	; 10
		BCLR(DDRD,INT2);
     18a:	52 98       	cbi	0x0a, 2	; 10
		BCLR(DDRD,INT3);
     18c:	53 98       	cbi	0x0a, 3	; 10
		BCLR(DDRE,INT5);
     18e:	6d 98       	cbi	0x0d, 5	; 13
		BCLR(DDRE,INT6);
     190:	6e 98       	cbi	0x0d, 6	; 13

        // Set External Interrupt Control Register B to trigger on both edges
        BCLR(EICRA,ISC01);	// ISCn1 = 0
     192:	e9 e6       	ldi	r30, 0x69	; 105
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	8d 7f       	andi	r24, 0xFD	; 253
     19a:	80 83       	st	Z, r24
        BSET(EICRA,ISC00); 	// ISCn0 = 1
     19c:	80 81       	ld	r24, Z
     19e:	81 60       	ori	r24, 0x01	; 1
     1a0:	80 83       	st	Z, r24
		BCLR(EICRA,ISC11);	// ISCn1 = 0
     1a2:	80 81       	ld	r24, Z
     1a4:	87 7f       	andi	r24, 0xF7	; 247
     1a6:	80 83       	st	Z, r24
        BSET(EICRA,ISC10); 	// ISCn0 = 1
     1a8:	80 81       	ld	r24, Z
     1aa:	84 60       	ori	r24, 0x04	; 4
     1ac:	80 83       	st	Z, r24
		BCLR(EICRA,ISC21);	// ISCn1 = 0
     1ae:	80 81       	ld	r24, Z
     1b0:	8f 7d       	andi	r24, 0xDF	; 223
     1b2:	80 83       	st	Z, r24
        BSET(EICRA,ISC20); 	// ISCn0 = 1
     1b4:	80 81       	ld	r24, Z
     1b6:	80 61       	ori	r24, 0x10	; 16
     1b8:	80 83       	st	Z, r24
		BCLR(EICRA,ISC31);	// ISCn1 = 0
     1ba:	80 81       	ld	r24, Z
     1bc:	8f 77       	andi	r24, 0x7F	; 127
     1be:	80 83       	st	Z, r24
        BSET(EICRA,ISC30); 	// ISCn0 = 1
     1c0:	80 81       	ld	r24, Z
     1c2:	80 64       	ori	r24, 0x40	; 64
     1c4:	80 83       	st	Z, r24
		BCLR(EICRB,ISC51);	// ISCn1 = 0
     1c6:	ea e6       	ldi	r30, 0x6A	; 106
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	87 7f       	andi	r24, 0xF7	; 247
     1ce:	80 83       	st	Z, r24
        BSET(EICRB,ISC50); 	// ISCn0 = 1
     1d0:	80 81       	ld	r24, Z
     1d2:	84 60       	ori	r24, 0x04	; 4
     1d4:	80 83       	st	Z, r24
		BCLR(EICRB,ISC61);	// ISCn1 = 0
     1d6:	80 81       	ld	r24, Z
     1d8:	8f 7d       	andi	r24, 0xDF	; 223
     1da:	80 83       	st	Z, r24
        BSET(EICRB,ISC60); 	// ISCn0 = 1
     1dc:	80 81       	ld	r24, Z
     1de:	80 61       	ori	r24, 0x10	; 16
     1e0:	80 83       	st	Z, r24

		//BCLR(PORTE,4);
		BSET(DDRE, 4);
     1e2:	6c 9a       	sbi	0x0d, 4	; 13

		// Enable INT0, INT1 Interrupt
        BSET(EIMSK,INT0);
     1e4:	e8 9a       	sbi	0x1d, 0	; 29
		BSET(EIMSK,INT1);
     1e6:	e9 9a       	sbi	0x1d, 1	; 29
		BSET(EIMSK,INT2);
     1e8:	ea 9a       	sbi	0x1d, 2	; 29
		BSET(EIMSK,INT3);
     1ea:	eb 9a       	sbi	0x1d, 3	; 29
		BSET(EIMSK,INT5);
     1ec:	ed 9a       	sbi	0x1d, 5	; 29
		BSET(EIMSK,INT6);
     1ee:	ee 9a       	sbi	0x1d, 6	; 29

		UCSR0B |= (1 << RXCIE0); // Enable the USART Recieve Complete interrupt (USART_RXC) 		
     1f0:	e1 ec       	ldi	r30, 0xC1	; 193
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	80 68       	ori	r24, 0x80	; 128
     1f8:	80 83       	st	Z, r24

		sei();
     1fa:	78 94       	sei
}
     1fc:	08 95       	ret

000001fe <initButtons>:
}

void initButtons()
{
	//Stop:
	BSET(PORTC,0);
     1fe:	40 9a       	sbi	0x08, 0	; 8
	BCLR(DDRC,0);
     200:	38 98       	cbi	0x07, 0	; 7
	//Button 1:
	BSET(PORTC,1);
     202:	41 9a       	sbi	0x08, 1	; 8
	BCLR(DDRC,1);
     204:	39 98       	cbi	0x07, 1	; 7
	//Button 2:
	BSET(PORTC,2);
     206:	42 9a       	sbi	0x08, 2	; 8
	BCLR(DDRC,2);
     208:	3a 98       	cbi	0x07, 2	; 7
	//Button 3:
	BSET(PORTC,3);
     20a:	43 9a       	sbi	0x08, 3	; 8
	BCLR(DDRC,3);
     20c:	3b 98       	cbi	0x07, 3	; 7
	//Start:
	BSET(PORTC,5);
     20e:	45 9a       	sbi	0x08, 5	; 8
	BCLR(DDRC,5);
     210:	3d 98       	cbi	0x07, 5	; 7

	//LED's:
	PINA = 0x00;
     212:	10 b8       	out	0x00, r1	; 0
}
     214:	08 95       	ret

00000216 <__vector_1>:
//																//
//**************************************************************//


ISR(INT0_vect)
{
     216:	1f 92       	push	r1
     218:	0f 92       	push	r0
     21a:	0f b6       	in	r0, 0x3f	; 63
     21c:	0f 92       	push	r0
     21e:	11 24       	eor	r1, r1
     220:	2f 93       	push	r18
     222:	3f 93       	push	r19
     224:	4f 93       	push	r20
     226:	5f 93       	push	r21
     228:	8f 93       	push	r24
     22a:	9f 93       	push	r25
	int a = 0;
	int b = 0;
	if(bit_is_set(PIND,0)) a =1;
     22c:	29 b1       	in	r18, 0x09	; 9
	if(bit_is_set(PIND,1)) b =1;
     22e:	89 b1       	in	r24, 0x09	; 9

    if (a==b) encA--;
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	21 70       	andi	r18, 0x01	; 1
     234:	30 70       	andi	r19, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	96 95       	lsr	r25
     23a:	87 95       	ror	r24
     23c:	81 70       	andi	r24, 0x01	; 1
     23e:	90 70       	andi	r25, 0x00	; 0
     240:	40 91 a8 03 	lds	r20, 0x03A8
     244:	50 91 a9 03 	lds	r21, 0x03A9
     248:	28 17       	cp	r18, r24
     24a:	39 07       	cpc	r19, r25
     24c:	19 f4       	brne	.+6      	; 0x254 <__vector_1+0x3e>
     24e:	41 50       	subi	r20, 0x01	; 1
     250:	50 40       	sbci	r21, 0x00	; 0
     252:	02 c0       	rjmp	.+4      	; 0x258 <__vector_1+0x42>
    else encA++;
     254:	4f 5f       	subi	r20, 0xFF	; 255
     256:	5f 4f       	sbci	r21, 0xFF	; 255
     258:	50 93 a9 03 	sts	0x03A9, r21
     25c:	40 93 a8 03 	sts	0x03A8, r20

}
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	5f 91       	pop	r21
     266:	4f 91       	pop	r20
     268:	3f 91       	pop	r19
     26a:	2f 91       	pop	r18
     26c:	0f 90       	pop	r0
     26e:	0f be       	out	0x3f, r0	; 63
     270:	0f 90       	pop	r0
     272:	1f 90       	pop	r1
     274:	18 95       	reti

00000276 <__vector_2>:

ISR(INT1_vect)
{
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	2f 93       	push	r18
     282:	3f 93       	push	r19
     284:	4f 93       	push	r20
     286:	5f 93       	push	r21
     288:	8f 93       	push	r24
     28a:	9f 93       	push	r25
	int a = 0;
	int b = 0;
	if(bit_is_set(PIND,0)) a =1;
     28c:	29 b1       	in	r18, 0x09	; 9
	if(bit_is_set(PIND,1)) b =1;
     28e:	89 b1       	in	r24, 0x09	; 9

    if (a==b) encA++;
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	21 70       	andi	r18, 0x01	; 1
     294:	30 70       	andi	r19, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	96 95       	lsr	r25
     29a:	87 95       	ror	r24
     29c:	81 70       	andi	r24, 0x01	; 1
     29e:	90 70       	andi	r25, 0x00	; 0
     2a0:	40 91 a8 03 	lds	r20, 0x03A8
     2a4:	50 91 a9 03 	lds	r21, 0x03A9
     2a8:	28 17       	cp	r18, r24
     2aa:	39 07       	cpc	r19, r25
     2ac:	19 f4       	brne	.+6      	; 0x2b4 <__vector_2+0x3e>
     2ae:	4f 5f       	subi	r20, 0xFF	; 255
     2b0:	5f 4f       	sbci	r21, 0xFF	; 255
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <__vector_2+0x42>
    else encA--;
     2b4:	41 50       	subi	r20, 0x01	; 1
     2b6:	50 40       	sbci	r21, 0x00	; 0
     2b8:	50 93 a9 03 	sts	0x03A9, r21
     2bc:	40 93 a8 03 	sts	0x03A8, r20

}
     2c0:	9f 91       	pop	r25
     2c2:	8f 91       	pop	r24
     2c4:	5f 91       	pop	r21
     2c6:	4f 91       	pop	r20
     2c8:	3f 91       	pop	r19
     2ca:	2f 91       	pop	r18
     2cc:	0f 90       	pop	r0
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	0f 90       	pop	r0
     2d2:	1f 90       	pop	r1
     2d4:	18 95       	reti

000002d6 <__vector_3>:


ISR(INT2_vect)
{
     2d6:	1f 92       	push	r1
     2d8:	0f 92       	push	r0
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	0f 92       	push	r0
     2de:	11 24       	eor	r1, r1
     2e0:	2f 93       	push	r18
     2e2:	3f 93       	push	r19
     2e4:	4f 93       	push	r20
     2e6:	5f 93       	push	r21
     2e8:	8f 93       	push	r24
     2ea:	9f 93       	push	r25
		int a=0;
		int b=0;
		if (bit_is_set(PIND,2)) a = 1;
     2ec:	29 b1       	in	r18, 0x09	; 9
		if (bit_is_set(PIND,3)) b = 1;
     2ee:	89 b1       	in	r24, 0x09	; 9

	    if (a==b) encB++;
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	36 95       	lsr	r19
     2f4:	27 95       	ror	r18
     2f6:	36 95       	lsr	r19
     2f8:	27 95       	ror	r18
     2fa:	21 70       	andi	r18, 0x01	; 1
     2fc:	30 70       	andi	r19, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	43 e0       	ldi	r20, 0x03	; 3
     302:	96 95       	lsr	r25
     304:	87 95       	ror	r24
     306:	4a 95       	dec	r20
     308:	e1 f7       	brne	.-8      	; 0x302 <__vector_3+0x2c>
     30a:	81 70       	andi	r24, 0x01	; 1
     30c:	90 70       	andi	r25, 0x00	; 0
     30e:	40 91 aa 03 	lds	r20, 0x03AA
     312:	50 91 ab 03 	lds	r21, 0x03AB
     316:	28 17       	cp	r18, r24
     318:	39 07       	cpc	r19, r25
     31a:	19 f4       	brne	.+6      	; 0x322 <__vector_3+0x4c>
     31c:	4f 5f       	subi	r20, 0xFF	; 255
     31e:	5f 4f       	sbci	r21, 0xFF	; 255
     320:	02 c0       	rjmp	.+4      	; 0x326 <__vector_3+0x50>
		else encB--;
     322:	41 50       	subi	r20, 0x01	; 1
     324:	50 40       	sbci	r21, 0x00	; 0
     326:	50 93 ab 03 	sts	0x03AB, r21
     32a:	40 93 aa 03 	sts	0x03AA, r20

//		char x[30];
//	sprintf(x,"\n\rA - a:%d, b:%d",a,b);
//	sendString(x);
}
     32e:	9f 91       	pop	r25
     330:	8f 91       	pop	r24
     332:	5f 91       	pop	r21
     334:	4f 91       	pop	r20
     336:	3f 91       	pop	r19
     338:	2f 91       	pop	r18
     33a:	0f 90       	pop	r0
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	0f 90       	pop	r0
     340:	1f 90       	pop	r1
     342:	18 95       	reti

00000344 <__vector_4>:

ISR(INT3_vect)
{
     344:	1f 92       	push	r1
     346:	0f 92       	push	r0
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	0f 92       	push	r0
     34c:	11 24       	eor	r1, r1
     34e:	2f 93       	push	r18
     350:	3f 93       	push	r19
     352:	4f 93       	push	r20
     354:	5f 93       	push	r21
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
		int a=0;
		int b=0;
		if (bit_is_set(PIND,2)) a = 1;
     35a:	29 b1       	in	r18, 0x09	; 9
		if (bit_is_set(PIND,3)) b = 1;
     35c:	89 b1       	in	r24, 0x09	; 9

	    if (a==b) encB--;
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	36 95       	lsr	r19
     362:	27 95       	ror	r18
     364:	36 95       	lsr	r19
     366:	27 95       	ror	r18
     368:	21 70       	andi	r18, 0x01	; 1
     36a:	30 70       	andi	r19, 0x00	; 0
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	43 e0       	ldi	r20, 0x03	; 3
     370:	96 95       	lsr	r25
     372:	87 95       	ror	r24
     374:	4a 95       	dec	r20
     376:	e1 f7       	brne	.-8      	; 0x370 <__vector_4+0x2c>
     378:	81 70       	andi	r24, 0x01	; 1
     37a:	90 70       	andi	r25, 0x00	; 0
     37c:	40 91 aa 03 	lds	r20, 0x03AA
     380:	50 91 ab 03 	lds	r21, 0x03AB
     384:	28 17       	cp	r18, r24
     386:	39 07       	cpc	r19, r25
     388:	19 f4       	brne	.+6      	; 0x390 <__vector_4+0x4c>
     38a:	41 50       	subi	r20, 0x01	; 1
     38c:	50 40       	sbci	r21, 0x00	; 0
     38e:	02 c0       	rjmp	.+4      	; 0x394 <__vector_4+0x50>
    	else encB++;
     390:	4f 5f       	subi	r20, 0xFF	; 255
     392:	5f 4f       	sbci	r21, 0xFF	; 255
     394:	50 93 ab 03 	sts	0x03AB, r21
     398:	40 93 aa 03 	sts	0x03AA, r20

//	char x[30];
//	sprintf(x,"\n\rB - a:%d, b:%d",a,b);
//	sendString(x);

}
     39c:	9f 91       	pop	r25
     39e:	8f 91       	pop	r24
     3a0:	5f 91       	pop	r21
     3a2:	4f 91       	pop	r20
     3a4:	3f 91       	pop	r19
     3a6:	2f 91       	pop	r18
     3a8:	0f 90       	pop	r0
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	0f 90       	pop	r0
     3ae:	1f 90       	pop	r1
     3b0:	18 95       	reti

000003b2 <__vector_6>:

ISR(INT5_vect)
{
     3b2:	1f 92       	push	r1
     3b4:	0f 92       	push	r0
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	0f 92       	push	r0
     3ba:	11 24       	eor	r1, r1
     3bc:	2f 93       	push	r18
     3be:	3f 93       	push	r19
     3c0:	4f 93       	push	r20
     3c2:	5f 93       	push	r21
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
	int a = 0;
	int b = 0;
	if(bit_is_set(PINE,5)) a =1;
     3c8:	2c b1       	in	r18, 0x0c	; 12
	if(bit_is_set(PINE,6)) b =1;
     3ca:	8c b1       	in	r24, 0x0c	; 12

    if (a==b) encC--;
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	55 e0       	ldi	r21, 0x05	; 5
     3d0:	36 95       	lsr	r19
     3d2:	27 95       	ror	r18
     3d4:	5a 95       	dec	r21
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <__vector_6+0x1e>
     3d8:	21 70       	andi	r18, 0x01	; 1
     3da:	30 70       	andi	r19, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	46 e0       	ldi	r20, 0x06	; 6
     3e0:	96 95       	lsr	r25
     3e2:	87 95       	ror	r24
     3e4:	4a 95       	dec	r20
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <__vector_6+0x2e>
     3e8:	81 70       	andi	r24, 0x01	; 1
     3ea:	90 70       	andi	r25, 0x00	; 0
     3ec:	40 91 ac 03 	lds	r20, 0x03AC
     3f0:	50 91 ad 03 	lds	r21, 0x03AD
     3f4:	28 17       	cp	r18, r24
     3f6:	39 07       	cpc	r19, r25
     3f8:	19 f4       	brne	.+6      	; 0x400 <__vector_6+0x4e>
     3fa:	41 50       	subi	r20, 0x01	; 1
     3fc:	50 40       	sbci	r21, 0x00	; 0
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <__vector_6+0x52>
    else encC++;
     400:	4f 5f       	subi	r20, 0xFF	; 255
     402:	5f 4f       	sbci	r21, 0xFF	; 255
     404:	50 93 ad 03 	sts	0x03AD, r21
     408:	40 93 ac 03 	sts	0x03AC, r20

	

}
     40c:	9f 91       	pop	r25
     40e:	8f 91       	pop	r24
     410:	5f 91       	pop	r21
     412:	4f 91       	pop	r20
     414:	3f 91       	pop	r19
     416:	2f 91       	pop	r18
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_7>:


ISR(INT6_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	2f 93       	push	r18
     42e:	3f 93       	push	r19
     430:	4f 93       	push	r20
     432:	5f 93       	push	r21
     434:	8f 93       	push	r24
     436:	9f 93       	push	r25

	int a = 0;
	int b = 0;
	if(bit_is_set(PINE,5)) a =1;
     438:	2c b1       	in	r18, 0x0c	; 12
	if(bit_is_set(PINE,6)) b =1;
     43a:	8c b1       	in	r24, 0x0c	; 12

    if (a==b) encC++;
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	55 e0       	ldi	r21, 0x05	; 5
     440:	36 95       	lsr	r19
     442:	27 95       	ror	r18
     444:	5a 95       	dec	r21
     446:	e1 f7       	brne	.-8      	; 0x440 <__vector_7+0x1e>
     448:	21 70       	andi	r18, 0x01	; 1
     44a:	30 70       	andi	r19, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	46 e0       	ldi	r20, 0x06	; 6
     450:	96 95       	lsr	r25
     452:	87 95       	ror	r24
     454:	4a 95       	dec	r20
     456:	e1 f7       	brne	.-8      	; 0x450 <__vector_7+0x2e>
     458:	81 70       	andi	r24, 0x01	; 1
     45a:	90 70       	andi	r25, 0x00	; 0
     45c:	40 91 ac 03 	lds	r20, 0x03AC
     460:	50 91 ad 03 	lds	r21, 0x03AD
     464:	28 17       	cp	r18, r24
     466:	39 07       	cpc	r19, r25
     468:	19 f4       	brne	.+6      	; 0x470 <__vector_7+0x4e>
     46a:	4f 5f       	subi	r20, 0xFF	; 255
     46c:	5f 4f       	sbci	r21, 0xFF	; 255
     46e:	02 c0       	rjmp	.+4      	; 0x474 <__vector_7+0x52>
    else encC--;
     470:	41 50       	subi	r20, 0x01	; 1
     472:	50 40       	sbci	r21, 0x00	; 0
     474:	50 93 ad 03 	sts	0x03AD, r21
     478:	40 93 ac 03 	sts	0x03AC, r20

	
}
     47c:	9f 91       	pop	r25
     47e:	8f 91       	pop	r24
     480:	5f 91       	pop	r21
     482:	4f 91       	pop	r20
     484:	3f 91       	pop	r19
     486:	2f 91       	pop	r18
     488:	0f 90       	pop	r0
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	0f 90       	pop	r0
     48e:	1f 90       	pop	r1
     490:	18 95       	reti

00000492 <__vector_21>:


ISR(USART0_RX_vect)
{
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	2f 93       	push	r18
     49e:	3f 93       	push	r19
     4a0:	4f 93       	push	r20
     4a2:	5f 93       	push	r21
     4a4:	6f 93       	push	r22
     4a6:	7f 93       	push	r23
     4a8:	8f 93       	push	r24
     4aa:	9f 93       	push	r25
     4ac:	af 93       	push	r26
     4ae:	bf 93       	push	r27
	//char ReceivedByte;
	char index = 0;
	char fragment = 0;

	ReceivedByte = UDR0; // Fetch the recieved byte value into the variable "ByteReceived"
     4b0:	20 91 c6 00 	lds	r18, 0x00C6
     4b4:	20 93 c7 03 	sts	0x03C7, r18
//		motorpos = motorpos_temp;
//		bytecount = 0;
//		motorpos_temp = 0;
//	}

	index = ReceivedByte >> 5;
     4b8:	82 2f       	mov	r24, r18
     4ba:	82 95       	swap	r24
     4bc:	86 95       	lsr	r24
     4be:	87 70       	andi	r24, 0x07	; 7
	fragment = ReceivedByte & 0b11111;

	if (index == 0)
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__vector_21+0x38>
		bytecount = 0;
     4c2:	10 92 bf 03 	sts	0x03BF, r1
     4c6:	10 92 be 03 	sts	0x03BE, r1
	
	if (index == bytecount) {
     4ca:	68 2f       	mov	r22, r24
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	80 91 be 03 	lds	r24, 0x03BE
     4d2:	90 91 bf 03 	lds	r25, 0x03BF
     4d6:	68 17       	cp	r22, r24
     4d8:	79 07       	cpc	r23, r25
     4da:	09 f0       	breq	.+2      	; 0x4de <__vector_21+0x4c>
     4dc:	43 c0       	rjmp	.+134    	; 0x564 <__vector_21+0xd2>
		motorpos_temp |= ((long)fragment << bytecount*5);
     4de:	2f 71       	andi	r18, 0x1F	; 31
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	cb 01       	movw	r24, r22
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	86 0f       	add	r24, r22
     4f2:	97 1f       	adc	r25, r23
     4f4:	04 c0       	rjmp	.+8      	; 0x4fe <__vector_21+0x6c>
     4f6:	22 0f       	add	r18, r18
     4f8:	33 1f       	adc	r19, r19
     4fa:	44 1f       	adc	r20, r20
     4fc:	55 1f       	adc	r21, r21
     4fe:	8a 95       	dec	r24
     500:	d2 f7       	brpl	.-12     	; 0x4f6 <__vector_21+0x64>
     502:	80 91 b6 03 	lds	r24, 0x03B6
     506:	90 91 b7 03 	lds	r25, 0x03B7
     50a:	a0 91 b8 03 	lds	r26, 0x03B8
     50e:	b0 91 b9 03 	lds	r27, 0x03B9
     512:	28 2b       	or	r18, r24
     514:	39 2b       	or	r19, r25
     516:	4a 2b       	or	r20, r26
     518:	5b 2b       	or	r21, r27
     51a:	20 93 b6 03 	sts	0x03B6, r18
     51e:	30 93 b7 03 	sts	0x03B7, r19
     522:	40 93 b8 03 	sts	0x03B8, r20
     526:	50 93 b9 03 	sts	0x03B9, r21

		if (++bytecount == 7) {
     52a:	cb 01       	movw	r24, r22
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	90 93 bf 03 	sts	0x03BF, r25
     532:	80 93 be 03 	sts	0x03BE, r24
     536:	07 97       	sbiw	r24, 0x07	; 7
     538:	f1 f4       	brne	.+60     	; 0x576 <__vector_21+0xe4>
			motorpos = motorpos_temp;
     53a:	20 93 ba 03 	sts	0x03BA, r18
     53e:	30 93 bb 03 	sts	0x03BB, r19
     542:	40 93 bc 03 	sts	0x03BC, r20
     546:	50 93 bd 03 	sts	0x03BD, r21
			bytecount = 0;
     54a:	10 92 bf 03 	sts	0x03BF, r1
     54e:	10 92 be 03 	sts	0x03BE, r1
			motorpos_temp = 0;
     552:	10 92 b6 03 	sts	0x03B6, r1
     556:	10 92 b7 03 	sts	0x03B7, r1
     55a:	10 92 b8 03 	sts	0x03B8, r1
     55e:	10 92 b9 03 	sts	0x03B9, r1
     562:	09 c0       	rjmp	.+18     	; 0x576 <__vector_21+0xe4>
		}
	} else {
		receive_error++;
     564:	80 91 c0 03 	lds	r24, 0x03C0
     568:	90 91 c1 03 	lds	r25, 0x03C1
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	90 93 c1 03 	sts	0x03C1, r25
     572:	80 93 c0 03 	sts	0x03C0, r24
	}
   
   //UDR = ReceivedByte; // Echo back the received byte back to the computer
} 
     576:	bf 91       	pop	r27
     578:	af 91       	pop	r26
     57a:	9f 91       	pop	r25
     57c:	8f 91       	pop	r24
     57e:	7f 91       	pop	r23
     580:	6f 91       	pop	r22
     582:	5f 91       	pop	r21
     584:	4f 91       	pop	r20
     586:	3f 91       	pop	r19
     588:	2f 91       	pop	r18
     58a:	0f 90       	pop	r0
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	0f 90       	pop	r0
     590:	1f 90       	pop	r1
     592:	18 95       	reti

00000594 <LED1>:
//																//
//**************************************************************//

void LED1(int p)
{
	if (p==0) { BCLR(PORTA,7); }
     594:	89 2b       	or	r24, r25
     596:	11 f4       	brne	.+4      	; 0x59c <LED1+0x8>
     598:	17 98       	cbi	0x02, 7	; 2
     59a:	08 95       	ret
	else { BSET(PORTA,7); }
     59c:	17 9a       	sbi	0x02, 7	; 2
     59e:	08 95       	ret

000005a0 <LED2>:
}

void LED2(int p)
{
	if (p==0) { BCLR(PORTA,6); }
     5a0:	89 2b       	or	r24, r25
     5a2:	11 f4       	brne	.+4      	; 0x5a8 <LED2+0x8>
     5a4:	16 98       	cbi	0x02, 6	; 2
     5a6:	08 95       	ret
	else { BSET(PORTA,6); }
     5a8:	16 9a       	sbi	0x02, 6	; 2
     5aa:	08 95       	ret

000005ac <LED3>:
}

void LED3(int p)
{
	if (p==0) { BCLR(PORTA,5); }
     5ac:	89 2b       	or	r24, r25
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <LED3+0x8>
     5b0:	15 98       	cbi	0x02, 5	; 2
     5b2:	08 95       	ret
	else { BSET(PORTA,5); }
     5b4:	15 9a       	sbi	0x02, 5	; 2
     5b6:	08 95       	ret

000005b8 <STATUS_LED_TOGGLE>:
{
//	if (status_toggle)
//		PORTE = PORTE | 0b00010000;	
//	else
//		PORTE = PORTE & 0b11101111;	
	if (status_toggle++ > 200) {
     5b8:	80 91 c2 03 	lds	r24, 0x03C2
     5bc:	8f 5f       	subi	r24, 0xFF	; 255
     5be:	80 93 c2 03 	sts	0x03C2, r24
     5c2:	81 50       	subi	r24, 0x01	; 1
     5c4:	89 3c       	cpi	r24, 0xC9	; 201
     5c6:	10 f0       	brcs	.+4      	; 0x5cc <STATUS_LED_TOGGLE+0x14>
		BCLR(PORTE, 4);
     5c8:	74 98       	cbi	0x0e, 4	; 14
     5ca:	08 95       	ret
	} else {
		BSET(PORTE, 4);
     5cc:	74 9a       	sbi	0x0e, 4	; 14
     5ce:	08 95       	ret

000005d0 <getBlockerPos>:
//  MAIN FUNCTIONS												//
//																//
//**************************************************************//

long getBlockerPos()
{
     5d0:	2f 92       	push	r2
     5d2:	3f 92       	push	r3
     5d4:	4f 92       	push	r4
     5d6:	5f 92       	push	r5
     5d8:	6f 92       	push	r6
     5da:	7f 92       	push	r7
     5dc:	8f 92       	push	r8
     5de:	9f 92       	push	r9
     5e0:	af 92       	push	r10
     5e2:	bf 92       	push	r11
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	df 93       	push	r29
     5f2:	cf 93       	push	r28
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <getBlockerPos+0x26>
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
	long oldblocker = blocker;
     5fa:	30 90 ae 03 	lds	r3, 0x03AE
     5fe:	20 90 af 03 	lds	r2, 0x03AF
     602:	60 91 b0 03 	lds	r22, 0x03B0
     606:	69 83       	std	Y+1, r22	; 0x01
     608:	80 91 b1 03 	lds	r24, 0x03B1
     60c:	8a 83       	std	Y+2, r24	; 0x02

	// find offset values for all three encoders and read encoders to feed signals to EncoderA,B,C etc.

	// Use calibration to determine offset for each encoder so that 0 degrees corresponds to horizontal */
//	float tempa = (encA + offsetA)*2.0*PI;
	float EncoderA = ((encA + offsetA)*2.0*PI)/(float)cprA;
     60e:	60 91 a8 03 	lds	r22, 0x03A8
     612:	70 91 a9 03 	lds	r23, 0x03A9
     616:	61 55       	subi	r22, 0x51	; 81
     618:	71 4e       	sbci	r23, 0xE1	; 225
     61a:	88 27       	eor	r24, r24
     61c:	77 fd       	sbrc	r23, 7
     61e:	80 95       	com	r24
     620:	98 2f       	mov	r25, r24
     622:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <__floatsisf>
     626:	9b 01       	movw	r18, r22
     628:	ac 01       	movw	r20, r24
     62a:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__addsf3>
     62e:	2b ed       	ldi	r18, 0xDB	; 219
     630:	3f e0       	ldi	r19, 0x0F	; 15
     632:	49 e4       	ldi	r20, 0x49	; 73
     634:	50 e4       	ldi	r21, 0x40	; 64
     636:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e4       	ldi	r19, 0x40	; 64
     63e:	4c e1       	ldi	r20, 0x1C	; 28
     640:	56 e4       	ldi	r21, 0x46	; 70
     642:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__divsf3>
     646:	7b 01       	movw	r14, r22
     648:	8c 01       	movw	r16, r24
	float EncoderB = ((encB + offsetB)*2.0*PI)/(float)cprB;
	float Zm = (encC + offsetC)*25.4/cpiC;		//360 counts/inch, 2.54 cm/inch, 10mm/cm, 12cm strip
     64a:	40 90 ac 03 	lds	r4, 0x03AC
     64e:	50 90 ad 03 	lds	r5, 0x03AD

		Xm = 50.0*cos(EncoderA)+45.0*cos(EncoderA + EncoderB - PI);  //50*cos(EncoderA) + 45*cos(theta2);
     652:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <cos>
     656:	5b 01       	movw	r10, r22
     658:	6c 01       	movw	r12, r24
     65a:	60 91 aa 03 	lds	r22, 0x03AA
     65e:	70 91 ab 03 	lds	r23, 0x03AB
     662:	6e 58       	subi	r22, 0x8E	; 142
     664:	7e 4f       	sbci	r23, 0xFE	; 254
     666:	88 27       	eor	r24, r24
     668:	77 fd       	sbrc	r23, 7
     66a:	80 95       	com	r24
     66c:	98 2f       	mov	r25, r24
     66e:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <__floatsisf>
     672:	9b 01       	movw	r18, r22
     674:	ac 01       	movw	r20, r24
     676:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__addsf3>
     67a:	2b ed       	ldi	r18, 0xDB	; 219
     67c:	3f e0       	ldi	r19, 0x0F	; 15
     67e:	49 e4       	ldi	r20, 0x49	; 73
     680:	50 e4       	ldi	r21, 0x40	; 64
     682:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	44 eb       	ldi	r20, 0xB4	; 180
     68c:	54 e4       	ldi	r21, 0x44	; 68
     68e:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__divsf3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	c8 01       	movw	r24, r16
     698:	b7 01       	movw	r22, r14
     69a:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__addsf3>
     69e:	2b ed       	ldi	r18, 0xDB	; 219
     6a0:	3f e0       	ldi	r19, 0x0F	; 15
     6a2:	49 e4       	ldi	r20, 0x49	; 73
     6a4:	50 e4       	ldi	r21, 0x40	; 64
     6a6:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__subsf3>
     6aa:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <cos>
     6ae:	7b 01       	movw	r14, r22
     6b0:	8c 01       	movw	r16, r24
     6b2:	c6 01       	movw	r24, r12
     6b4:	b5 01       	movw	r22, r10
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	48 e4       	ldi	r20, 0x48	; 72
     6bc:	52 e4       	ldi	r21, 0x42	; 66
     6be:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     6c2:	5b 01       	movw	r10, r22
     6c4:	6c 01       	movw	r12, r24
     6c6:	c8 01       	movw	r24, r16
     6c8:	b7 01       	movw	r22, r14
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	44 e3       	ldi	r20, 0x34	; 52
     6d0:	52 e4       	ldi	r21, 0x42	; 66
     6d2:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     6d6:	9b 01       	movw	r18, r22
     6d8:	ac 01       	movw	r20, r24
     6da:	c6 01       	movw	r24, r12
     6dc:	b5 01       	movw	r22, r10
     6de:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__addsf3>
     6e2:	3b 01       	movw	r6, r22
     6e4:	4c 01       	movw	r8, r24
     6e6:	60 93 d4 03 	sts	0x03D4, r22
     6ea:	70 93 d5 03 	sts	0x03D5, r23
     6ee:	80 93 d6 03 	sts	0x03D6, r24
     6f2:	90 93 d7 03 	sts	0x03D7, r25
		

	//	double Angle2m = acos(((50*50)+(45*45)-(Xm*Xm)-(Ym*Ym))/(2*50*45));	actual equation
	//	double Angle2m = acos((2500 + 2025 - (Xm*Xm) - (Ym*Ym)) / 4500);	simplified numbers

	if(shape == 1)		// Ellipse X-Y, linear extrusion along Z axis
     6f6:	c0 90 cb 01 	lds	r12, 0x01CB
     6fa:	d0 90 cc 01 	lds	r13, 0x01CC
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	c9 16       	cp	r12, r25
     702:	d1 04       	cpc	r13, r1
     704:	89 f4       	brne	.+34     	; 0x728 <getBlockerPos+0x158>
	{
		if (1)
		{
			Ym = sqrt((Y_stretch*Y_stretch) - (Y_stretch*Y_stretch*(Xm-X_base)*(Xm-X_base))/(X_stretch*X_stretch)) + Y_base;
     706:	c4 01       	movw	r24, r8
     708:	b3 01       	movw	r22, r6
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	48 ec       	ldi	r20, 0xC8	; 200
     710:	53 e4       	ldi	r21, 0x43	; 67
     712:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     716:	a4 01       	movw	r20, r8
     718:	93 01       	movw	r18, r6
     71a:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e4       	ldi	r19, 0x40	; 64
     722:	4c e1       	ldi	r20, 0x1C	; 28
     724:	55 ec       	ldi	r21, 0xC5	; 197
     726:	33 c0       	rjmp	.+102    	; 0x78e <getBlockerPos+0x1be>

	// Use calibration to determine offset for each encoder so that 0 degrees corresponds to horizontal */
//	float tempa = (encA + offsetA)*2.0*PI;
	float EncoderA = ((encA + offsetA)*2.0*PI)/(float)cprA;
	float EncoderB = ((encB + offsetB)*2.0*PI)/(float)cprB;
	float Zm = (encC + offsetC)*25.4/cpiC;		//360 counts/inch, 2.54 cm/inch, 10mm/cm, 12cm strip
     728:	e8 e7       	ldi	r30, 0x78	; 120
     72a:	f3 e0       	ldi	r31, 0x03	; 3
     72c:	4e 0e       	add	r4, r30
     72e:	5f 1e       	adc	r5, r31
     730:	b2 01       	movw	r22, r4
     732:	88 27       	eor	r24, r24
     734:	77 fd       	sbrc	r23, 7
     736:	80 95       	com	r24
     738:	98 2f       	mov	r25, r24
     73a:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <__floatsisf>
     73e:	23 e3       	ldi	r18, 0x33	; 51
     740:	33 e3       	ldi	r19, 0x33	; 51
     742:	4b ec       	ldi	r20, 0xCB	; 203
     744:	51 e4       	ldi	r21, 0x41	; 65
     746:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	4a ef       	ldi	r20, 0xFA	; 250
     750:	54 e4       	ldi	r21, 0x44	; 68
     752:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__divsf3>
     756:	7b 01       	movw	r14, r22
     758:	8c 01       	movw	r16, r24
		float temp =(2500 + 2025 - (Xm*Xm) - (Ym*Ym)) / 4500.0;
		Angle2m = acos(temp);
	}


	else if(shape == 2)		// Ellipse Z-Y, linear extrusion along X axis
     75a:	f2 e0       	ldi	r31, 0x02	; 2
     75c:	cf 16       	cp	r12, r31
     75e:	d1 04       	cpc	r13, r1
     760:	e9 f4       	brne	.+58     	; 0x79c <getBlockerPos+0x1cc>
	{
		Ym = sqrt((Y_stretch*Y_stretch) - (Y_stretch*Y_stretch*(Zm-Z_base)*(Zm-Z_base))/(Z_stretch*Z_stretch)) + Y_base;
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	4c e8       	ldi	r20, 0x8C	; 140
     768:	52 e4       	ldi	r21, 0x42	; 66
     76a:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__subsf3>
     76e:	7b 01       	movw	r14, r22
     770:	8c 01       	movw	r16, r24
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	48 ec       	ldi	r20, 0xC8	; 200
     778:	53 e4       	ldi	r21, 0x43	; 67
     77a:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     77e:	a8 01       	movw	r20, r16
     780:	97 01       	movw	r18, r14
     782:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	48 ec       	ldi	r20, 0xC8	; 200
     78c:	54 ec       	ldi	r21, 0xC4	; 196
     78e:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__divsf3>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	48 ec       	ldi	r20, 0xC8	; 200
     798:	53 e4       	ldi	r21, 0x43	; 67
     79a:	41 c1       	rjmp	.+642    	; 0xa1e <getBlockerPos+0x44e>
		float temp = (2500 + 2025 - (Xm*Xm) - (Ym*Ym)) / 4500.0;
		Angle2m = acos(temp);
	}


	else if(shape == 3)		// X-Z Plane at Ym=60mm above base point
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	c6 16       	cp	r12, r22
     7a0:	d1 04       	cpc	r13, r1
     7a2:	f9 f4       	brne	.+62     	; 0x7e2 <getBlockerPos+0x212>
	{
		Ym = flatHeight;
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 e7       	ldi	r26, 0x70	; 112
     7aa:	b2 e4       	ldi	r27, 0x42	; 66
     7ac:	80 93 c3 03 	sts	0x03C3, r24
     7b0:	90 93 c4 03 	sts	0x03C4, r25
     7b4:	a0 93 c5 03 	sts	0x03C5, r26
     7b8:	b0 93 c6 03 	sts	0x03C6, r27
		float temp = (2500 + 2025 - (Xm*Xm) - (Ym*Ym)) / 4500.0;
		Angle2m = acos(temp);
     7bc:	c4 01       	movw	r24, r8
     7be:	b3 01       	movw	r22, r6
     7c0:	a4 01       	movw	r20, r8
     7c2:	93 01       	movw	r18, r6
     7c4:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     7c8:	9b 01       	movw	r18, r22
     7ca:	ac 01       	movw	r20, r24
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	78 e6       	ldi	r23, 0x68	; 104
     7d0:	8d e8       	ldi	r24, 0x8D	; 141
     7d2:	95 e4       	ldi	r25, 0x45	; 69
     7d4:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__subsf3>
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	41 e6       	ldi	r20, 0x61	; 97
     7de:	55 e4       	ldi	r21, 0x45	; 69
     7e0:	4c c1       	rjmp	.+664    	; 0xa7a <getBlockerPos+0x4aa>

	}

	else if(shape == 4)		// Sine Bump X-Y
     7e2:	84 e0       	ldi	r24, 0x04	; 4
     7e4:	c8 16       	cp	r12, r24
     7e6:	d1 04       	cpc	r13, r1
     7e8:	09 f0       	breq	.+2      	; 0x7ec <getBlockerPos+0x21c>
     7ea:	69 c0       	rjmp	.+210    	; 0x8be <getBlockerPos+0x2ee>
	{
		//double Ym;

		if(Xm >= -20 && Xm <= 20 && Zm >= (Z_base-20) && Zm <= (Z_base+20))
     7ec:	c4 01       	movw	r24, r8
     7ee:	b3 01       	movw	r22, r6
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	40 ea       	ldi	r20, 0xA0	; 160
     7f6:	51 ec       	ldi	r21, 0xC1	; 193
     7f8:	0e 94 84 20 	call	0x4108	; 0x4108 <__gesf2>
     7fc:	88 23       	and	r24, r24
     7fe:	0c f4       	brge	.+2      	; 0x802 <getBlockerPos+0x232>
     800:	59 c0       	rjmp	.+178    	; 0x8b4 <getBlockerPos+0x2e4>
     802:	c4 01       	movw	r24, r8
     804:	b3 01       	movw	r22, r6
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	40 ea       	ldi	r20, 0xA0	; 160
     80c:	51 e4       	ldi	r21, 0x41	; 65
     80e:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__cmpsf2>
     812:	18 16       	cp	r1, r24
     814:	0c f4       	brge	.+2      	; 0x818 <getBlockerPos+0x248>
     816:	4e c0       	rjmp	.+156    	; 0x8b4 <getBlockerPos+0x2e4>
     818:	c8 01       	movw	r24, r16
     81a:	b7 01       	movw	r22, r14
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	48 e4       	ldi	r20, 0x48	; 72
     822:	52 e4       	ldi	r21, 0x42	; 66
     824:	0e 94 84 20 	call	0x4108	; 0x4108 <__gesf2>
     828:	88 23       	and	r24, r24
     82a:	0c f4       	brge	.+2      	; 0x82e <getBlockerPos+0x25e>
     82c:	43 c0       	rjmp	.+134    	; 0x8b4 <getBlockerPos+0x2e4>
     82e:	c8 01       	movw	r24, r16
     830:	b7 01       	movw	r22, r14
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	44 eb       	ldi	r20, 0xB4	; 180
     838:	52 e4       	ldi	r21, 0x42	; 66
     83a:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__cmpsf2>
     83e:	18 16       	cp	r1, r24
     840:	cc f1       	brlt	.+114    	; 0x8b4 <getBlockerPos+0x2e4>
			{	
				Ym = flatHeight+sineHeight + sineHeight*cos(sqrt(Xm*Xm+(Zm-Z_base)*(Zm-Z_base)) * PI / 20.0);
     842:	c8 01       	movw	r24, r16
     844:	b7 01       	movw	r22, r14
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	4c e8       	ldi	r20, 0x8C	; 140
     84c:	52 e4       	ldi	r21, 0x42	; 66
     84e:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__subsf3>
     852:	7b 01       	movw	r14, r22
     854:	8c 01       	movw	r16, r24
     856:	c4 01       	movw	r24, r8
     858:	b3 01       	movw	r22, r6
     85a:	a4 01       	movw	r20, r8
     85c:	93 01       	movw	r18, r6
     85e:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     862:	5b 01       	movw	r10, r22
     864:	6c 01       	movw	r12, r24
     866:	c8 01       	movw	r24, r16
     868:	b7 01       	movw	r22, r14
     86a:	a8 01       	movw	r20, r16
     86c:	97 01       	movw	r18, r14
     86e:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     872:	9b 01       	movw	r18, r22
     874:	ac 01       	movw	r20, r24
     876:	c6 01       	movw	r24, r12
     878:	b5 01       	movw	r22, r10
     87a:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__addsf3>
     87e:	0e 94 ef 20 	call	0x41de	; 0x41de <sqrt>
     882:	2b ed       	ldi	r18, 0xDB	; 219
     884:	3f e0       	ldi	r19, 0x0F	; 15
     886:	49 e4       	ldi	r20, 0x49	; 73
     888:	50 e4       	ldi	r21, 0x40	; 64
     88a:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 ea       	ldi	r20, 0xA0	; 160
     894:	51 e4       	ldi	r21, 0x41	; 65
     896:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__divsf3>
     89a:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <cos>
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	40 e2       	ldi	r20, 0x20	; 32
     8a4:	51 e4       	ldi	r21, 0x41	; 65
     8a6:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	4c e8       	ldi	r20, 0x8C	; 140
     8b0:	52 e4       	ldi	r21, 0x42	; 66
     8b2:	3e c0       	rjmp	.+124    	; 0x930 <getBlockerPos+0x360>
			}
		else
			{	
				Ym = flatHeight;
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e7       	ldi	r26, 0x70	; 112
     8ba:	b2 e4       	ldi	r27, 0x42	; 66
     8bc:	48 c0       	rjmp	.+144    	; 0x94e <getBlockerPos+0x37e>
		//sprintf(x,"Enc A: %d  Enc B: %d  Enc C: %d  Blocker: %ld  Xm: %d  Ym: %d      " ,(encA*360/cprA), (encB*360/cprB), encC, (blocker*360/motorCpr), (int)Xm, (int)Ym);
	    //sendString("\r");
		//sendString(x);

	}
	else if(shape == 5)		// Sine Bump Y-Z
     8be:	95 e0       	ldi	r25, 0x05	; 5
     8c0:	c9 16       	cp	r12, r25
     8c2:	d1 04       	cpc	r13, r1
     8c4:	09 f0       	breq	.+2      	; 0x8c8 <getBlockerPos+0x2f8>
     8c6:	6e c0       	rjmp	.+220    	; 0x9a4 <getBlockerPos+0x3d4>
	{
		//double Ym;

		if(Zm >= (Z_base-20) && Zm <= (Z_base+20))
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	48 e4       	ldi	r20, 0x48	; 72
     8d2:	52 e4       	ldi	r21, 0x42	; 66
     8d4:	0e 94 84 20 	call	0x4108	; 0x4108 <__gesf2>
     8d8:	88 23       	and	r24, r24
     8da:	ac f1       	brlt	.+106    	; 0x946 <getBlockerPos+0x376>
     8dc:	c8 01       	movw	r24, r16
     8de:	b7 01       	movw	r22, r14
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	44 eb       	ldi	r20, 0xB4	; 180
     8e6:	52 e4       	ldi	r21, 0x42	; 66
     8e8:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__cmpsf2>
     8ec:	18 16       	cp	r1, r24
     8ee:	5c f1       	brlt	.+86     	; 0x946 <getBlockerPos+0x376>
			{	
				Ym = 40 + 10*cos((Zm-Z_base) * PI / 20.0);
     8f0:	c8 01       	movw	r24, r16
     8f2:	b7 01       	movw	r22, r14
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	4c e8       	ldi	r20, 0x8C	; 140
     8fa:	52 e4       	ldi	r21, 0x42	; 66
     8fc:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__subsf3>
     900:	2b ed       	ldi	r18, 0xDB	; 219
     902:	3f e0       	ldi	r19, 0x0F	; 15
     904:	49 e4       	ldi	r20, 0x49	; 73
     906:	50 e4       	ldi	r21, 0x40	; 64
     908:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 ea       	ldi	r20, 0xA0	; 160
     912:	51 e4       	ldi	r21, 0x41	; 65
     914:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__divsf3>
     918:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <cos>
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e2       	ldi	r20, 0x20	; 32
     922:	51 e4       	ldi	r21, 0x41	; 65
     924:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	40 e2       	ldi	r20, 0x20	; 32
     92e:	52 e4       	ldi	r21, 0x42	; 66
     930:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__addsf3>
     934:	60 93 c3 03 	sts	0x03C3, r22
     938:	70 93 c4 03 	sts	0x03C4, r23
     93c:	80 93 c5 03 	sts	0x03C5, r24
     940:	90 93 c6 03 	sts	0x03C6, r25
     944:	0c c0       	rjmp	.+24     	; 0x95e <getBlockerPos+0x38e>
			}
		else
			{	
				Ym = 30;
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	a0 ef       	ldi	r26, 0xF0	; 240
     94c:	b1 e4       	ldi	r27, 0x41	; 65
     94e:	80 93 c3 03 	sts	0x03C3, r24
     952:	90 93 c4 03 	sts	0x03C4, r25
     956:	a0 93 c5 03 	sts	0x03C5, r26
     95a:	b0 93 c6 03 	sts	0x03C6, r27
			}
		float temp = (2500 + 2025 - (Xm*Xm) - (Ym*Ym)) / 4500.0;
     95e:	a0 90 c3 03 	lds	r10, 0x03C3
     962:	b0 90 c4 03 	lds	r11, 0x03C4
     966:	c0 90 c5 03 	lds	r12, 0x03C5
     96a:	d0 90 c6 03 	lds	r13, 0x03C6
		Angle2m = acos(temp);
     96e:	c4 01       	movw	r24, r8
     970:	b3 01       	movw	r22, r6
     972:	a4 01       	movw	r20, r8
     974:	93 01       	movw	r18, r6
     976:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     97a:	9b 01       	movw	r18, r22
     97c:	ac 01       	movw	r20, r24
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	78 e6       	ldi	r23, 0x68	; 104
     982:	8d e8       	ldi	r24, 0x8D	; 141
     984:	95 e4       	ldi	r25, 0x45	; 69
     986:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__subsf3>
     98a:	7b 01       	movw	r14, r22
     98c:	8c 01       	movw	r16, r24
     98e:	c6 01       	movw	r24, r12
     990:	b5 01       	movw	r22, r10
     992:	a6 01       	movw	r20, r12
     994:	95 01       	movw	r18, r10
     996:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	c8 01       	movw	r24, r16
     9a0:	b7 01       	movw	r22, r14
     9a2:	6b c0       	rjmp	.+214    	; 0xa7a <getBlockerPos+0x4aa>
	    //sendString("\r");
		//sendString(x);

	}

	else if(shape == 6)		// 3D Ellipse, linear extrusion along X axis
     9a4:	e6 e0       	ldi	r30, 0x06	; 6
     9a6:	ce 16       	cp	r12, r30
     9a8:	d1 04       	cpc	r13, r1
     9aa:	09 f0       	breq	.+2      	; 0x9ae <getBlockerPos+0x3de>
     9ac:	8f c0       	rjmp	.+286    	; 0xacc <getBlockerPos+0x4fc>
	{
		Ym = sqrt((Y_stretch*Y_stretch) - (Y_stretch*Y_stretch*(Zm-Z_base)*(Zm-Z_base))/(Z_stretch*Z_stretch) - (Y_stretch*Y_stretch*(Xm-X_base)*(Xm-X_base))/(X_stretch*X_stretch)) + Y_base;
     9ae:	c8 01       	movw	r24, r16
     9b0:	b7 01       	movw	r22, r14
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	4c e8       	ldi	r20, 0x8C	; 140
     9b8:	52 e4       	ldi	r21, 0x42	; 66
     9ba:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__subsf3>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	48 ec       	ldi	r20, 0xC8	; 200
     9c8:	53 e4       	ldi	r21, 0x43	; 67
     9ca:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     9ce:	a8 01       	movw	r20, r16
     9d0:	97 01       	movw	r18, r14
     9d2:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	48 ec       	ldi	r20, 0xC8	; 200
     9dc:	54 ec       	ldi	r21, 0xC4	; 196
     9de:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__divsf3>
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	48 ec       	ldi	r20, 0xC8	; 200
     9e8:	53 e4       	ldi	r21, 0x43	; 67
     9ea:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__addsf3>
     9ee:	7b 01       	movw	r14, r22
     9f0:	8c 01       	movw	r16, r24
     9f2:	c4 01       	movw	r24, r8
     9f4:	b3 01       	movw	r22, r6
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	48 ec       	ldi	r20, 0xC8	; 200
     9fc:	53 e4       	ldi	r21, 0x43	; 67
     9fe:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     a02:	a4 01       	movw	r20, r8
     a04:	93 01       	movw	r18, r6
     a06:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e4       	ldi	r19, 0x40	; 64
     a0e:	4c e1       	ldi	r20, 0x1C	; 28
     a10:	55 ec       	ldi	r21, 0xC5	; 197
     a12:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__divsf3>
     a16:	9b 01       	movw	r18, r22
     a18:	ac 01       	movw	r20, r24
     a1a:	c8 01       	movw	r24, r16
     a1c:	b7 01       	movw	r22, r14
     a1e:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__addsf3>
     a22:	0e 94 ef 20 	call	0x41de	; 0x41de <sqrt>
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	40 e7       	ldi	r20, 0x70	; 112
     a2c:	52 e4       	ldi	r21, 0x42	; 66
     a2e:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__addsf3>
     a32:	7b 01       	movw	r14, r22
     a34:	8c 01       	movw	r16, r24
     a36:	60 93 c3 03 	sts	0x03C3, r22
     a3a:	70 93 c4 03 	sts	0x03C4, r23
     a3e:	80 93 c5 03 	sts	0x03C5, r24
     a42:	90 93 c6 03 	sts	0x03C6, r25
		float temp = (2500 + 2025 - (Xm*Xm) - (Ym*Ym)) / 4500.0;
		Angle2m = acos(temp);
     a46:	c4 01       	movw	r24, r8
     a48:	b3 01       	movw	r22, r6
     a4a:	a4 01       	movw	r20, r8
     a4c:	93 01       	movw	r18, r6
     a4e:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	78 e6       	ldi	r23, 0x68	; 104
     a5a:	8d e8       	ldi	r24, 0x8D	; 141
     a5c:	95 e4       	ldi	r25, 0x45	; 69
     a5e:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__subsf3>
     a62:	5b 01       	movw	r10, r22
     a64:	6c 01       	movw	r12, r24
     a66:	c8 01       	movw	r24, r16
     a68:	b7 01       	movw	r22, r14
     a6a:	a8 01       	movw	r20, r16
     a6c:	97 01       	movw	r18, r14
     a6e:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     a72:	9b 01       	movw	r18, r22
     a74:	ac 01       	movw	r20, r24
     a76:	c6 01       	movw	r24, r12
     a78:	b5 01       	movw	r22, r10
     a7a:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__subsf3>
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 ea       	ldi	r19, 0xA0	; 160
     a82:	4c e8       	ldi	r20, 0x8C	; 140
     a84:	55 e4       	ldi	r21, 0x45	; 69
     a86:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__divsf3>
     a8a:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <acos>
     a8e:	7b 01       	movw	r14, r22
     a90:	8c 01       	movw	r16, r24
	else
	{
		Angle2m = 0;	
	}

	if (Angle2m > PI) Angle2m = PI;
     a92:	2b ed       	ldi	r18, 0xDB	; 219
     a94:	3f e0       	ldi	r19, 0x0F	; 15
     a96:	49 e4       	ldi	r20, 0x49	; 73
     a98:	50 e4       	ldi	r21, 0x40	; 64
     a9a:	0e 94 84 20 	call	0x4108	; 0x4108 <__gesf2>
     a9e:	18 16       	cp	r1, r24
     aa0:	5c f4       	brge	.+22     	; 0xab8 <getBlockerPos+0x4e8>
     aa2:	0f 2e       	mov	r0, r31
     aa4:	fb ed       	ldi	r31, 0xDB	; 219
     aa6:	ef 2e       	mov	r14, r31
     aa8:	ff e0       	ldi	r31, 0x0F	; 15
     aaa:	ff 2e       	mov	r15, r31
     aac:	f9 e4       	ldi	r31, 0x49	; 73
     aae:	0f 2f       	mov	r16, r31
     ab0:	f0 e4       	ldi	r31, 0x40	; 64
     ab2:	1f 2f       	mov	r17, r31
     ab4:	f0 2d       	mov	r31, r0
     ab6:	14 c0       	rjmp	.+40     	; 0xae0 <getBlockerPos+0x510>
	if (Angle2m < 0) Angle2m = 0;
     ab8:	c8 01       	movw	r24, r16
     aba:	b7 01       	movw	r22, r14
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__cmpsf2>
     ac8:	88 23       	and	r24, r24
     aca:	54 f4       	brge	.+20     	; 0xae0 <getBlockerPos+0x510>
     acc:	0f 2e       	mov	r0, r31
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	ef 2e       	mov	r14, r31
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	ff 2e       	mov	r15, r31
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	0f 2f       	mov	r16, r31
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	1f 2f       	mov	r17, r31
     ade:	f0 2d       	mov	r31, r0

	long pos = (Angle2m/2.0/PI)*motorCpr + motorOffset - blockerOffset;
     ae0:	c8 01       	movw	r24, r16
     ae2:	b7 01       	movw	r22, r14
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	5f e3       	ldi	r21, 0x3F	; 63
     aec:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     af0:	2b ed       	ldi	r18, 0xDB	; 219
     af2:	3f e0       	ldi	r19, 0x0F	; 15
     af4:	49 e4       	ldi	r20, 0x49	; 73
     af6:	50 e4       	ldi	r21, 0x40	; 64
     af8:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__divsf3>
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	44 e0       	ldi	r20, 0x04	; 4
     b02:	58 e4       	ldi	r21, 0x48	; 72
     b04:	0e 94 88 20 	call	0x4110	; 0x4110 <__mulsf3>
     b08:	20 e8       	ldi	r18, 0x80	; 128
     b0a:	34 e3       	ldi	r19, 0x34	; 52
     b0c:	40 eb       	ldi	r20, 0xB0	; 176
     b0e:	57 e4       	ldi	r21, 0x47	; 71
     b10:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__addsf3>
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	38 ed       	ldi	r19, 0xD8	; 216
     b18:	4a ea       	ldi	r20, 0xAA	; 170
     b1a:	56 e4       	ldi	r21, 0x46	; 70
     b1c:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__subsf3>
     b20:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__fixsfsi>
     b24:	9b 01       	movw	r18, r22
     b26:	ac 01       	movw	r20, r24
	//char x[100];
	//sprintf(x,"Angle: %d, motor: %d\n\r",(int)(Angle2m*100),pos);	
	//sendString(x);


	if (pos < 1 || pos > motorCpr) pos = oldblocker;
     b28:	dc 01       	movw	r26, r24
     b2a:	cb 01       	movw	r24, r22
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	a1 09       	sbc	r26, r1
     b30:	b1 09       	sbc	r27, r1
     b32:	80 50       	subi	r24, 0x00	; 0
     b34:	90 41       	sbci	r25, 0x10	; 16
     b36:	a2 40       	sbci	r26, 0x02	; 2
     b38:	b0 40       	sbci	r27, 0x00	; 0
     b3a:	40 f0       	brcs	.+16     	; 0xb4c <getBlockerPos+0x57c>
     b3c:	23 2d       	mov	r18, r3
     b3e:	32 2d       	mov	r19, r2
     b40:	49 81       	ldd	r20, Y+1	; 0x01
     b42:	5a 81       	ldd	r21, Y+2	; 0x02
     b44:	c9 01       	movw	r24, r18
     b46:	da 01       	movw	r26, r20
     b48:	9c 01       	movw	r18, r24
     b4a:	ad 01       	movw	r20, r26

	return pos;


}
     b4c:	b9 01       	movw	r22, r18
     b4e:	ca 01       	movw	r24, r20
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	cf 91       	pop	r28
     b56:	df 91       	pop	r29
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	ff 90       	pop	r15
     b5e:	ef 90       	pop	r14
     b60:	df 90       	pop	r13
     b62:	cf 90       	pop	r12
     b64:	bf 90       	pop	r11
     b66:	af 90       	pop	r10
     b68:	9f 90       	pop	r9
     b6a:	8f 90       	pop	r8
     b6c:	7f 90       	pop	r7
     b6e:	6f 90       	pop	r6
     b70:	5f 90       	pop	r5
     b72:	4f 90       	pop	r4
     b74:	3f 90       	pop	r3
     b76:	2f 90       	pop	r2
     b78:	08 95       	ret

00000b7a <canBusInit>:
void canBusInit()
{

//--- I N I T
    // Clock prescaler Reset
    CLKPR = 0x80;  CLKPR = 0x00;
     b7a:	e1 e6       	ldi	r30, 0x61	; 97
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 e8       	ldi	r24, 0x80	; 128
     b80:	80 83       	st	Z, r24
     b82:	10 82       	st	Z, r1
    DDRA =0xFF;
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	81 b9       	out	0x01, r24	; 1

    //- Pull-up on TxCAN & RxCAN one by one to use bit-addressing
    CAN_PORT_DIR &= ~(1<<CAN_INPUT_PIN );
     b88:	56 98       	cbi	0x0a, 6	; 10
    CAN_PORT_DIR &= ~(1<<CAN_OUTPUT_PIN);
     b8a:	55 98       	cbi	0x0a, 5	; 10
    CAN_PORT_OUT |=  (1<<CAN_INPUT_PIN );
     b8c:	5e 9a       	sbi	0x0b, 6	; 11
    CAN_PORT_OUT |=  (1<<CAN_OUTPUT_PIN);
     b8e:	5d 9a       	sbi	0x0b, 5	; 11
        //- Wait until activity on RxCAN
    //while ((CAN_PORT_IN & (1<<CAN_INPUT_PIN)) != 0);
	//_delay_ms(100);
        //- Reset CAN peripheral
	
    Can_reset();
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	80 93 d8 00 	sts	0x00D8, r24
    //- Set CAN Bit-timming
    can_init(CAN_BAUDRATE);        // c.f. macro in "can_drv.h"
     b96:	88 ee       	ldi	r24, 0xE8	; 232
     b98:	0e 94 11 13 	call	0x2622	; 0x2622 <can_init>
    //- Set CAN Timer Prescaler
    CANTCON = CANBT1;                   // Why not !
     b9c:	80 91 e2 00 	lds	r24, 0x00E2
     ba0:	80 93 e5 00 	sts	0x00E5, r24


}
     ba4:	08 95       	ret

00000ba6 <printCAN>:
	setVal16(0x6040,0x00,0,&message);
	sendString("\r\n\n\nQuitting...");
	Reset_AVR();
}

void printCAN(st_cmd_t* message){
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	c8 5e       	subi	r28, 0xE8	; 232
     bc0:	d3 40       	sbci	r29, 0x03	; 3
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	8c 01       	movw	r16, r24
//printing:
	U8 indx;
	char x[1000];
	//char rxtx = "R";

    if (message->ctrl.ide) 
     bce:	dc 01       	movw	r26, r24
     bd0:	1b 96       	adiw	r26, 0x0b	; 11
     bd2:	8c 91       	ld	r24, X
     bd4:	7e 01       	movw	r14, r28
     bd6:	08 94       	sec
     bd8:	e1 1c       	adc	r14, r1
     bda:	f1 1c       	adc	r15, r1
     bdc:	88 23       	and	r24, r24
     bde:	e9 f1       	breq	.+122    	; 0xc5a <printCAN+0xb4>
    {
        //Uart_select(UART_0);
        sprintf(x,"--- TxCAN @ %02X: 0x%08lX(Ext.), L=%d, ", CANSTML, message->id.ext, message->dlc);
     be0:	20 91 f8 00 	lds	r18, 0x00F8
     be4:	ed b7       	in	r30, 0x3d	; 61
     be6:	fe b7       	in	r31, 0x3e	; 62
     be8:	3c 97       	sbiw	r30, 0x0c	; 12
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	fe bf       	out	0x3e, r31	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	ed bf       	out	0x3d, r30	; 61
     bf4:	31 96       	adiw	r30, 0x01	; 1
     bf6:	ad b7       	in	r26, 0x3d	; 61
     bf8:	be b7       	in	r27, 0x3e	; 62
     bfa:	12 96       	adiw	r26, 0x02	; 2
     bfc:	fc 92       	st	X, r15
     bfe:	ee 92       	st	-X, r14
     c00:	11 97       	sbiw	r26, 0x01	; 1
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	93 83       	std	Z+3, r25	; 0x03
     c08:	82 83       	std	Z+2, r24	; 0x02
     c0a:	24 83       	std	Z+4, r18	; 0x04
     c0c:	15 82       	std	Z+5, r1	; 0x05
     c0e:	d8 01       	movw	r26, r16
     c10:	12 96       	adiw	r26, 0x02	; 2
     c12:	2d 91       	ld	r18, X+
     c14:	3d 91       	ld	r19, X+
     c16:	4d 91       	ld	r20, X+
     c18:	5c 91       	ld	r21, X
     c1a:	15 97       	sbiw	r26, 0x05	; 5
     c1c:	26 83       	std	Z+6, r18	; 0x06
     c1e:	37 83       	std	Z+7, r19	; 0x07
     c20:	40 87       	std	Z+8, r20	; 0x08
     c22:	51 87       	std	Z+9, r21	; 0x09
     c24:	16 96       	adiw	r26, 0x06	; 6
     c26:	8c 91       	ld	r24, X
     c28:	82 87       	std	Z+10, r24	; 0x0a
     c2a:	13 86       	std	Z+11, r1	; 0x0b
     c2c:	0e 94 9c 1b 	call	0x3738	; 0x3738 <sprintf>
     c30:	f7 01       	movw	r30, r14
     c32:	8d b7       	in	r24, 0x3d	; 61
     c34:	9e b7       	in	r25, 0x3e	; 62
     c36:	0c 96       	adiw	r24, 0x0c	; 12
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	9e bf       	out	0x3e, r25	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	8d bf       	out	0x3d, r24	; 61
     c42:	07 c0       	rjmp	.+14     	; 0xc52 <printCAN+0xac>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
     c44:	80 91 c0 00 	lds	r24, 0x00C0
     c48:	85 ff       	sbrs	r24, 5
     c4a:	fc cf       	rjmp	.-8      	; 0xc44 <printCAN+0x9e>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
     c4c:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
     c4e:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
     c52:	90 81       	ld	r25, Z
     c54:	99 23       	and	r25, r25
     c56:	b1 f7       	brne	.-20     	; 0xc44 <printCAN+0x9e>
     c58:	3c c0       	rjmp	.+120    	; 0xcd2 <printCAN+0x12c>
		//sendString(x);
    }
    else
    {
        //Uart_select(UART_0);
        sprintf(x,"-0- RxCAN @ %02X%02X:      0x%03X(Std.), L=%d, ", CANSTMH, CANSTML, message->id.std, message->dlc);
     c5a:	20 91 f9 00 	lds	r18, 0x00F9
     c5e:	30 91 f8 00 	lds	r19, 0x00F8
     c62:	ad b7       	in	r26, 0x3d	; 61
     c64:	be b7       	in	r27, 0x3e	; 62
     c66:	1c 97       	sbiw	r26, 0x0c	; 12
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	be bf       	out	0x3e, r27	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	ad bf       	out	0x3d, r26	; 61
     c72:	ed b7       	in	r30, 0x3d	; 61
     c74:	fe b7       	in	r31, 0x3e	; 62
     c76:	31 96       	adiw	r30, 0x01	; 1
     c78:	12 96       	adiw	r26, 0x02	; 2
     c7a:	fc 92       	st	X, r15
     c7c:	ee 92       	st	-X, r14
     c7e:	11 97       	sbiw	r26, 0x01	; 1
     c80:	88 e2       	ldi	r24, 0x28	; 40
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	93 83       	std	Z+3, r25	; 0x03
     c86:	82 83       	std	Z+2, r24	; 0x02
     c88:	24 83       	std	Z+4, r18	; 0x04
     c8a:	15 82       	std	Z+5, r1	; 0x05
     c8c:	36 83       	std	Z+6, r19	; 0x06
     c8e:	17 82       	std	Z+7, r1	; 0x07
     c90:	d8 01       	movw	r26, r16
     c92:	12 96       	adiw	r26, 0x02	; 2
     c94:	8d 91       	ld	r24, X+
     c96:	9c 91       	ld	r25, X
     c98:	13 97       	sbiw	r26, 0x03	; 3
     c9a:	91 87       	std	Z+9, r25	; 0x09
     c9c:	80 87       	std	Z+8, r24	; 0x08
     c9e:	16 96       	adiw	r26, 0x06	; 6
     ca0:	8c 91       	ld	r24, X
     ca2:	82 87       	std	Z+10, r24	; 0x0a
     ca4:	13 86       	std	Z+11, r1	; 0x0b
     ca6:	0e 94 9c 1b 	call	0x3738	; 0x3738 <sprintf>
     caa:	f7 01       	movw	r30, r14
     cac:	8d b7       	in	r24, 0x3d	; 61
     cae:	9e b7       	in	r25, 0x3e	; 62
     cb0:	0c 96       	adiw	r24, 0x0c	; 12
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	9e bf       	out	0x3e, r25	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	8d bf       	out	0x3d, r24	; 61
     cbc:	07 c0       	rjmp	.+14     	; 0xccc <printCAN+0x126>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
     cbe:	80 91 c0 00 	lds	r24, 0x00C0
     cc2:	85 ff       	sbrs	r24, 5
     cc4:	fc cf       	rjmp	.-8      	; 0xcbe <printCAN+0x118>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
     cc6:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
     cc8:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
     ccc:	90 81       	ld	r25, Z
     cce:	99 23       	and	r25, r25
     cd0:	b1 f7       	brne	.-20     	; 0xcbe <printCAN+0x118>
		sendString(x);
        //Uart_select(UART_1);
        //printf(x,"-1- %cxCAN @ %02X%02X:      0x%03X(Std.), L=%d, ", rxtx, CANSTMH, CANSTML, message->id.std, message->dlc);
		//sendString(x);
    }
    if (message->ctrl.rtr)
     cd2:	d8 01       	movw	r26, r16
     cd4:	1a 96       	adiw	r26, 0x0a	; 10
     cd6:	8c 91       	ld	r24, X
     cd8:	88 23       	and	r24, r24
     cda:	51 f4       	brne	.+20     	; 0xcf0 <printCAN+0x14a>
     cdc:	ff 24       	eor	r15, r15
     cde:	6e 01       	movw	r12, r28
     ce0:	08 94       	sec
     ce2:	c1 1c       	adc	r12, r1
     ce4:	d1 1c       	adc	r13, r1
    else
    {
        for(indx=0; indx< (message->dlc-1); indx++)
        {
            //Uart_select(UART_0);
			sprintf(x,"%02X-", *(message->pt_data + indx)); 
     ce6:	b1 e6       	ldi	r27, 0x61	; 97
     ce8:	ab 2e       	mov	r10, r27
     cea:	b1 e0       	ldi	r27, 0x01	; 1
     cec:	bb 2e       	mov	r11, r27
     cee:	48 c0       	rjmp	.+144    	; 0xd80 <printCAN+0x1da>
		//sendString(x);
    }
    if (message->ctrl.rtr)
    {
        //Uart_select(UART_0);
		sprintf(x,"Remote\r\n");
     cf0:	8e 01       	movw	r16, r28
     cf2:	0f 5f       	subi	r16, 0xFF	; 255
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	c8 01       	movw	r24, r16
     cf8:	68 e5       	ldi	r22, 0x58	; 88
     cfa:	71 e0       	ldi	r23, 0x01	; 1
     cfc:	0e 94 95 1b 	call	0x372a	; 0x372a <strcpy>
     d00:	f8 01       	movw	r30, r16
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <printCAN+0x16c>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
     d04:	80 91 c0 00 	lds	r24, 0x00C0
     d08:	85 ff       	sbrs	r24, 5
     d0a:	fc cf       	rjmp	.-8      	; 0xd04 <printCAN+0x15e>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
     d0c:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
     d0e:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
     d12:	90 81       	ld	r25, Z
     d14:	99 23       	and	r25, r25
     d16:	b1 f7       	brne	.-20     	; 0xd04 <printCAN+0x15e>
     d18:	6f c0       	rjmp	.+222    	; 0xdf8 <printCAN+0x252>
    else
    {
        for(indx=0; indx< (message->dlc-1); indx++)
        {
            //Uart_select(UART_0);
			sprintf(x,"%02X-", *(message->pt_data + indx)); 
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <printCAN+0x176>
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <printCAN+0x178>
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <printCAN+0x17a>
     d20:	4d b7       	in	r20, 0x3d	; 61
     d22:	5e b7       	in	r21, 0x3e	; 62
     d24:	4f 5f       	subi	r20, 0xFF	; 255
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
     d28:	ed b7       	in	r30, 0x3d	; 61
     d2a:	fe b7       	in	r31, 0x3e	; 62
     d2c:	d2 82       	std	Z+2, r13	; 0x02
     d2e:	c1 82       	std	Z+1, r12	; 0x01
     d30:	da 01       	movw	r26, r20
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	bc 92       	st	X, r11
     d36:	ae 92       	st	-X, r10
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	f8 01       	movw	r30, r16
     d3c:	a7 81       	ldd	r26, Z+7	; 0x07
     d3e:	b0 85       	ldd	r27, Z+8	; 0x08
     d40:	a2 0f       	add	r26, r18
     d42:	b3 1f       	adc	r27, r19
     d44:	8c 91       	ld	r24, X
     d46:	da 01       	movw	r26, r20
     d48:	14 96       	adiw	r26, 0x04	; 4
     d4a:	8c 93       	st	X, r24
     d4c:	14 97       	sbiw	r26, 0x04	; 4
     d4e:	15 96       	adiw	r26, 0x05	; 5
     d50:	1c 92       	st	X, r1
     d52:	0e 94 9c 1b 	call	0x3738	; 0x3738 <sprintf>
     d56:	f6 01       	movw	r30, r12
     d58:	8d b7       	in	r24, 0x3d	; 61
     d5a:	9e b7       	in	r25, 0x3e	; 62
     d5c:	06 96       	adiw	r24, 0x06	; 6
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	9e bf       	out	0x3e, r25	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	8d bf       	out	0x3d, r24	; 61
     d68:	07 c0       	rjmp	.+14     	; 0xd78 <printCAN+0x1d2>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
     d6a:	80 91 c0 00 	lds	r24, 0x00C0
     d6e:	85 ff       	sbrs	r24, 5
     d70:	fc cf       	rjmp	.-8      	; 0xd6a <printCAN+0x1c4>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
     d72:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
     d74:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
     d78:	90 81       	ld	r25, Z
     d7a:	99 23       	and	r25, r25
     d7c:	b1 f7       	brne	.-20     	; 0xd6a <printCAN+0x1c4>
        //Uart_select(UART_1); printf(x,"Remote\r\n"); 
		//sendString(x);
    } 
    else
    {
        for(indx=0; indx< (message->dlc-1); indx++)
     d7e:	f3 94       	inc	r15
     d80:	2f 2d       	mov	r18, r15
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	d8 01       	movw	r26, r16
     d86:	16 96       	adiw	r26, 0x06	; 6
     d88:	8c 91       	ld	r24, X
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	28 17       	cp	r18, r24
     d90:	39 07       	cpc	r19, r25
     d92:	1c f2       	brlt	.-122    	; 0xd1a <printCAN+0x174>
			sendString(x);
            //Uart_select(UART_1); printf(x,"%02X-", *(message->pt_data + indx)); 
			//sendString(x);
        }
        //Uart_select(UART_0);
		sprintf(x,"%02X\r\n", *(message->pt_data + indx));
     d94:	00 d0       	rcall	.+0      	; 0xd96 <printCAN+0x1f0>
     d96:	00 d0       	rcall	.+0      	; 0xd98 <printCAN+0x1f2>
     d98:	00 d0       	rcall	.+0      	; 0xd9a <printCAN+0x1f4>
     d9a:	ad b7       	in	r26, 0x3d	; 61
     d9c:	be b7       	in	r27, 0x3e	; 62
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	ed b7       	in	r30, 0x3d	; 61
     da2:	fe b7       	in	r31, 0x3e	; 62
     da4:	d2 82       	std	Z+2, r13	; 0x02
     da6:	c1 82       	std	Z+1, r12	; 0x01
     da8:	87 e6       	ldi	r24, 0x67	; 103
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	13 96       	adiw	r26, 0x03	; 3
     dae:	9c 93       	st	X, r25
     db0:	8e 93       	st	-X, r24
     db2:	12 97       	sbiw	r26, 0x02	; 2
     db4:	f8 01       	movw	r30, r16
     db6:	87 81       	ldd	r24, Z+7	; 0x07
     db8:	90 85       	ldd	r25, Z+8	; 0x08
     dba:	82 0f       	add	r24, r18
     dbc:	93 1f       	adc	r25, r19
     dbe:	fc 01       	movw	r30, r24
     dc0:	80 81       	ld	r24, Z
     dc2:	14 96       	adiw	r26, 0x04	; 4
     dc4:	8c 93       	st	X, r24
     dc6:	14 97       	sbiw	r26, 0x04	; 4
     dc8:	15 96       	adiw	r26, 0x05	; 5
     dca:	1c 92       	st	X, r1
     dcc:	0e 94 9c 1b 	call	0x3738	; 0x3738 <sprintf>
     dd0:	f6 01       	movw	r30, r12
     dd2:	8d b7       	in	r24, 0x3d	; 61
     dd4:	9e b7       	in	r25, 0x3e	; 62
     dd6:	06 96       	adiw	r24, 0x06	; 6
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	9e bf       	out	0x3e, r25	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	8d bf       	out	0x3d, r24	; 61
     de2:	07 c0       	rjmp	.+14     	; 0xdf2 <printCAN+0x24c>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
     de4:	80 91 c0 00 	lds	r24, 0x00C0
     de8:	85 ff       	sbrs	r24, 5
     dea:	fc cf       	rjmp	.-8      	; 0xde4 <printCAN+0x23e>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
     dec:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
     dee:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
     df2:	90 81       	ld	r25, Z
     df4:	99 23       	and	r25, r25
     df6:	b1 f7       	brne	.-20     	; 0xde4 <printCAN+0x23e>
		sendString(x);                  
        //Uart_select(UART_1); printf(x,"%02X\r\n", *(message->pt_data + indx));
		//sendString(x);
    }   

}
     df8:	c8 51       	subi	r28, 0x18	; 24
     dfa:	dc 4f       	sbci	r29, 0xFC	; 252
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	df 90       	pop	r13
     e14:	cf 90       	pop	r12
     e16:	bf 90       	pop	r11
     e18:	af 90       	pop	r10
     e1a:	08 95       	ret

00000e1c <setVal16>:

}


void setVal16(U16 index, U8 subindex, U16 val, st_cmd_t* msg)
{
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	28 97       	sbiw	r28, 0x08	; 8
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	89 01       	movw	r16, r18
	//st_cmd_t msg;
	U8 buff[8];
	// --- Init Tx data


	buff[0] = 0x2B;
     e38:	2b e2       	ldi	r18, 0x2B	; 43
     e3a:	29 83       	std	Y+1, r18	; 0x01
	buff[1] = (unsigned char) (index);
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	buff[2] = (unsigned char) (index>>8);
     e3e:	9b 83       	std	Y+3, r25	; 0x03
	buff[3] = (unsigned char) (subindex);
     e40:	6c 83       	std	Y+4, r22	; 0x04
	buff[4] = (unsigned char) (val);
     e42:	4d 83       	std	Y+5, r20	; 0x05
	buff[5] = (unsigned char) (val>>8);
     e44:	5e 83       	std	Y+6, r21	; 0x06
	buff[6] = 0x00;
     e46:	1f 82       	std	Y+7, r1	; 0x07
	buff[7] = 0x00;
     e48:	18 86       	std	Y+8, r1	; 0x08
    
	msg->pt_data = &buff[0];
     e4a:	ce 01       	movw	r24, r28
     e4c:	01 96       	adiw	r24, 0x01	; 1
     e4e:	f8 01       	movw	r30, r16
     e50:	90 87       	std	Z+8, r25	; 0x08
     e52:	87 83       	std	Z+7, r24	; 0x07

    // --- Tx Command
    //message.id.ext++;   // Incrementation of ID to revome possible clashes
	U16 COB = (int)(0x601);

	msg->id.std = COB;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	96 e0       	ldi	r25, 0x06	; 6
     e58:	93 83       	std	Z+3, r25	; 0x03
     e5a:	82 83       	std	Z+2, r24	; 0x02
    msg->dlc = 8;
     e5c:	88 e0       	ldi	r24, 0x08	; 8
     e5e:	86 83       	std	Z+6, r24	; 0x06
    msg->cmd = CMD_TX;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	81 83       	std	Z+1, r24	; 0x01
    
	if (debug) sendString("\n\rSending:\n\r");
     e64:	80 91 a6 03 	lds	r24, 0x03A6
     e68:	90 91 a7 03 	lds	r25, 0x03A7
     e6c:	89 2b       	or	r24, r25
     e6e:	81 f0       	breq	.+32     	; 0xe90 <setVal16+0x74>
     e70:	ee e6       	ldi	r30, 0x6E	; 110
     e72:	f1 e0       	ldi	r31, 0x01	; 1
     e74:	07 c0       	rjmp	.+14     	; 0xe84 <setVal16+0x68>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
     e76:	80 91 c0 00 	lds	r24, 0x00C0
     e7a:	85 ff       	sbrs	r24, 5
     e7c:	fc cf       	rjmp	.-8      	; 0xe76 <setVal16+0x5a>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
     e7e:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
     e80:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
     e84:	90 81       	ld	r25, Z
     e86:	99 23       	and	r25, r25
     e88:	b1 f7       	brne	.-20     	; 0xe76 <setVal16+0x5a>
	msg->id.std = COB;
    msg->dlc = 8;
    msg->cmd = CMD_TX;
    
	if (debug) sendString("\n\rSending:\n\r");
	if (debug) printCAN(msg);
     e8a:	c8 01       	movw	r24, r16
     e8c:	0e 94 d3 05 	call	0xba6	; 0xba6 <printCAN>
    // --- Enable Tx
    while(can_cmd(msg) != CAN_CMD_ACCEPTED);
     e90:	c8 01       	movw	r24, r16
     e92:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <can_cmd>
     e96:	88 23       	and	r24, r24
     e98:	d9 f7       	brne	.-10     	; 0xe90 <setVal16+0x74>
    // --- Wait for Tx completed        
    while(1)
    {
        u8_temp = can_get_status(msg);
     e9a:	c8 01       	movw	r24, r16
     e9c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <can_get_status>
     ea0:	f8 2e       	mov	r15, r24
        if (can_get_status(msg) != CAN_STATUS_NOT_COMPLETED) break; // Out of while
     ea2:	c8 01       	movw	r24, r16
     ea4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <can_get_status>
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	b9 f3       	breq	.-18     	; 0xe9a <setVal16+0x7e>
    }

    // ---- Exit if CAN error(s)
    if (u8_temp == CAN_STATUS_ERROR) quit(); // Out of function
     eac:	f2 e0       	ldi	r31, 0x02	; 2
     eae:	ff 16       	cp	r15, r31
     eb0:	11 f4       	brne	.+4      	; 0xeb6 <setVal16+0x9a>
     eb2:	0e 94 b1 07 	call	0xf62	; 0xf62 <quit>

   //- CAN ECHO: WAIT FOR RECEIVED
    // --- Init Rx data
    msg->pt_data = &buff[0];
     eb6:	ce 01       	movw	r24, r28
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	f8 01       	movw	r30, r16
     ebc:	90 87       	std	Z+8, r25	; 0x08
     ebe:	87 83       	std	Z+7, r24	; 0x07
     ec0:	fc 01       	movw	r30, r24
    for(int i=0; i<8; i++) buff[i]=0;
     ec2:	ce 01       	movw	r24, r28
     ec4:	09 96       	adiw	r24, 0x09	; 9
     ec6:	11 92       	st	Z+, r1
     ec8:	e8 17       	cp	r30, r24
     eca:	f9 07       	cpc	r31, r25
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <setVal16+0xaa>

    // --- Rx Command
    msg->cmd = CMD_RX;
     ece:	84 e0       	ldi	r24, 0x04	; 4
     ed0:	f8 01       	movw	r30, r16
     ed2:	81 83       	std	Z+1, r24	; 0x01
    
    // --- Enable Rx
    while(can_cmd(msg) != CAN_CMD_ACCEPTED);
     ed4:	c8 01       	movw	r24, r16
     ed6:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <can_cmd>
     eda:	88 23       	and	r24, r24
     edc:	d9 f7       	brne	.-10     	; 0xed4 <setVal16+0xb8>
    // --- Wait for Rx completed
    while(1)
    {
        u8_temp = can_get_status(msg);
     ede:	c8 01       	movw	r24, r16
     ee0:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <can_get_status>
        if (u8_temp != CAN_STATUS_NOT_COMPLETED) break; // Out of while
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	d9 f3       	breq	.-10     	; 0xede <setVal16+0xc2>
    }
    if (u8_temp == CAN_STATUS_ERROR) quit(); // Out of the function
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	11 f4       	brne	.+4      	; 0xef0 <setVal16+0xd4>
     eec:	0e 94 b1 07 	call	0xf62	; 0xf62 <quit>

	if (debug) sendString("Received:\n\r");
     ef0:	80 91 a6 03 	lds	r24, 0x03A6
     ef4:	90 91 a7 03 	lds	r25, 0x03A7
     ef8:	89 2b       	or	r24, r25
     efa:	81 f0       	breq	.+32     	; 0xf1c <setVal16+0x100>
     efc:	eb e7       	ldi	r30, 0x7B	; 123
     efe:	f1 e0       	ldi	r31, 0x01	; 1
     f00:	07 c0       	rjmp	.+14     	; 0xf10 <setVal16+0xf4>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
     f02:	80 91 c0 00 	lds	r24, 0x00C0
     f06:	85 ff       	sbrs	r24, 5
     f08:	fc cf       	rjmp	.-8      	; 0xf02 <setVal16+0xe6>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
     f0a:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
     f0c:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
     f10:	90 81       	ld	r25, Z
     f12:	99 23       	and	r25, r25
     f14:	b1 f7       	brne	.-20     	; 0xf02 <setVal16+0xe6>
        if (u8_temp != CAN_STATUS_NOT_COMPLETED) break; // Out of while
    }
    if (u8_temp == CAN_STATUS_ERROR) quit(); // Out of the function

	if (debug) sendString("Received:\n\r");
    if (debug) printCAN(msg);
     f16:	c8 01       	movw	r24, r16
     f18:	0e 94 d3 05 	call	0xba6	; 0xba6 <printCAN>

}
     f1c:	28 96       	adiw	r28, 0x08	; 8
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	08 95       	ret

00000f34 <faultReset>:
    if (debug) printCAN(message);

}

void faultReset(st_cmd_t* message)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <faultReset+0x6>
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01
	*/
	//setVal16(0x6040,0x00,271,&message);

	int val = (int)0x080;

	setVal16(0x6040,0x00,val,&message);
     f42:	80 e4       	ldi	r24, 0x40	; 64
     f44:	90 e6       	ldi	r25, 0x60	; 96
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	40 e8       	ldi	r20, 0x80	; 128
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	9e 01       	movw	r18, r28
     f50:	2f 5f       	subi	r18, 0xFF	; 255
     f52:	3f 4f       	sbci	r19, 0xFF	; 255
     f54:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>
}
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <quit>:

void quit()
{

	//Disengage Motor:
	setVal16(0x6040,0x00,0x000F,&message);
     f62:	80 e4       	ldi	r24, 0x40	; 64
     f64:	90 e6       	ldi	r25, 0x60	; 96
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	4f e0       	ldi	r20, 0x0F	; 15
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	28 ec       	ldi	r18, 0xC8	; 200
     f70:	33 e0       	ldi	r19, 0x03	; 3
     f72:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>

	setVal16(0x6040,0x00,0,&message);
     f76:	80 e4       	ldi	r24, 0x40	; 64
     f78:	90 e6       	ldi	r25, 0x60	; 96
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	28 ec       	ldi	r18, 0xC8	; 200
     f84:	33 e0       	ldi	r19, 0x03	; 3
     f86:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>
     f8a:	e7 e8       	ldi	r30, 0x87	; 135
     f8c:	f1 e0       	ldi	r31, 0x01	; 1
     f8e:	07 c0       	rjmp	.+14     	; 0xf9e <quit+0x3c>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
     f90:	80 91 c0 00 	lds	r24, 0x00C0
     f94:	85 ff       	sbrs	r24, 5
     f96:	fc cf       	rjmp	.-8      	; 0xf90 <quit+0x2e>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
     f98:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
     f9a:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
     f9e:	90 81       	ld	r25, Z
     fa0:	99 23       	and	r25, r25
     fa2:	b1 f7       	brne	.-20     	; 0xf90 <quit+0x2e>
	//Disengage Motor:
	setVal16(0x6040,0x00,0x000F,&message);

	setVal16(0x6040,0x00,0,&message);
	sendString("\r\n\n\nQuitting...");
	Reset_AVR();
     fa4:	29 e0       	ldi	r18, 0x09	; 9
     fa6:	88 e1       	ldi	r24, 0x18	; 24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	a8 95       	wdr
     fb0:	80 93 60 00 	sts	0x0060, r24
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	20 93 60 00 	sts	0x0060, r18
     fba:	ff cf       	rjmp	.-2      	; 0xfba <quit+0x58>

00000fbc <checkFault>:
    if (debug) printCAN(msg);

}

int checkFault(st_cmd_t* msg)
{
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	2a 97       	sbiw	r28, 0x0a	; 10
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	8c 01       	movw	r16, r24
	U8 buff[8];
	// --- Init Tx data

	U16 index = 0x6041;

	buff[0] = 0x40;
     fd8:	80 e4       	ldi	r24, 0x40	; 64
     fda:	8b 83       	std	Y+3, r24	; 0x03
	buff[1] = (unsigned char) (index);
     fdc:	81 e4       	ldi	r24, 0x41	; 65
     fde:	8c 83       	std	Y+4, r24	; 0x04
	buff[2] = (unsigned char) (index>>8);
     fe0:	80 e6       	ldi	r24, 0x60	; 96
     fe2:	8d 83       	std	Y+5, r24	; 0x05
	buff[3] = 0;
     fe4:	1e 82       	std	Y+6, r1	; 0x06
	buff[4] = 0;//(unsigned char) (val);
     fe6:	1f 82       	std	Y+7, r1	; 0x07
	buff[5] = 0;//(unsigned char) (val>>8);
     fe8:	18 86       	std	Y+8, r1	; 0x08
	buff[6] = 0;//(unsigned char) (val>>16);
     fea:	19 86       	std	Y+9, r1	; 0x09
	buff[7] = 0;//(unsigned char) (val>>24);
     fec:	1a 86       	std	Y+10, r1	; 0x0a
    
	msg->pt_data = &buff[0];
     fee:	ce 01       	movw	r24, r28
     ff0:	03 96       	adiw	r24, 0x03	; 3
     ff2:	d8 01       	movw	r26, r16
     ff4:	18 96       	adiw	r26, 0x08	; 8
     ff6:	9c 93       	st	X, r25
     ff8:	8e 93       	st	-X, r24
     ffa:	17 97       	sbiw	r26, 0x07	; 7

    // --- Tx Command
    //message.id.ext++;   // Incrementation of ID to revome possible clashes
	U16 COB = (int)(0x601);

	msg->id.std = COB;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	96 e0       	ldi	r25, 0x06	; 6
    1000:	13 96       	adiw	r26, 0x03	; 3
    1002:	9c 93       	st	X, r25
    1004:	8e 93       	st	-X, r24
    1006:	12 97       	sbiw	r26, 0x02	; 2
    msg->dlc = 8;
    1008:	88 e0       	ldi	r24, 0x08	; 8
    100a:	16 96       	adiw	r26, 0x06	; 6
    100c:	8c 93       	st	X, r24
    100e:	16 97       	sbiw	r26, 0x06	; 6
    msg->cmd = CMD_TX;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	11 96       	adiw	r26, 0x01	; 1
    1014:	8c 93       	st	X, r24
    
	if (debug) sendString("\n\rSending:\n\r");
    1016:	80 91 a6 03 	lds	r24, 0x03A6
    101a:	90 91 a7 03 	lds	r25, 0x03A7
    101e:	89 2b       	or	r24, r25
    1020:	81 f0       	breq	.+32     	; 0x1042 <checkFault+0x86>
    1022:	ee e6       	ldi	r30, 0x6E	; 110
    1024:	f1 e0       	ldi	r31, 0x01	; 1
    1026:	07 c0       	rjmp	.+14     	; 0x1036 <checkFault+0x7a>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
    1028:	80 91 c0 00 	lds	r24, 0x00C0
    102c:	85 ff       	sbrs	r24, 5
    102e:	fc cf       	rjmp	.-8      	; 0x1028 <checkFault+0x6c>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
    1030:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
    1032:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
    1036:	90 81       	ld	r25, Z
    1038:	99 23       	and	r25, r25
    103a:	b1 f7       	brne	.-20     	; 0x1028 <checkFault+0x6c>
	msg->id.std = COB;
    msg->dlc = 8;
    msg->cmd = CMD_TX;
    
	if (debug) sendString("\n\rSending:\n\r");
	if (debug) printCAN(msg);
    103c:	c8 01       	movw	r24, r16
    103e:	0e 94 d3 05 	call	0xba6	; 0xba6 <printCAN>
    // --- Enable Tx
    while(can_cmd(msg) != CAN_CMD_ACCEPTED);
    1042:	c8 01       	movw	r24, r16
    1044:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <can_cmd>
    1048:	88 23       	and	r24, r24
    104a:	d9 f7       	brne	.-10     	; 0x1042 <checkFault+0x86>
    // --- Wait for Tx completed        
    while(1)
    {
        u8_temp = can_get_status(msg);
    104c:	c8 01       	movw	r24, r16
    104e:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <can_get_status>
    1052:	f8 2e       	mov	r15, r24
        if (can_get_status(msg) != CAN_STATUS_NOT_COMPLETED) break; // Out of while
    1054:	c8 01       	movw	r24, r16
    1056:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <can_get_status>
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	b9 f3       	breq	.-18     	; 0x104c <checkFault+0x90>
    }

    // ---- Exit if CAN error(s)
    if (u8_temp == CAN_STATUS_ERROR) quit(); // Out of function
    105e:	b2 e0       	ldi	r27, 0x02	; 2
    1060:	fb 16       	cp	r15, r27
    1062:	11 f4       	brne	.+4      	; 0x1068 <checkFault+0xac>
    1064:	0e 94 b1 07 	call	0xf62	; 0xf62 <quit>

   //- CAN ECHO: WAIT FOR RECEIVED
    // --- Init Rx data
    msg->pt_data = &buff[0];
    1068:	ce 01       	movw	r24, r28
    106a:	03 96       	adiw	r24, 0x03	; 3
    106c:	f8 01       	movw	r30, r16
    106e:	90 87       	std	Z+8, r25	; 0x08
    1070:	87 83       	std	Z+7, r24	; 0x07
    1072:	fc 01       	movw	r30, r24
    for(int i=0; i<8; i++) buff[i]=0;
    1074:	ce 01       	movw	r24, r28
    1076:	0b 96       	adiw	r24, 0x0b	; 11
    1078:	11 92       	st	Z+, r1
    107a:	e8 17       	cp	r30, r24
    107c:	f9 07       	cpc	r31, r25
    107e:	e1 f7       	brne	.-8      	; 0x1078 <checkFault+0xbc>

    // --- Rx Command
    msg->cmd = CMD_RX;
    1080:	84 e0       	ldi	r24, 0x04	; 4
    1082:	d8 01       	movw	r26, r16
    1084:	11 96       	adiw	r26, 0x01	; 1
    1086:	8c 93       	st	X, r24
    
    // --- Enable Rx
    while(can_cmd(msg) != CAN_CMD_ACCEPTED);
    1088:	c8 01       	movw	r24, r16
    108a:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <can_cmd>
    108e:	88 23       	and	r24, r24
    1090:	d9 f7       	brne	.-10     	; 0x1088 <checkFault+0xcc>
    // --- Wait for Rx completed
    while(1)
    {
        u8_temp = can_get_status(msg);
    1092:	c8 01       	movw	r24, r16
    1094:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <can_get_status>
        if (u8_temp != CAN_STATUS_NOT_COMPLETED) break; // Out of while
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	d9 f3       	breq	.-10     	; 0x1092 <checkFault+0xd6>
    }
    if (u8_temp == CAN_STATUS_ERROR) quit(); // Out of the function
    109c:	82 30       	cpi	r24, 0x02	; 2
    109e:	11 f4       	brne	.+4      	; 0x10a4 <checkFault+0xe8>
    10a0:	0e 94 b1 07 	call	0xf62	; 0xf62 <quit>

	if (debug) sendString("Received:\n\r");
    10a4:	80 91 a6 03 	lds	r24, 0x03A6
    10a8:	90 91 a7 03 	lds	r25, 0x03A7
    10ac:	89 2b       	or	r24, r25
    10ae:	81 f0       	breq	.+32     	; 0x10d0 <checkFault+0x114>
    10b0:	eb e7       	ldi	r30, 0x7B	; 123
    10b2:	f1 e0       	ldi	r31, 0x01	; 1
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <checkFault+0x108>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
    10b6:	80 91 c0 00 	lds	r24, 0x00C0
    10ba:	85 ff       	sbrs	r24, 5
    10bc:	fc cf       	rjmp	.-8      	; 0x10b6 <checkFault+0xfa>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
    10be:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
    10c0:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
    10c4:	90 81       	ld	r25, Z
    10c6:	99 23       	and	r25, r25
    10c8:	b1 f7       	brne	.-20     	; 0x10b6 <checkFault+0xfa>
        if (u8_temp != CAN_STATUS_NOT_COMPLETED) break; // Out of while
    }
    if (u8_temp == CAN_STATUS_ERROR) quit(); // Out of the function

	if (debug) sendString("Received:\n\r");
    if (debug) printCAN(msg);
    10ca:	c8 01       	movw	r24, r16
    10cc:	0e 94 d3 05 	call	0xba6	; 0xba6 <printCAN>

	int faultByte = msg->pt_data[4];
    10d0:	d8 01       	movw	r26, r16
    10d2:	17 96       	adiw	r26, 0x07	; 7
    10d4:	ed 91       	ld	r30, X+
    10d6:	fc 91       	ld	r31, X
    10d8:	18 97       	sbiw	r26, 0x08	; 8
    10da:	84 81       	ldd	r24, Z+4	; 0x04
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	1a 82       	std	Y+2, r1	; 0x02
	int fault = 0;

	if(bit_is_set(faultByte,3)) fault = 1;
    10e0:	29 81       	ldd	r18, Y+1	; 0x01
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	13 e0       	ldi	r17, 0x03	; 3
    10e6:	36 95       	lsr	r19
    10e8:	27 95       	ror	r18
    10ea:	1a 95       	dec	r17
    10ec:	e1 f7       	brne	.-8      	; 0x10e6 <checkFault+0x12a>
    10ee:	21 70       	andi	r18, 0x01	; 1
    10f0:	30 70       	andi	r19, 0x00	; 0
	//sendString(x);
	

	return fault;

}
    10f2:	c9 01       	movw	r24, r18
    10f4:	2a 96       	adiw	r28, 0x0a	; 10
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	08 95       	ret

0000110c <selectShape>:


}

void selectShape()
{
    110c:	8f 92       	push	r8
    110e:	9f 92       	push	r9
    1110:	af 92       	push	r10
    1112:	bf 92       	push	r11
    1114:	cf 92       	push	r12
    1116:	df 92       	push	r13
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29

	//Disengage Motor:
	//setVal16(0x6040,0x00,0x000F,&message);
	setVal16(0x6040,0x00,0x0000,&message);
    1124:	80 e4       	ldi	r24, 0x40	; 64
    1126:	90 e6       	ldi	r25, 0x60	; 96
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	28 ec       	ldi	r18, 0xC8	; 200
    1130:	33 e0       	ldi	r19, 0x03	; 3
    1132:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>

	if (checkFault(&message)) faultState();
    1136:	88 ec       	ldi	r24, 0xC8	; 200
    1138:	93 e0       	ldi	r25, 0x03	; 3
    113a:	0e 94 de 07 	call	0xfbc	; 0xfbc <checkFault>
    113e:	89 2b       	or	r24, r25
    1140:	11 f0       	breq	.+4      	; 0x1146 <selectShape+0x3a>
    1142:	0e 94 7f 09 	call	0x12fe	; 0x12fe <faultState>

//	int startTime = TCNT1
	TCNT1 = 0;
    1146:	10 92 85 00 	sts	0x0085, r1
    114a:	10 92 84 00 	sts	0x0084, r1
    114e:	01 e0       	ldi	r16, 0x01	; 1
    1150:	10 e0       	ldi	r17, 0x00	; 0

		if (bit_is_set(PINC,0)==0)
		{
			sendString("A\n");
			if (dimension ==2) shape = 1;
			else shape = 6;
    1152:	36 e0       	ldi	r19, 0x06	; 6
    1154:	83 2e       	mov	r8, r19
    1156:	91 2c       	mov	r9, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1158:	20 e9       	ldi	r18, 0x90	; 144
    115a:	e2 2e       	mov	r14, r18
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	f2 2e       	mov	r15, r18
		}

		if (bit_is_set(PINC,3)==0)
		{
			sendString("B\n");
			shape = 3;
    1160:	93 e0       	ldi	r25, 0x03	; 3
    1162:	a9 2e       	mov	r10, r25
    1164:	b1 2c       	mov	r11, r1
		}

		if (bit_is_set(PINC,2)==0)
		{
			sendString("C\n");
			shape = 4;
    1166:	84 e0       	ldi	r24, 0x04	; 4
    1168:	c8 2e       	mov	r12, r24
    116a:	d1 2c       	mov	r13, r1
	int LEDnum = 1;

	int selected = 0;
	while(selected == 0)
	{
		if (TCNT1>2000 && selected == 0) {
    116c:	80 91 84 00 	lds	r24, 0x0084
    1170:	90 91 85 00 	lds	r25, 0x0085
    1174:	81 5d       	subi	r24, 0xD1	; 209
    1176:	97 40       	sbci	r25, 0x07	; 7
    1178:	d0 f0       	brcs	.+52     	; 0x11ae <selectShape+0xa2>
			TCNT1 = 0;
    117a:	10 92 85 00 	sts	0x0085, r1
    117e:	10 92 84 00 	sts	0x0084, r1
//																//
//**************************************************************//

void LED1(int p)
{
	if (p==0) { BCLR(PORTA,7); }
    1182:	17 98       	cbi	0x02, 7	; 2
	else { BSET(PORTA,7); }
}

void LED2(int p)
{
	if (p==0) { BCLR(PORTA,6); }
    1184:	16 98       	cbi	0x02, 6	; 2
	else { BSET(PORTA,6); }
}

void LED3(int p)
{
	if (p==0) { BCLR(PORTA,5); }
    1186:	15 98       	cbi	0x02, 5	; 2
			TCNT1 = 0;

			LED1(0);
			LED2(0);
			LED3(0);
			if (LEDnum==1) LED1(1);
    1188:	01 30       	cpi	r16, 0x01	; 1
    118a:	11 05       	cpc	r17, r1
    118c:	11 f4       	brne	.+4      	; 0x1192 <selectShape+0x86>
//**************************************************************//

void LED1(int p)
{
	if (p==0) { BCLR(PORTA,7); }
	else { BSET(PORTA,7); }
    118e:	17 9a       	sbi	0x02, 7	; 2
    1190:	0c c0       	rjmp	.+24     	; 0x11aa <selectShape+0x9e>

			LED1(0);
			LED2(0);
			LED3(0);
			if (LEDnum==1) LED1(1);
			else if (LEDnum==2) LED2(1);
    1192:	02 30       	cpi	r16, 0x02	; 2
    1194:	11 05       	cpc	r17, r1
    1196:	11 f4       	brne	.+4      	; 0x119c <selectShape+0x90>
}

void LED2(int p)
{
	if (p==0) { BCLR(PORTA,6); }
	else { BSET(PORTA,6); }
    1198:	16 9a       	sbi	0x02, 6	; 2
    119a:	07 c0       	rjmp	.+14     	; 0x11aa <selectShape+0x9e>
			LED1(0);
			LED2(0);
			LED3(0);
			if (LEDnum==1) LED1(1);
			else if (LEDnum==2) LED2(1);
			else if (LEDnum==3) LED3(1);
    119c:	03 30       	cpi	r16, 0x03	; 3
    119e:	11 05       	cpc	r17, r1
    11a0:	19 f0       	breq	.+6      	; 0x11a8 <selectShape+0x9c>
    11a2:	01 e0       	ldi	r16, 0x01	; 1
    11a4:	10 e0       	ldi	r17, 0x00	; 0
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <selectShape+0xa2>
}

void LED3(int p)
{
	if (p==0) { BCLR(PORTA,5); }
	else { BSET(PORTA,5); }
    11a8:	15 9a       	sbi	0x02, 5	; 2
			if (LEDnum==1) LED1(1);
			else if (LEDnum==2) LED2(1);
			else if (LEDnum==3) LED3(1);
			
			if (LEDnum>3) LEDnum=1;
			else LEDnum++;
    11aa:	0f 5f       	subi	r16, 0xFF	; 255
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255

		}

		if (bit_is_set(PINC,0)==0)
    11ae:	30 9b       	sbis	0x06, 0	; 6
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <selectShape+0xac>
    11b2:	c0 e0       	ldi	r28, 0x00	; 0
    11b4:	d0 e0       	ldi	r29, 0x00	; 0
    11b6:	1c c0       	rjmp	.+56     	; 0x11f0 <selectShape+0xe4>
    11b8:	e7 e9       	ldi	r30, 0x97	; 151
    11ba:	f1 e0       	ldi	r31, 0x01	; 1
    11bc:	07 c0       	rjmp	.+14     	; 0x11cc <selectShape+0xc0>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
    11be:	80 91 c0 00 	lds	r24, 0x00C0
    11c2:	85 ff       	sbrs	r24, 5
    11c4:	fc cf       	rjmp	.-8      	; 0x11be <selectShape+0xb2>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
    11c6:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
    11c8:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
    11cc:	90 81       	ld	r25, Z
    11ce:	99 23       	and	r25, r25
    11d0:	b1 f7       	brne	.-20     	; 0x11be <selectShape+0xb2>

		if (bit_is_set(PINC,0)==0)
		{
			sendString("A\n");
			if (dimension ==2) shape = 1;
			else shape = 6;
    11d2:	90 92 cc 01 	sts	0x01CC, r9
    11d6:	80 92 cb 01 	sts	0x01CB, r8
			PORTA = 0x00;
    11da:	12 b8       	out	0x02, r1	; 2
    11dc:	88 ee       	ldi	r24, 0xE8	; 232
    11de:	93 e0       	ldi	r25, 0x03	; 3
    11e0:	f7 01       	movw	r30, r14
    11e2:	31 97       	sbiw	r30, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <selectShape+0xd6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e8:	d9 f7       	brne	.-10     	; 0x11e0 <selectShape+0xd4>
//**************************************************************//

void LED1(int p)
{
	if (p==0) { BCLR(PORTA,7); }
	else { BSET(PORTA,7); }
    11ea:	17 9a       	sbi	0x02, 7	; 2
    11ec:	c1 e0       	ldi	r28, 0x01	; 1
    11ee:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(100);
			LED1(1);
			selected = 1;
		}

		if (bit_is_set(PINC,3)==0)
    11f0:	33 99       	sbic	0x06, 3	; 6
    11f2:	1c c0       	rjmp	.+56     	; 0x122c <selectShape+0x120>
    11f4:	ea e9       	ldi	r30, 0x9A	; 154
    11f6:	f1 e0       	ldi	r31, 0x01	; 1
    11f8:	07 c0       	rjmp	.+14     	; 0x1208 <selectShape+0xfc>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
    11fa:	80 91 c0 00 	lds	r24, 0x00C0
    11fe:	85 ff       	sbrs	r24, 5
    1200:	fc cf       	rjmp	.-8      	; 0x11fa <selectShape+0xee>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
    1202:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
    1204:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
    1208:	90 81       	ld	r25, Z
    120a:	99 23       	and	r25, r25
    120c:	b1 f7       	brne	.-20     	; 0x11fa <selectShape+0xee>
		}

		if (bit_is_set(PINC,3)==0)
		{
			sendString("B\n");
			shape = 3;
    120e:	b0 92 cc 01 	sts	0x01CC, r11
    1212:	a0 92 cb 01 	sts	0x01CB, r10
			PORTA = 0x00;
    1216:	12 b8       	out	0x02, r1	; 2
    1218:	88 ee       	ldi	r24, 0xE8	; 232
    121a:	93 e0       	ldi	r25, 0x03	; 3
    121c:	f7 01       	movw	r30, r14
    121e:	31 97       	sbiw	r30, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <selectShape+0x112>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1222:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1224:	d9 f7       	brne	.-10     	; 0x121c <selectShape+0x110>
}

void LED2(int p)
{
	if (p==0) { BCLR(PORTA,6); }
	else { BSET(PORTA,6); }
    1226:	16 9a       	sbi	0x02, 6	; 2
    1228:	c1 e0       	ldi	r28, 0x01	; 1
    122a:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(100);
			LED2(1);
			selected = 1;
		}

		if (bit_is_set(PINC,2)==0)
    122c:	32 99       	sbic	0x06, 2	; 6
    122e:	1c c0       	rjmp	.+56     	; 0x1268 <selectShape+0x15c>
    1230:	ed e9       	ldi	r30, 0x9D	; 157
    1232:	f1 e0       	ldi	r31, 0x01	; 1
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <selectShape+0x138>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
    1236:	80 91 c0 00 	lds	r24, 0x00C0
    123a:	85 ff       	sbrs	r24, 5
    123c:	fc cf       	rjmp	.-8      	; 0x1236 <selectShape+0x12a>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
    123e:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
    1240:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
    1244:	90 81       	ld	r25, Z
    1246:	99 23       	and	r25, r25
    1248:	b1 f7       	brne	.-20     	; 0x1236 <selectShape+0x12a>
		}

		if (bit_is_set(PINC,2)==0)
		{
			sendString("C\n");
			shape = 4;
    124a:	d0 92 cc 01 	sts	0x01CC, r13
    124e:	c0 92 cb 01 	sts	0x01CB, r12
			//if (dimension == 2) shape = 4;
			//else shape = 5;
			PORTA = 0x00;
    1252:	12 b8       	out	0x02, r1	; 2
    1254:	88 ee       	ldi	r24, 0xE8	; 232
    1256:	93 e0       	ldi	r25, 0x03	; 3
    1258:	f7 01       	movw	r30, r14
    125a:	31 97       	sbiw	r30, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <selectShape+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1260:	d9 f7       	brne	.-10     	; 0x1258 <selectShape+0x14c>
}

void LED3(int p)
{
	if (p==0) { BCLR(PORTA,5); }
	else { BSET(PORTA,5); }
    1262:	15 9a       	sbi	0x02, 5	; 2
    1264:	c1 e0       	ldi	r28, 0x01	; 1
    1266:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else {
			//BCLR(PINA,5);
		}

		if (bit_is_set(PINC,1)) quit();
    1268:	31 9b       	sbis	0x06, 1	; 6
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <selectShape+0x164>
    126c:	0e 94 b1 07 	call	0xf62	; 0xf62 <quit>
	TCNT1 = 0;
	int LEDon = 0;
	int LEDnum = 1;

	int selected = 0;
	while(selected == 0)
    1270:	cd 2b       	or	r28, r29
    1272:	09 f4       	brne	.+2      	; 0x1276 <selectShape+0x16a>
    1274:	7b cf       	rjmp	.-266    	; 0x116c <selectShape+0x60>

		if (bit_is_set(PINC,1)) quit();
//		if (bit_is_set(PINC,5)==0) sendString("START!");
	}

	blocker = getBlockerPos();
    1276:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <getBlockerPos>
    127a:	60 93 ae 03 	sts	0x03AE, r22
    127e:	70 93 af 03 	sts	0x03AF, r23
    1282:	80 93 b0 03 	sts	0x03B0, r24
    1286:	90 93 b1 03 	sts	0x03B1, r25

	//Clear Faults
	setVal16(0x6040,0x00,0x0080,&message);
    128a:	80 e4       	ldi	r24, 0x40	; 64
    128c:	90 e6       	ldi	r25, 0x60	; 96
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	28 ec       	ldi	r18, 0xC8	; 200
    1296:	33 e0       	ldi	r19, 0x03	; 3
    1298:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>
    129c:	88 e8       	ldi	r24, 0x88	; 136
    129e:	93 e1       	ldi	r25, 0x13	; 19
    12a0:	20 e9       	ldi	r18, 0x90	; 144
    12a2:	31 e0       	ldi	r19, 0x01	; 1
    12a4:	f9 01       	movw	r30, r18
    12a6:	31 97       	sbiw	r30, 0x01	; 1
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <selectShape+0x19a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ac:	d9 f7       	brne	.-10     	; 0x12a4 <selectShape+0x198>
	_delay_ms(500);

	//Engage Motor
	setVal16(0x6040,0x00,0x0006,&message);
    12ae:	80 e4       	ldi	r24, 0x40	; 64
    12b0:	90 e6       	ldi	r25, 0x60	; 96
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	46 e0       	ldi	r20, 0x06	; 6
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	28 ec       	ldi	r18, 0xC8	; 200
    12ba:	33 e0       	ldi	r19, 0x03	; 3
    12bc:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>
    12c0:	88 e8       	ldi	r24, 0x88	; 136
    12c2:	93 e1       	ldi	r25, 0x13	; 19
    12c4:	20 e9       	ldi	r18, 0x90	; 144
    12c6:	31 e0       	ldi	r19, 0x01	; 1
    12c8:	f9 01       	movw	r30, r18
    12ca:	31 97       	sbiw	r30, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <selectShape+0x1be>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d0:	d9 f7       	brne	.-10     	; 0x12c8 <selectShape+0x1bc>
	_delay_ms(500);

	//Enable Following:
	setVal16(0x6040,0x00,271,&message);
    12d2:	80 e4       	ldi	r24, 0x40	; 64
    12d4:	90 e6       	ldi	r25, 0x60	; 96
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	4f e0       	ldi	r20, 0x0F	; 15
    12da:	51 e0       	ldi	r21, 0x01	; 1
    12dc:	28 ec       	ldi	r18, 0xC8	; 200
    12de:	33 e0       	ldi	r19, 0x03	; 3
    12e0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>

}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	df 90       	pop	r13
    12f2:	cf 90       	pop	r12
    12f4:	bf 90       	pop	r11
    12f6:	af 90       	pop	r10
    12f8:	9f 90       	pop	r9
    12fa:	8f 90       	pop	r8
    12fc:	08 95       	ret

000012fe <faultState>:
	PINA = 0x00;
}


void faultState()
{
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
	LED1(0);
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 ca 02 	call	0x594	; 0x594 <LED1>
	LED2(0);
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED2>
	LED3(0);
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LED3>
    131a:	c0 e9       	ldi	r28, 0x90	; 144
    131c:	d1 e0       	ldi	r29, 0x01	; 1
    131e:	2a c0       	rjmp	.+84     	; 0x1374 <faultState+0x76>
	while (bit_is_set(PINC,5))
    1320:	88 ee       	ldi	r24, 0xE8	; 232
    1322:	93 e0       	ldi	r25, 0x03	; 3
    1324:	fe 01       	movw	r30, r28
    1326:	31 97       	sbiw	r30, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <faultState+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132c:	d9 f7       	brne	.-10     	; 0x1324 <faultState+0x26>
	{
		_delay_ms(100);
		LED1(1);
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 ca 02 	call	0x594	; 0x594 <LED1>
		LED2(1);
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED2>
		LED3(1);
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LED3>
    1346:	88 ee       	ldi	r24, 0xE8	; 232
    1348:	93 e0       	ldi	r25, 0x03	; 3
    134a:	fe 01       	movw	r30, r28
    134c:	31 97       	sbiw	r30, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <faultState+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1350:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1352:	d9 f7       	brne	.-10     	; 0x134a <faultState+0x4c>
		_delay_ms(100);
		LED1(0);
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 ca 02 	call	0x594	; 0x594 <LED1>
		LED2(0);
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED2>
		LED3(0);
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LED3>
		if (bit_is_set(PINC,1)) quit();
    136c:	31 9b       	sbis	0x06, 1	; 6
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <faultState+0x76>
    1370:	0e 94 b1 07 	call	0xf62	; 0xf62 <quit>
void faultState()
{
	LED1(0);
	LED2(0);
	LED3(0);
	while (bit_is_set(PINC,5))
    1374:	35 99       	sbic	0x06, 5	; 6
    1376:	d4 cf       	rjmp	.-88     	; 0x1320 <faultState+0x22>
		LED1(0);
		LED2(0);
		LED3(0);
		if (bit_is_set(PINC,1)) quit();
	}
	LED1(0);
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 ca 02 	call	0x594	; 0x594 <LED1>

	//Fault Reset
	//faultReset(&message);
	setVal16(0x6040,0x00,0x0080,&message);
    1380:	80 e4       	ldi	r24, 0x40	; 64
    1382:	90 e6       	ldi	r25, 0x60	; 96
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	40 e8       	ldi	r20, 0x80	; 128
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	28 ec       	ldi	r18, 0xC8	; 200
    138c:	33 e0       	ldi	r19, 0x03	; 3
    138e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>
    1392:	88 e8       	ldi	r24, 0x88	; 136
    1394:	93 e1       	ldi	r25, 0x13	; 19
    1396:	20 e9       	ldi	r18, 0x90	; 144
    1398:	31 e0       	ldi	r19, 0x01	; 1
    139a:	f9 01       	movw	r30, r18
    139c:	31 97       	sbiw	r30, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <faultState+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a2:	d9 f7       	brne	.-10     	; 0x139a <faultState+0x9c>
	_delay_ms(500);
	selectShape();
    13a4:	0e 94 86 08 	call	0x110c	; 0x110c <selectShape>

}
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <setVal32>:
    if (debug) printCAN(msg);

}

void setVal32(U16 index, U8 subindex, U32 val, st_cmd_t* msg)
{
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	28 97       	sbiw	r28, 0x08	; 8
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
	//st_cmd_t msg;
	U8 buff[8];
	// --- Init Tx data


	buff[0] = 0x23;
    13c8:	73 e2       	ldi	r23, 0x23	; 35
    13ca:	79 83       	std	Y+1, r23	; 0x01
	buff[1] = (unsigned char) (index);
    13cc:	8a 83       	std	Y+2, r24	; 0x02
	buff[2] = (unsigned char) (index>>8);
    13ce:	9b 83       	std	Y+3, r25	; 0x03
	buff[3] = (unsigned char) (subindex);
    13d0:	6c 83       	std	Y+4, r22	; 0x04
	buff[4] = (unsigned char) (val);
    13d2:	2d 83       	std	Y+5, r18	; 0x05
	buff[5] = (unsigned char) (val>>8);
    13d4:	bb 27       	eor	r27, r27
    13d6:	a5 2f       	mov	r26, r21
    13d8:	94 2f       	mov	r25, r20
    13da:	83 2f       	mov	r24, r19
    13dc:	8e 83       	std	Y+6, r24	; 0x06
	buff[6] = (unsigned char) (val>>16);
    13de:	ca 01       	movw	r24, r20
    13e0:	aa 27       	eor	r26, r26
    13e2:	bb 27       	eor	r27, r27
    13e4:	8f 83       	std	Y+7, r24	; 0x07
	buff[7] = (unsigned char) (val>>24);
    13e6:	25 2f       	mov	r18, r21
    13e8:	33 27       	eor	r19, r19
    13ea:	44 27       	eor	r20, r20
    13ec:	55 27       	eor	r21, r21
    13ee:	28 87       	std	Y+8, r18	; 0x08
    
	msg->pt_data = &buff[0];
    13f0:	ce 01       	movw	r24, r28
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	f8 01       	movw	r30, r16
    13f6:	90 87       	std	Z+8, r25	; 0x08
    13f8:	87 83       	std	Z+7, r24	; 0x07

    // --- Tx Command
    //message.id.ext++;   // Incrementation of ID to revome possible clashes
	U16 COB = (int)(0x601);

	msg->id.std = COB;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	96 e0       	ldi	r25, 0x06	; 6
    13fe:	93 83       	std	Z+3, r25	; 0x03
    1400:	82 83       	std	Z+2, r24	; 0x02
    msg->dlc = 8;
    1402:	88 e0       	ldi	r24, 0x08	; 8
    1404:	86 83       	std	Z+6, r24	; 0x06
    msg->cmd = CMD_TX;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	81 83       	std	Z+1, r24	; 0x01
    
	if (debug) sendString("\n\rSending:\n\r");
    140a:	80 91 a6 03 	lds	r24, 0x03A6
    140e:	90 91 a7 03 	lds	r25, 0x03A7
    1412:	89 2b       	or	r24, r25
    1414:	81 f0       	breq	.+32     	; 0x1436 <setVal32+0x88>
    1416:	ee e6       	ldi	r30, 0x6E	; 110
    1418:	f1 e0       	ldi	r31, 0x01	; 1
    141a:	07 c0       	rjmp	.+14     	; 0x142a <setVal32+0x7c>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
    141c:	80 91 c0 00 	lds	r24, 0x00C0
    1420:	85 ff       	sbrs	r24, 5
    1422:	fc cf       	rjmp	.-8      	; 0x141c <setVal32+0x6e>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
    1424:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
    1426:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
    142a:	90 81       	ld	r25, Z
    142c:	99 23       	and	r25, r25
    142e:	b1 f7       	brne	.-20     	; 0x141c <setVal32+0x6e>
	msg->id.std = COB;
    msg->dlc = 8;
    msg->cmd = CMD_TX;
    
	if (debug) sendString("\n\rSending:\n\r");
	if (debug) printCAN(msg);
    1430:	c8 01       	movw	r24, r16
    1432:	0e 94 d3 05 	call	0xba6	; 0xba6 <printCAN>
    // --- Enable Tx
    while(can_cmd(msg) != CAN_CMD_ACCEPTED);
    1436:	c8 01       	movw	r24, r16
    1438:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <can_cmd>
    143c:	88 23       	and	r24, r24
    143e:	d9 f7       	brne	.-10     	; 0x1436 <setVal32+0x88>
    // --- Wait for Tx completed        
    while(1)
    {
        u8_temp = can_get_status(msg);
    1440:	c8 01       	movw	r24, r16
    1442:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <can_get_status>
    1446:	f8 2e       	mov	r15, r24
        if (can_get_status(msg) != CAN_STATUS_NOT_COMPLETED) break; // Out of while
    1448:	c8 01       	movw	r24, r16
    144a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <can_get_status>
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	b9 f3       	breq	.-18     	; 0x1440 <setVal32+0x92>
    }

    // ---- Exit if CAN error(s)
    if (u8_temp == CAN_STATUS_ERROR) quit(); // Out of function
    1452:	f2 e0       	ldi	r31, 0x02	; 2
    1454:	ff 16       	cp	r15, r31
    1456:	11 f4       	brne	.+4      	; 0x145c <setVal32+0xae>
    1458:	0e 94 b1 07 	call	0xf62	; 0xf62 <quit>

   //- CAN ECHO: WAIT FOR RECEIVED
    // --- Init Rx data
    msg->pt_data = &buff[0];
    145c:	ce 01       	movw	r24, r28
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	f8 01       	movw	r30, r16
    1462:	90 87       	std	Z+8, r25	; 0x08
    1464:	87 83       	std	Z+7, r24	; 0x07
    1466:	fc 01       	movw	r30, r24
    for(int i=0; i<8; i++) buff[i]=0;
    1468:	ce 01       	movw	r24, r28
    146a:	09 96       	adiw	r24, 0x09	; 9
    146c:	11 92       	st	Z+, r1
    146e:	e8 17       	cp	r30, r24
    1470:	f9 07       	cpc	r31, r25
    1472:	e1 f7       	brne	.-8      	; 0x146c <setVal32+0xbe>

    // --- Rx Command
    msg->cmd = CMD_RX;
    1474:	84 e0       	ldi	r24, 0x04	; 4
    1476:	f8 01       	movw	r30, r16
    1478:	81 83       	std	Z+1, r24	; 0x01
    
    // --- Enable Rx
    while(can_cmd(msg) != CAN_CMD_ACCEPTED);
    147a:	c8 01       	movw	r24, r16
    147c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <can_cmd>
    1480:	88 23       	and	r24, r24
    1482:	d9 f7       	brne	.-10     	; 0x147a <setVal32+0xcc>
    // --- Wait for Rx completed
    while(1)
    {
        u8_temp = can_get_status(msg);
    1484:	c8 01       	movw	r24, r16
    1486:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <can_get_status>
        if (u8_temp != CAN_STATUS_NOT_COMPLETED) break; // Out of while
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	d9 f3       	breq	.-10     	; 0x1484 <setVal32+0xd6>
    }
    if (u8_temp == CAN_STATUS_ERROR) quit(); // Out of the function
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	11 f4       	brne	.+4      	; 0x1496 <setVal32+0xe8>
    1492:	0e 94 b1 07 	call	0xf62	; 0xf62 <quit>

	if (debug) sendString("Received:\n\r");
    1496:	80 91 a6 03 	lds	r24, 0x03A6
    149a:	90 91 a7 03 	lds	r25, 0x03A7
    149e:	89 2b       	or	r24, r25
    14a0:	81 f0       	breq	.+32     	; 0x14c2 <setVal32+0x114>
    14a2:	eb e7       	ldi	r30, 0x7B	; 123
    14a4:	f1 e0       	ldi	r31, 0x01	; 1
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <setVal32+0x108>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
    14a8:	80 91 c0 00 	lds	r24, 0x00C0
    14ac:	85 ff       	sbrs	r24, 5
    14ae:	fc cf       	rjmp	.-8      	; 0x14a8 <setVal32+0xfa>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
    14b0:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
    14b2:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
    14b6:	90 81       	ld	r25, Z
    14b8:	99 23       	and	r25, r25
    14ba:	b1 f7       	brne	.-20     	; 0x14a8 <setVal32+0xfa>
        if (u8_temp != CAN_STATUS_NOT_COMPLETED) break; // Out of while
    }
    if (u8_temp == CAN_STATUS_ERROR) quit(); // Out of the function

	if (debug) sendString("Received:\n\r");
    if (debug) printCAN(msg);
    14bc:	c8 01       	movw	r24, r16
    14be:	0e 94 d3 05 	call	0xba6	; 0xba6 <printCAN>

}
    14c2:	28 96       	adiw	r28, 0x08	; 8
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	ff 90       	pop	r15
    14d8:	08 95       	ret

000014da <setVal8>:

	setVal16(0x6040,0x00,val,&message);
}

void setVal8(U16 index, U8 subindex, U8 val, st_cmd_t* msg)
{
    14da:	ff 92       	push	r15
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	28 97       	sbiw	r28, 0x08	; 8
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	89 01       	movw	r16, r18
	//st_cmd_t msg;
	U8 buff[8];
	// --- Init Tx data


	buff[0] = 0x2F;
    14f6:	2f e2       	ldi	r18, 0x2F	; 47
    14f8:	29 83       	std	Y+1, r18	; 0x01
	buff[1] = (unsigned char) (index);
    14fa:	8a 83       	std	Y+2, r24	; 0x02
	buff[2] = (unsigned char) (index>>8);
    14fc:	9b 83       	std	Y+3, r25	; 0x03
	buff[3] = (unsigned char) (subindex);
    14fe:	6c 83       	std	Y+4, r22	; 0x04
	buff[4] = val;
    1500:	4d 83       	std	Y+5, r20	; 0x05
	buff[5] = 0x00;
    1502:	1e 82       	std	Y+6, r1	; 0x06
	buff[6] = 0x00;
    1504:	1f 82       	std	Y+7, r1	; 0x07
	buff[7] = 0x00;
    1506:	18 86       	std	Y+8, r1	; 0x08
    
	msg->pt_data = &buff[0];
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	f8 01       	movw	r30, r16
    150e:	90 87       	std	Z+8, r25	; 0x08
    1510:	87 83       	std	Z+7, r24	; 0x07

    // --- Tx Command
    //message.id.ext++;   // Incrementation of ID to revome possible clashes
	U16 COB = (int)(0x601);

	msg->id.std = COB;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	96 e0       	ldi	r25, 0x06	; 6
    1516:	93 83       	std	Z+3, r25	; 0x03
    1518:	82 83       	std	Z+2, r24	; 0x02
    msg->dlc = 8;
    151a:	88 e0       	ldi	r24, 0x08	; 8
    151c:	86 83       	std	Z+6, r24	; 0x06
    msg->cmd = CMD_TX;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	81 83       	std	Z+1, r24	; 0x01
    
	if (debug) sendString("\n\rSending:\n\r");
    1522:	80 91 a6 03 	lds	r24, 0x03A6
    1526:	90 91 a7 03 	lds	r25, 0x03A7
    152a:	89 2b       	or	r24, r25
    152c:	81 f0       	breq	.+32     	; 0x154e <setVal8+0x74>
    152e:	ee e6       	ldi	r30, 0x6E	; 110
    1530:	f1 e0       	ldi	r31, 0x01	; 1
    1532:	07 c0       	rjmp	.+14     	; 0x1542 <setVal8+0x68>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
    1534:	80 91 c0 00 	lds	r24, 0x00C0
    1538:	85 ff       	sbrs	r24, 5
    153a:	fc cf       	rjmp	.-8      	; 0x1534 <setVal8+0x5a>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
    153c:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
    153e:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
    1542:	90 81       	ld	r25, Z
    1544:	99 23       	and	r25, r25
    1546:	b1 f7       	brne	.-20     	; 0x1534 <setVal8+0x5a>
	msg->id.std = COB;
    msg->dlc = 8;
    msg->cmd = CMD_TX;
    
	if (debug) sendString("\n\rSending:\n\r");
	if (debug) printCAN(msg);
    1548:	c8 01       	movw	r24, r16
    154a:	0e 94 d3 05 	call	0xba6	; 0xba6 <printCAN>
    // --- Enable Tx
    while(can_cmd(msg) != CAN_CMD_ACCEPTED);
    154e:	c8 01       	movw	r24, r16
    1550:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <can_cmd>
    1554:	88 23       	and	r24, r24
    1556:	d9 f7       	brne	.-10     	; 0x154e <setVal8+0x74>
    // --- Wait for Tx completed        
    while(1)
    {
        u8_temp = can_get_status(msg);
    1558:	c8 01       	movw	r24, r16
    155a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <can_get_status>
    155e:	f8 2e       	mov	r15, r24
        if (can_get_status(msg) != CAN_STATUS_NOT_COMPLETED) break; // Out of while
    1560:	c8 01       	movw	r24, r16
    1562:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <can_get_status>
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	b9 f3       	breq	.-18     	; 0x1558 <setVal8+0x7e>
    }

    // ---- Exit if CAN error(s)
    if (u8_temp == CAN_STATUS_ERROR) quit(); // Out of function
    156a:	f2 e0       	ldi	r31, 0x02	; 2
    156c:	ff 16       	cp	r15, r31
    156e:	11 f4       	brne	.+4      	; 0x1574 <setVal8+0x9a>
    1570:	0e 94 b1 07 	call	0xf62	; 0xf62 <quit>

   //- CAN ECHO: WAIT FOR RECEIVED
    // --- Init Rx data
    msg->pt_data = &buff[0];
    1574:	ce 01       	movw	r24, r28
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	f8 01       	movw	r30, r16
    157a:	90 87       	std	Z+8, r25	; 0x08
    157c:	87 83       	std	Z+7, r24	; 0x07
    157e:	fc 01       	movw	r30, r24
    for(int i=0; i<8; i++) buff[i]=0;
    1580:	ce 01       	movw	r24, r28
    1582:	09 96       	adiw	r24, 0x09	; 9
    1584:	11 92       	st	Z+, r1
    1586:	e8 17       	cp	r30, r24
    1588:	f9 07       	cpc	r31, r25
    158a:	e1 f7       	brne	.-8      	; 0x1584 <setVal8+0xaa>

    // --- Rx Command
    msg->cmd = CMD_RX;
    158c:	84 e0       	ldi	r24, 0x04	; 4
    158e:	f8 01       	movw	r30, r16
    1590:	81 83       	std	Z+1, r24	; 0x01
    
    // --- Enable Rx
    while(can_cmd(msg) != CAN_CMD_ACCEPTED);
    1592:	c8 01       	movw	r24, r16
    1594:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <can_cmd>
    1598:	88 23       	and	r24, r24
    159a:	d9 f7       	brne	.-10     	; 0x1592 <setVal8+0xb8>
    // --- Wait for Rx completed
    while(1)
    {
        u8_temp = can_get_status(msg);
    159c:	c8 01       	movw	r24, r16
    159e:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <can_get_status>
        if (u8_temp != CAN_STATUS_NOT_COMPLETED) break; // Out of while
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	d9 f3       	breq	.-10     	; 0x159c <setVal8+0xc2>
    }
    if (u8_temp == CAN_STATUS_ERROR) quit(); // Out of the function
    15a6:	82 30       	cpi	r24, 0x02	; 2
    15a8:	11 f4       	brne	.+4      	; 0x15ae <setVal8+0xd4>
    15aa:	0e 94 b1 07 	call	0xf62	; 0xf62 <quit>

	if (debug) sendString("Received:\n\r");
    15ae:	80 91 a6 03 	lds	r24, 0x03A6
    15b2:	90 91 a7 03 	lds	r25, 0x03A7
    15b6:	89 2b       	or	r24, r25
    15b8:	81 f0       	breq	.+32     	; 0x15da <setVal8+0x100>
    15ba:	eb e7       	ldi	r30, 0x7B	; 123
    15bc:	f1 e0       	ldi	r31, 0x01	; 1
    15be:	07 c0       	rjmp	.+14     	; 0x15ce <setVal8+0xf4>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
    15c0:	80 91 c0 00 	lds	r24, 0x00C0
    15c4:	85 ff       	sbrs	r24, 5
    15c6:	fc cf       	rjmp	.-8      	; 0x15c0 <setVal8+0xe6>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
    15c8:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
    15ca:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
    15ce:	90 81       	ld	r25, Z
    15d0:	99 23       	and	r25, r25
    15d2:	b1 f7       	brne	.-20     	; 0x15c0 <setVal8+0xe6>
        if (u8_temp != CAN_STATUS_NOT_COMPLETED) break; // Out of while
    }
    if (u8_temp == CAN_STATUS_ERROR) quit(); // Out of the function

	if (debug) sendString("Received:\n\r");
    if (debug) printCAN(msg);
    15d4:	c8 01       	movw	r24, r16
    15d6:	0e 94 d3 05 	call	0xba6	; 0xba6 <printCAN>

}
    15da:	28 96       	adiw	r28, 0x08	; 8
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	08 95       	ret

000015f2 <setOpMode>:
    }   

}

void setOpMode(st_cmd_t* message)
{
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	28 97       	sbiw	r28, 0x08	; 8
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	8c 01       	movw	r16, r24
// --- ENTER OPERATIONAL MODE

	U8 u8_temp;
	U8 buffer[8];
	//st_cmd_t message;
	buffer[0] = 0x01;
    160c:	21 e0       	ldi	r18, 0x01	; 1
    160e:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = 0x00;
    1610:	1a 82       	std	Y+2, r1	; 0x02
	buffer[2] = 0x00;
    1612:	1b 82       	std	Y+3, r1	; 0x03
	buffer[3] = 0x00;
    1614:	1c 82       	std	Y+4, r1	; 0x04
	buffer[4] = 0x00;
    1616:	1d 82       	std	Y+5, r1	; 0x05
	buffer[5] = 0x00;
    1618:	1e 82       	std	Y+6, r1	; 0x06
	buffer[6] = 0x00;
    161a:	1f 82       	std	Y+7, r1	; 0x07
	buffer[7] = 0x00;
    161c:	18 86       	std	Y+8, r1	; 0x08
            
	message->pt_data = &buffer[0];
    161e:	ce 01       	movw	r24, r28
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	f8 01       	movw	r30, r16
    1624:	90 87       	std	Z+8, r25	; 0x08
    1626:	87 83       	std	Z+7, r24	; 0x07

    // --- Tx Command
	message->id.std = (int)0;
    1628:	13 82       	std	Z+3, r1	; 0x03
    162a:	12 82       	std	Z+2, r1	; 0x02
    message->dlc = 1;
    162c:	26 83       	std	Z+6, r18	; 0x06
    message->cmd = CMD_TX;
    162e:	21 83       	std	Z+1, r18	; 0x01
            
    // --- Enable Tx
    while(can_cmd(message) != CAN_CMD_ACCEPTED);
    1630:	c8 01       	movw	r24, r16
    1632:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <can_cmd>
    1636:	88 23       	and	r24, r24
    1638:	d9 f7       	brne	.-10     	; 0x1630 <setOpMode+0x3e>
    // --- Wait for Tx completed        
    while(1)
    {
         u8_temp = can_get_status(message);
    163a:	c8 01       	movw	r24, r16
    163c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <can_get_status>
         if (u8_temp != CAN_STATUS_NOT_COMPLETED) break; // Out of while
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	d9 f3       	breq	.-10     	; 0x163a <setOpMode+0x48>
    }
    //- CAN ECHO: PRINT-UART OF CAN FRAME TRANSMITTED
	if (debug) sendString("\n\n\rInitializing CANbus:\n\r");
    1644:	80 91 a6 03 	lds	r24, 0x03A6
    1648:	90 91 a7 03 	lds	r25, 0x03A7
    164c:	89 2b       	or	r24, r25
    164e:	81 f0       	breq	.+32     	; 0x1670 <setOpMode+0x7e>
    1650:	e0 ea       	ldi	r30, 0xA0	; 160
    1652:	f1 e0       	ldi	r31, 0x01	; 1
    1654:	07 c0       	rjmp	.+14     	; 0x1664 <setOpMode+0x72>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
    1656:	80 91 c0 00 	lds	r24, 0x00C0
    165a:	85 ff       	sbrs	r24, 5
    165c:	fc cf       	rjmp	.-8      	; 0x1656 <setOpMode+0x64>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
    165e:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
    1660:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
    1664:	90 81       	ld	r25, Z
    1666:	99 23       	and	r25, r25
    1668:	b1 f7       	brne	.-20     	; 0x1656 <setOpMode+0x64>
         u8_temp = can_get_status(message);
         if (u8_temp != CAN_STATUS_NOT_COMPLETED) break; // Out of while
    }
    //- CAN ECHO: PRINT-UART OF CAN FRAME TRANSMITTED
	if (debug) sendString("\n\n\rInitializing CANbus:\n\r");
    if (debug) printCAN(message);
    166a:	c8 01       	movw	r24, r16
    166c:	0e 94 d3 05 	call	0xba6	; 0xba6 <printCAN>

}
    1670:	28 96       	adiw	r28, 0x08	; 8
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	08 95       	ret

00001686 <main>:
//  MAIN FUNCTION												//
//																//
//**************************************************************//

int main(void)
{
    1686:	af 92       	push	r10
    1688:	bf 92       	push	r11
    168a:	cf 92       	push	r12
    168c:	df 92       	push	r13
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	28 97       	sbiw	r28, 0x08	; 8
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61

	//UART_Init(38400);
	UART_Init(57600);
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	71 ee       	ldi	r23, 0xE1	; 225
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_Init>
	//UART_Init(115200); //doesn't work =(
	interruptInit();
    16b4:	0e 94 c2 00 	call	0x184	; 0x184 <interruptInit>
	canBusInit();
    16b8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <canBusInit>
    16bc:	88 e8       	ldi	r24, 0x88	; 136
    16be:	93 e1       	ldi	r25, 0x13	; 19
    16c0:	20 e9       	ldi	r18, 0x90	; 144
    16c2:	31 e0       	ldi	r19, 0x01	; 1
    16c4:	f9 01       	movw	r30, r18
    16c6:	31 97       	sbiw	r30, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16cc:	d9 f7       	brne	.-10     	; 0x16c4 <main+0x3e>
//	while (bit_is_set(PINC,5))
//	{
//		if (bit_is_set(PINC,1)) quit();
//	}

	encA = 0;
    16ce:	10 92 a9 03 	sts	0x03A9, r1
    16d2:	10 92 a8 03 	sts	0x03A8, r1
	encB = 0;
    16d6:	10 92 ab 03 	sts	0x03AB, r1
    16da:	10 92 aa 03 	sts	0x03AA, r1
	encC = 0;
    16de:	10 92 ad 03 	sts	0x03AD, r1
    16e2:	10 92 ac 03 	sts	0x03AC, r1

	
	//if (debug) sendString("\n\rInit\n\r");

	//Setup timer with 1024 prescaler: (64us per tick)101
	BSET(TCCR1B,CS12);
    16e6:	80 91 81 00 	lds	r24, 0x0081
    16ea:	84 60       	ori	r24, 0x04	; 4
    16ec:	80 93 81 00 	sts	0x0081, r24
	BCLR(TCCR1B,CS11);
    16f0:	80 91 81 00 	lds	r24, 0x0081
    16f4:	8d 7f       	andi	r24, 0xFD	; 253
    16f6:	80 93 81 00 	sts	0x0081, r24
	BSET(TCCR1B,CS10);
    16fa:	80 91 81 00 	lds	r24, 0x0081
    16fe:	81 60       	ori	r24, 0x01	; 1
    1700:	80 93 81 00 	sts	0x0081, r24

//	CAN Stuff
	//Set EPOS to Operational Mode
	setOpMode(&message);
    1704:	88 ec       	ldi	r24, 0xC8	; 200
    1706:	93 e0       	ldi	r25, 0x03	; 3
    1708:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <setOpMode>
	//Turn on:
	setVal16(0x6040,0x00,3,&message);
    170c:	80 e4       	ldi	r24, 0x40	; 64
    170e:	90 e6       	ldi	r25, 0x60	; 96
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	43 e0       	ldi	r20, 0x03	; 3
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	28 ec       	ldi	r18, 0xC8	; 200
    1718:	33 e0       	ldi	r19, 0x03	; 3
    171a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>

	//Set to Profile Position Mode
	setVal8(0x6060,0x00,Mode, &message);
    171e:	80 e6       	ldi	r24, 0x60	; 96
    1720:	90 e6       	ldi	r25, 0x60	; 96
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	4f ef       	ldi	r20, 0xFF	; 255
    1726:	28 ec       	ldi	r18, 0xC8	; 200
    1728:	33 e0       	ldi	r19, 0x03	; 3
    172a:	0e 94 6d 0a 	call	0x14da	; 0x14da <setVal8>
	//Initialize Constants:
		//Position Regulator P-Gain:
		setVal16(0x60FB,0x01,position_Pgain,&message);
    172e:	8b ef       	ldi	r24, 0xFB	; 251
    1730:	90 e6       	ldi	r25, 0x60	; 96
    1732:	61 e0       	ldi	r22, 0x01	; 1
    1734:	44 e6       	ldi	r20, 0x64	; 100
    1736:	50 e0       	ldi	r21, 0x00	; 0
    1738:	28 ec       	ldi	r18, 0xC8	; 200
    173a:	33 e0       	ldi	r19, 0x03	; 3
    173c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>
		//Position Regulator I-Gain:
		setVal16(0x60FB,0x02,position_Igain,&message);
    1740:	8b ef       	ldi	r24, 0xFB	; 251
    1742:	90 e6       	ldi	r25, 0x60	; 96
    1744:	62 e0       	ldi	r22, 0x02	; 2
    1746:	4a e0       	ldi	r20, 0x0A	; 10
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	28 ec       	ldi	r18, 0xC8	; 200
    174c:	33 e0       	ldi	r19, 0x03	; 3
    174e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>
//**************************************************************//

void LED1(int p)
{
	if (p==0) { BCLR(PORTA,7); }
	else { BSET(PORTA,7); }
    1752:	17 9a       	sbi	0x02, 7	; 2

	LED1(1);
	//sendString("1...");

		//Position Regulator D-Gain:
		setVal16(0x60FB,0x03,position_Dgain,&message);
    1754:	8b ef       	ldi	r24, 0xFB	; 251
    1756:	90 e6       	ldi	r25, 0x60	; 96
    1758:	63 e0       	ldi	r22, 0x03	; 3
    175a:	48 ec       	ldi	r20, 0xC8	; 200
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	28 ec       	ldi	r18, 0xC8	; 200
    1760:	33 e0       	ldi	r19, 0x03	; 3
    1762:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>
		//Continuous Current Limit:
		setVal16(0x6410,0x01,continuousCurrentLimit,&message);
    1766:	80 e1       	ldi	r24, 0x10	; 16
    1768:	94 e6       	ldi	r25, 0x64	; 100
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	48 ee       	ldi	r20, 0xE8	; 232
    176e:	53 e0       	ldi	r21, 0x03	; 3
    1770:	28 ec       	ldi	r18, 0xC8	; 200
    1772:	33 e0       	ldi	r19, 0x03	; 3
    1774:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>
		//Output Current Limit:
		setVal16(0x6410,0x02,outputCurrentLimit,&message);
    1778:	80 e1       	ldi	r24, 0x10	; 16
    177a:	94 e6       	ldi	r25, 0x64	; 100
    177c:	62 e0       	ldi	r22, 0x02	; 2
    177e:	44 ef       	ldi	r20, 0xF4	; 244
    1780:	51 e0       	ldi	r21, 0x01	; 1
    1782:	28 ec       	ldi	r18, 0xC8	; 200
    1784:	33 e0       	ldi	r19, 0x03	; 3
    1786:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>
		//Min Position Limit:
		setVal32(0x607D,0x01,minPositionLimit,&message);
    178a:	8d e7       	ldi	r24, 0x7D	; 125
    178c:	90 e6       	ldi	r25, 0x60	; 96
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	20 e8       	ldi	r18, 0x80	; 128
    1792:	38 e3       	ldi	r19, 0x38	; 56
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	08 ec       	ldi	r16, 0xC8	; 200
    179a:	13 e0       	ldi	r17, 0x03	; 3
    179c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <setVal32>
		//Max Position Limit:
		setVal32(0x607D,0x02,maxPositionLimit,&message);
    17a0:	8d e7       	ldi	r24, 0x7D	; 125
    17a2:	90 e6       	ldi	r25, 0x60	; 96
    17a4:	62 e0       	ldi	r22, 0x02	; 2
    17a6:	20 e2       	ldi	r18, 0x20	; 32
    17a8:	3f eb       	ldi	r19, 0xBF	; 191
    17aa:	42 e0       	ldi	r20, 0x02	; 2
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	0e 94 d7 09 	call	0x13ae	; 0x13ae <setVal32>
}

void LED2(int p)
{
	if (p==0) { BCLR(PORTA,6); }
	else { BSET(PORTA,6); }
    17b2:	16 9a       	sbi	0x02, 6	; 2
    17b4:	88 e8       	ldi	r24, 0x88	; 136
    17b6:	93 e1       	ldi	r25, 0x13	; 19
    17b8:	20 e9       	ldi	r18, 0x90	; 144
    17ba:	31 e0       	ldi	r19, 0x01	; 1
    17bc:	f9 01       	movw	r30, r18
    17be:	31 97       	sbiw	r30, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <main+0x138>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c4:	d9 f7       	brne	.-10     	; 0x17bc <main+0x136>
	_delay_ms(500);
	//sendString("2...");


		//Max Profile Velocity:
		setVal32(0x607F,0x00,maxProfileVelocity,&message);
    17c6:	8f e7       	ldi	r24, 0x7F	; 127
    17c8:	90 e6       	ldi	r25, 0x60	; 96
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	28 ea       	ldi	r18, 0xA8	; 168
    17ce:	31 e6       	ldi	r19, 0x61	; 97
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	50 e0       	ldi	r21, 0x00	; 0
    17d4:	08 ec       	ldi	r16, 0xC8	; 200
    17d6:	13 e0       	ldi	r17, 0x03	; 3
    17d8:	0e 94 d7 09 	call	0x13ae	; 0x13ae <setVal32>
		//Profile Velocity:
		setVal32(0x6081,0x00,profileVelocity,&message);
    17dc:	81 e8       	ldi	r24, 0x81	; 129
    17de:	90 e6       	ldi	r25, 0x60	; 96
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	28 e8       	ldi	r18, 0x88	; 136
    17e4:	33 e1       	ldi	r19, 0x13	; 19
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	0e 94 d7 09 	call	0x13ae	; 0x13ae <setVal32>
		//Profile Acceleration:
		setVal32(0x6083,0x00,profileAcceleration,&message);
    17ee:	83 e8       	ldi	r24, 0x83	; 131
    17f0:	90 e6       	ldi	r25, 0x60	; 96
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	20 e4       	ldi	r18, 0x40	; 64
    17f6:	3d e0       	ldi	r19, 0x0D	; 13
    17f8:	43 e0       	ldi	r20, 0x03	; 3
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	0e 94 d7 09 	call	0x13ae	; 0x13ae <setVal32>
		//Profile Deceleration:
		setVal32(0x6084,0x00,profileDeceleration,&message);
    1800:	84 e8       	ldi	r24, 0x84	; 132
    1802:	90 e6       	ldi	r25, 0x60	; 96
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	20 e4       	ldi	r18, 0x40	; 64
    1808:	3d e0       	ldi	r19, 0x0D	; 13
    180a:	43 e0       	ldi	r20, 0x03	; 3
    180c:	50 e0       	ldi	r21, 0x00	; 0
    180e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <setVal32>
		//Maximum Following Error:
		setVal32(0x6065,0x00,maxFollowingError,&message);
    1812:	85 e6       	ldi	r24, 0x65	; 101
    1814:	90 e6       	ldi	r25, 0x60	; 96
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	20 e4       	ldi	r18, 0x40	; 64
    181a:	3d e0       	ldi	r19, 0x0D	; 13
    181c:	43 e0       	ldi	r20, 0x03	; 3
    181e:	50 e0       	ldi	r21, 0x00	; 0
    1820:	0e 94 d7 09 	call	0x13ae	; 0x13ae <setVal32>
		//Profile Type:
		//setVal16(0x6086,0x00,profileType,&message);

		//Position Demand Value:
		if (Mode == -1) posAddress = 0x2062;
    1824:	82 e6       	ldi	r24, 0x62	; 98
    1826:	90 e2       	ldi	r25, 0x20	; 32
    1828:	a0 e0       	ldi	r26, 0x00	; 0
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	80 93 b2 03 	sts	0x03B2, r24
    1830:	90 93 b3 03 	sts	0x03B3, r25
    1834:	a0 93 b4 03 	sts	0x03B4, r26
    1838:	b0 93 b5 03 	sts	0x03B5, r27
		if (Mode == 1) posAddress = 0x6062;
		
		setVal32(posAddress,0x00,90000,&message);
    183c:	82 e6       	ldi	r24, 0x62	; 98
    183e:	90 e2       	ldi	r25, 0x20	; 32
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	20 e9       	ldi	r18, 0x90	; 144
    1844:	3f e5       	ldi	r19, 0x5F	; 95
    1846:	41 e0       	ldi	r20, 0x01	; 1
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <setVal32>
}

void LED3(int p)
{
	if (p==0) { BCLR(PORTA,5); }
	else { BSET(PORTA,5); }
    184e:	15 9a       	sbi	0x02, 5	; 2
    1850:	88 e8       	ldi	r24, 0x88	; 136
    1852:	93 e1       	ldi	r25, 0x13	; 19
    1854:	20 e9       	ldi	r18, 0x90	; 144
    1856:	31 e0       	ldi	r19, 0x01	; 1
    1858:	f9 01       	movw	r30, r18
    185a:	31 97       	sbiw	r30, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <main+0x1d4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1860:	d9 f7       	brne	.-10     	; 0x1858 <main+0x1d2>
//																//
//**************************************************************//

void LED1(int p)
{
	if (p==0) { BCLR(PORTA,7); }
    1862:	17 98       	cbi	0x02, 7	; 2
	else { BSET(PORTA,7); }
}

void LED2(int p)
{
	if (p==0) { BCLR(PORTA,6); }
    1864:	16 98       	cbi	0x02, 6	; 2
	else { BSET(PORTA,6); }
}

void LED3(int p)
{
	if (p==0) { BCLR(PORTA,5); }
    1866:	15 98       	cbi	0x02, 5	; 2
    1868:	80 e1       	ldi	r24, 0x10	; 16
    186a:	97 e2       	ldi	r25, 0x27	; 39
    186c:	20 e9       	ldi	r18, 0x90	; 144
    186e:	31 e0       	ldi	r19, 0x01	; 1
    1870:	f9 01       	movw	r30, r18
    1872:	31 97       	sbiw	r30, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <main+0x1ec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1876:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1878:	d9 f7       	brne	.-10     	; 0x1870 <main+0x1ea>
	//sendString("\n\rSelect Shape...");
	//selectShape();
	//blocker = getBlockerPos();

	//Clear Faults
	setVal16(0x6040,0x00,0x0080,&message);
    187a:	80 e4       	ldi	r24, 0x40	; 64
    187c:	90 e6       	ldi	r25, 0x60	; 96
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	28 ec       	ldi	r18, 0xC8	; 200
    1886:	33 e0       	ldi	r19, 0x03	; 3
    1888:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>
    188c:	88 e8       	ldi	r24, 0x88	; 136
    188e:	93 e1       	ldi	r25, 0x13	; 19
    1890:	20 e9       	ldi	r18, 0x90	; 144
    1892:	31 e0       	ldi	r19, 0x01	; 1
    1894:	f9 01       	movw	r30, r18
    1896:	31 97       	sbiw	r30, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <main+0x210>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189c:	d9 f7       	brne	.-10     	; 0x1894 <main+0x20e>
	_delay_ms(500);

	//Engage Motor
	setVal16(0x6040,0x00,0x0006,&message);
    189e:	80 e4       	ldi	r24, 0x40	; 64
    18a0:	90 e6       	ldi	r25, 0x60	; 96
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	46 e0       	ldi	r20, 0x06	; 6
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	28 ec       	ldi	r18, 0xC8	; 200
    18aa:	33 e0       	ldi	r19, 0x03	; 3
    18ac:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>
    18b0:	88 e8       	ldi	r24, 0x88	; 136
    18b2:	93 e1       	ldi	r25, 0x13	; 19
    18b4:	20 e9       	ldi	r18, 0x90	; 144
    18b6:	31 e0       	ldi	r19, 0x01	; 1
    18b8:	f9 01       	movw	r30, r18
    18ba:	31 97       	sbiw	r30, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <main+0x234>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c0:	d9 f7       	brne	.-10     	; 0x18b8 <main+0x232>
	_delay_ms(500);

	//Enable Following:
	setVal16(0x6040,0x00,271,&message);
    18c2:	80 e4       	ldi	r24, 0x40	; 64
    18c4:	90 e6       	ldi	r25, 0x60	; 96
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	4f e0       	ldi	r20, 0x0F	; 15
    18ca:	51 e0       	ldi	r21, 0x01	; 1
    18cc:	28 ec       	ldi	r18, 0xC8	; 200
    18ce:	33 e0       	ldi	r19, 0x03	; 3
    18d0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <setVal16>
		bytetosend[5] = (0b101 << 5) | ((encbyte[4] >> 2) & 0b11111);
		bytetosend[6] = (0b110 << 5) | ((encbyte[4] & 0b11) << 3) | ((encbyte[5] >> 3) & 0b111);
		bytetosend[7] = (0b111 << 5) | ((encbyte[5] & 0b111) << 2);
			

		sprintf(encvalues, "%c%c%c%c%c%c%c%c", bytetosend[0],bytetosend[1],bytetosend[2],bytetosend[3],bytetosend[4],bytetosend[5],bytetosend[6],bytetosend[7]);
    18d4:	6e 01       	movw	r12, r28
    18d6:	08 94       	sec
    18d8:	c1 1c       	adc	r12, r1
    18da:	d1 1c       	adc	r13, r1
    18dc:	9a eb       	ldi	r25, 0xBA	; 186
    18de:	a9 2e       	mov	r10, r25
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	b9 2e       	mov	r11, r25
{
//	if (status_toggle)
//		PORTE = PORTE | 0b00010000;	
//	else
//		PORTE = PORTE & 0b11101111;	
	if (status_toggle++ > 200) {
    18e4:	80 91 c2 03 	lds	r24, 0x03C2
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	80 93 c2 03 	sts	0x03C2, r24
    18ee:	81 50       	subi	r24, 0x01	; 1
    18f0:	89 3c       	cpi	r24, 0xC9	; 201
    18f2:	10 f0       	brcs	.+4      	; 0x18f8 <main+0x272>
		BCLR(PORTE, 4);
    18f4:	74 98       	cbi	0x0e, 4	; 14
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <main+0x274>
	} else {
		BSET(PORTE, 4);
    18f8:	74 9a       	sbi	0x0e, 4	; 14
		
		//blocker = getBlockerPos();
	//	_delay_ms(100);

		
		debug = 0;
    18fa:	10 92 a7 03 	sts	0x03A7, r1
    18fe:	10 92 a6 03 	sts	0x03A6, r1
		//Position Demand Value:
		if (blocker != motorpos) {
    1902:	20 91 ba 03 	lds	r18, 0x03BA
    1906:	30 91 bb 03 	lds	r19, 0x03BB
    190a:	40 91 bc 03 	lds	r20, 0x03BC
    190e:	50 91 bd 03 	lds	r21, 0x03BD
    1912:	80 91 ae 03 	lds	r24, 0x03AE
    1916:	90 91 af 03 	lds	r25, 0x03AF
    191a:	a0 91 b0 03 	lds	r26, 0x03B0
    191e:	b0 91 b1 03 	lds	r27, 0x03B1
    1922:	82 17       	cp	r24, r18
    1924:	93 07       	cpc	r25, r19
    1926:	a4 07       	cpc	r26, r20
    1928:	b5 07       	cpc	r27, r21
    192a:	e1 f0       	breq	.+56     	; 0x1964 <main+0x2de>
			blocker = motorpos;
    192c:	20 93 ae 03 	sts	0x03AE, r18
    1930:	30 93 af 03 	sts	0x03AF, r19
    1934:	40 93 b0 03 	sts	0x03B0, r20
    1938:	50 93 b1 03 	sts	0x03B1, r21
			if ((blocker > 80000) & (blocker < 180000))
    193c:	da 01       	movw	r26, r20
    193e:	c9 01       	movw	r24, r18
    1940:	81 58       	subi	r24, 0x81	; 129
    1942:	98 43       	sbci	r25, 0x38	; 56
    1944:	a1 40       	sbci	r26, 0x01	; 1
    1946:	b0 40       	sbci	r27, 0x00	; 0
    1948:	8f 59       	subi	r24, 0x9F	; 159
    194a:	96 48       	sbci	r25, 0x86	; 134
    194c:	a1 40       	sbci	r26, 0x01	; 1
    194e:	b0 40       	sbci	r27, 0x00	; 0
    1950:	48 f4       	brcc	.+18     	; 0x1964 <main+0x2de>
				setVal32(posAddress,0x00,blocker,&message);		//Profile position = 0x607a, 0x00
    1952:	80 91 b2 03 	lds	r24, 0x03B2
    1956:	90 91 b3 03 	lds	r25, 0x03B3
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	08 ec       	ldi	r16, 0xC8	; 200
    195e:	13 e0       	ldi	r17, 0x03	; 3
    1960:	0e 94 d7 09 	call	0x13ae	; 0x13ae <setVal32>
		//sprintf(x,"A:%+.4d hex:0x%02X%02X%02X%02X byte:%02X bytecount:%i pos:%li er:%i \r", encA+offsetA, pos1,pos2,pos3,pos4, ReceivedByte, bytecount, motorpos, receive_error);
		//sprintf(x,"A:%+.4d byte:%c \r", encA+offsetA, ReceivedByte);
		//sprintf(x,"Blocker: %+3.d  Xm: %+2.d  Ym: %+2.d  Zm:%+2.d       \r", block, (int)Xm, (int)Ym*10, (int)((encC+offsetC)*25.4/cpiC));
		//sendString("\r\n");
		//sendString(x);
		int enc12 = encA + offsetA;
    1964:	00 91 a8 03 	lds	r16, 0x03A8
    1968:	10 91 a9 03 	lds	r17, 0x03A9
    196c:	01 55       	subi	r16, 0x51	; 81
    196e:	11 4e       	sbci	r17, 0xE1	; 225
		int encM = encB + offsetB;
    1970:	60 91 aa 03 	lds	r22, 0x03AA
    1974:	70 91 ab 03 	lds	r23, 0x03AB
    1978:	6e 58       	subi	r22, 0x8E	; 142
    197a:	7e 4f       	sbci	r23, 0xFE	; 254
		int enc5 = encC + offsetC;
    197c:	40 91 ac 03 	lds	r20, 0x03AC
    1980:	50 91 ad 03 	lds	r21, 0x03AD
    1984:	48 58       	subi	r20, 0x88	; 136
    1986:	5c 4f       	sbci	r21, 0xFC	; 252
		
		encbyte[0] = (enc5 >> 0);
    1988:	24 2f       	mov	r18, r20
		encbyte[1] = (enc5 >> 8);
    198a:	45 2f       	mov	r20, r21
    198c:	55 0f       	add	r21, r21
    198e:	55 0b       	sbc	r21, r21
		encbyte[2] = (encM >> 0);
    1990:	f6 2e       	mov	r15, r22
		encbyte[3] = (encM >> 8);
		encbyte[4] = (enc12 >> 0);
    1992:	50 2f       	mov	r21, r16
		encbyte[5] = (enc12 >> 8);
    1994:	01 2f       	mov	r16, r17
    1996:	11 0f       	add	r17, r17
    1998:	11 0b       	sbc	r17, r17
		bytetosend[5] = (0b101 << 5) | ((encbyte[4] >> 2) & 0b11111);
		bytetosend[6] = (0b110 << 5) | ((encbyte[4] & 0b11) << 3) | ((encbyte[5] >> 3) & 0b111);
		bytetosend[7] = (0b111 << 5) | ((encbyte[5] & 0b111) << 2);
			

		sprintf(encvalues, "%c%c%c%c%c%c%c%c", bytetosend[0],bytetosend[1],bytetosend[2],bytetosend[3],bytetosend[4],bytetosend[5],bytetosend[6],bytetosend[7]);
    199a:	8d b7       	in	r24, 0x3d	; 61
    199c:	9e b7       	in	r25, 0x3e	; 62
    199e:	44 97       	sbiw	r24, 0x14	; 20
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	9e bf       	out	0x3e, r25	; 62
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	8d bf       	out	0x3d, r24	; 61
    19aa:	ed b7       	in	r30, 0x3d	; 61
    19ac:	fe b7       	in	r31, 0x3e	; 62
    19ae:	31 96       	adiw	r30, 0x01	; 1
    19b0:	ad b7       	in	r26, 0x3d	; 61
    19b2:	be b7       	in	r27, 0x3e	; 62
    19b4:	12 96       	adiw	r26, 0x02	; 2
    19b6:	dc 92       	st	X, r13
    19b8:	ce 92       	st	-X, r12
    19ba:	11 97       	sbiw	r26, 0x01	; 1
    19bc:	b3 82       	std	Z+3, r11	; 0x03
    19be:	a2 82       	std	Z+2, r10	; 0x02
    19c0:	82 2f       	mov	r24, r18
    19c2:	86 95       	lsr	r24
    19c4:	86 95       	lsr	r24
    19c6:	86 95       	lsr	r24
    19c8:	84 83       	std	Z+4, r24	; 0x04
    19ca:	15 82       	std	Z+5, r1	; 0x05
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	27 70       	andi	r18, 0x07	; 7
    19d0:	30 70       	andi	r19, 0x00	; 0
    19d2:	22 0f       	add	r18, r18
    19d4:	33 1f       	adc	r19, r19
    19d6:	22 0f       	add	r18, r18
    19d8:	33 1f       	adc	r19, r19
    19da:	84 2f       	mov	r24, r20
    19dc:	86 95       	lsr	r24
    19de:	86 95       	lsr	r24
    19e0:	83 70       	andi	r24, 0x03	; 3
    19e2:	82 2b       	or	r24, r18
    19e4:	80 62       	ori	r24, 0x20	; 32
    19e6:	86 83       	std	Z+6, r24	; 0x06
    19e8:	17 82       	std	Z+7, r1	; 0x07
    19ea:	26 2f       	mov	r18, r22
    19ec:	22 95       	swap	r18
    19ee:	26 95       	lsr	r18
    19f0:	27 70       	andi	r18, 0x07	; 7
    19f2:	20 64       	ori	r18, 0x40	; 64
    19f4:	84 2f       	mov	r24, r20
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	83 70       	andi	r24, 0x03	; 3
    19fa:	90 70       	andi	r25, 0x00	; 0
    19fc:	33 e0       	ldi	r19, 0x03	; 3
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	3a 95       	dec	r19
    1a04:	e1 f7       	brne	.-8      	; 0x19fe <main+0x378>
    1a06:	28 2b       	or	r18, r24
    1a08:	20 87       	std	Z+8, r18	; 0x08
    1a0a:	11 86       	std	Z+9, r1	; 0x09
    1a0c:	f6 94       	lsr	r15
    1a0e:	f6 94       	lsr	r15
    1a10:	f6 94       	lsr	r15
    1a12:	b0 e6       	ldi	r27, 0x60	; 96
    1a14:	fb 2a       	or	r15, r27
    1a16:	f2 86       	std	Z+10, r15	; 0x0a
    1a18:	13 86       	std	Z+11, r1	; 0x0b
    1a1a:	85 2f       	mov	r24, r21
    1a1c:	88 1f       	adc	r24, r24
    1a1e:	88 27       	eor	r24, r24
    1a20:	88 1f       	adc	r24, r24
    1a22:	80 68       	ori	r24, 0x80	; 128
    1a24:	67 2f       	mov	r22, r23
    1a26:	77 0f       	add	r23, r23
    1a28:	77 0b       	sbc	r23, r23
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	6f 70       	andi	r22, 0x0F	; 15
    1a2e:	70 70       	andi	r23, 0x00	; 0
    1a30:	66 0f       	add	r22, r22
    1a32:	77 1f       	adc	r23, r23
    1a34:	86 2b       	or	r24, r22
    1a36:	84 87       	std	Z+12, r24	; 0x0c
    1a38:	15 86       	std	Z+13, r1	; 0x0d
    1a3a:	85 2f       	mov	r24, r21
    1a3c:	86 95       	lsr	r24
    1a3e:	86 95       	lsr	r24
    1a40:	8f 71       	andi	r24, 0x1F	; 31
    1a42:	80 6a       	ori	r24, 0xA0	; 160
    1a44:	86 87       	std	Z+14, r24	; 0x0e
    1a46:	17 86       	std	Z+15, r1	; 0x0f
    1a48:	a5 2f       	mov	r26, r21
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	a3 70       	andi	r26, 0x03	; 3
    1a4e:	b0 70       	andi	r27, 0x00	; 0
    1a50:	13 e0       	ldi	r17, 0x03	; 3
    1a52:	aa 0f       	add	r26, r26
    1a54:	bb 1f       	adc	r27, r27
    1a56:	1a 95       	dec	r17
    1a58:	e1 f7       	brne	.-8      	; 0x1a52 <main+0x3cc>
    1a5a:	80 2f       	mov	r24, r16
    1a5c:	86 95       	lsr	r24
    1a5e:	86 95       	lsr	r24
    1a60:	86 95       	lsr	r24
    1a62:	87 70       	andi	r24, 0x07	; 7
    1a64:	8a 2b       	or	r24, r26
    1a66:	80 6c       	ori	r24, 0xC0	; 192
    1a68:	80 8b       	std	Z+16, r24	; 0x10
    1a6a:	11 8a       	std	Z+17, r1	; 0x11
    1a6c:	80 2f       	mov	r24, r16
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	87 70       	andi	r24, 0x07	; 7
    1a72:	90 70       	andi	r25, 0x00	; 0
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	80 6e       	ori	r24, 0xE0	; 224
    1a7e:	82 8b       	std	Z+18, r24	; 0x12
    1a80:	13 8a       	std	Z+19, r1	; 0x13
    1a82:	0e 94 9c 1b 	call	0x3738	; 0x3738 <sprintf>
    1a86:	f6 01       	movw	r30, r12
    1a88:	8d b7       	in	r24, 0x3d	; 61
    1a8a:	9e b7       	in	r25, 0x3e	; 62
    1a8c:	44 96       	adiw	r24, 0x14	; 20
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	9e bf       	out	0x3e, r25	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	8d bf       	out	0x3d, r24	; 61
    1a98:	07 c0       	rjmp	.+14     	; 0x1aa8 <main+0x422>
	UCSR0C = 0b00000110;		//set frame format (even parity, 8 bits, 1 stop bit)
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
    1a9a:	80 91 c0 00 	lds	r24, 0x00C0
    1a9e:	85 ff       	sbrs	r24, 5
    1aa0:	fc cf       	rjmp	.-8      	; 0x1a9a <main+0x414>
void sendString(char str[])
{

    if (!str) return;
    while (*str)
        UART_Transmit(*str++);
    1aa2:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Transmit(unsigned char Data)
{
	while (!(UCSR0A & 0b00100000));
	UDR0 = Data;
    1aa4:	90 93 c6 00 	sts	0x00C6, r25

void sendString(char str[])
{

    if (!str) return;
    while (*str)
    1aa8:	90 81       	ld	r25, Z
    1aaa:	99 23       	and	r25, r25
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <main+0x42a>
    1aae:	1a cf       	rjmp	.-460    	; 0x18e4 <main+0x25e>
    1ab0:	f4 cf       	rjmp	.-24     	; 0x1a9a <main+0x414>

00001ab2 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    1ab2:	1f 93       	push	r17
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
    1ab8:	ec 01       	movw	r28, r24
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    1aba:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1abc:	88 23       	and	r24, r24
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <can_get_status+0x10>
    1ac0:	86 c0       	rjmp	.+268    	; 0x1bce <can_get_status+0x11c>
    1ac2:	8f 31       	cpi	r24, 0x1F	; 31
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <can_get_status+0x16>
    1ac6:	83 c0       	rjmp	.+262    	; 0x1bce <can_get_status+0x11c>
    1ac8:	8f 3f       	cpi	r24, 0xFF	; 255
    1aca:	09 f4       	brne	.+2      	; 0x1ace <can_get_status+0x1c>
    1acc:	80 c0       	rjmp	.+256    	; 0x1bce <can_get_status+0x11c>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
    1ace:	88 81       	ld	r24, Y
    1ad0:	82 95       	swap	r24
    1ad2:	80 7f       	andi	r24, 0xF0	; 240
    1ad4:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
    1ad8:	0e 94 45 13 	call	0x268a	; 0x268a <can_get_mob_status>
    1adc:	18 2f       	mov	r17, r24
    
    switch (a_status)
    1ade:	80 32       	cpi	r24, 0x20	; 32
    1ae0:	71 f0       	breq	.+28     	; 0x1afe <can_get_status+0x4c>
    1ae2:	81 32       	cpi	r24, 0x21	; 33
    1ae4:	18 f4       	brcc	.+6      	; 0x1aec <can_get_status+0x3a>
    1ae6:	88 23       	and	r24, r24
    1ae8:	41 f0       	breq	.+16     	; 0x1afa <can_get_status+0x48>
    1aea:	69 c0       	rjmp	.+210    	; 0x1bbe <can_get_status+0x10c>
    1aec:	80 34       	cpi	r24, 0x40	; 64
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <can_get_status+0x40>
    1af0:	5c c0       	rjmp	.+184    	; 0x1baa <can_get_status+0xf8>
    1af2:	80 3a       	cpi	r24, 0xA0	; 160
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <can_get_status+0x46>
    1af6:	63 c0       	rjmp	.+198    	; 0x1bbe <can_get_status+0x10c>
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <can_get_status+0x4c>
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	69 c0       	rjmp	.+210    	; 0x1bd0 <can_get_status+0x11e>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    1afe:	80 91 ef 00 	lds	r24, 0x00EF
    1b02:	8f 70       	andi	r24, 0x0F	; 15
    1b04:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
    1b06:	8f 81       	ldd	r24, Y+7	; 0x07
    1b08:	98 85       	ldd	r25, Y+8	; 0x08
    1b0a:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1b0e:	80 91 f0 00 	lds	r24, 0x00F0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	84 70       	andi	r24, 0x04	; 4
    1b16:	90 70       	andi	r25, 0x00	; 0
    1b18:	95 95       	asr	r25
    1b1a:	87 95       	ror	r24
    1b1c:	95 95       	asr	r25
    1b1e:	87 95       	ror	r24
    1b20:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    1b22:	80 91 ef 00 	lds	r24, 0x00EF
    1b26:	fe 01       	movw	r30, r28
    1b28:	32 96       	adiw	r30, 0x02	; 2
    1b2a:	84 ff       	sbrs	r24, 4
    1b2c:	2b c0       	rjmp	.+86     	; 0x1b84 <can_get_status+0xd2>
            {
                cmd->ctrl.ide = 1; // extended frame
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1b32:	80 91 f3 00 	lds	r24, 0x00F3
    1b36:	86 95       	lsr	r24
    1b38:	86 95       	lsr	r24
    1b3a:	86 95       	lsr	r24
    1b3c:	83 83       	std	Z+3, r24	; 0x03
    1b3e:	90 91 f2 00 	lds	r25, 0x00F2
    1b42:	80 91 f3 00 	lds	r24, 0x00F3
    1b46:	82 95       	swap	r24
    1b48:	88 0f       	add	r24, r24
    1b4a:	80 7e       	andi	r24, 0xE0	; 224
    1b4c:	96 95       	lsr	r25
    1b4e:	96 95       	lsr	r25
    1b50:	96 95       	lsr	r25
    1b52:	89 0f       	add	r24, r25
    1b54:	82 83       	std	Z+2, r24	; 0x02
    1b56:	90 91 f1 00 	lds	r25, 0x00F1
    1b5a:	80 91 f2 00 	lds	r24, 0x00F2
    1b5e:	82 95       	swap	r24
    1b60:	88 0f       	add	r24, r24
    1b62:	80 7e       	andi	r24, 0xE0	; 224
    1b64:	96 95       	lsr	r25
    1b66:	96 95       	lsr	r25
    1b68:	96 95       	lsr	r25
    1b6a:	89 0f       	add	r24, r25
    1b6c:	81 83       	std	Z+1, r24	; 0x01
    1b6e:	90 91 f0 00 	lds	r25, 0x00F0
    1b72:	80 91 f1 00 	lds	r24, 0x00F1
    1b76:	82 95       	swap	r24
    1b78:	88 0f       	add	r24, r24
    1b7a:	80 7e       	andi	r24, 0xE0	; 224
    1b7c:	96 95       	lsr	r25
    1b7e:	96 95       	lsr	r25
    1b80:	96 95       	lsr	r25
    1b82:	11 c0       	rjmp	.+34     	; 0x1ba6 <can_get_status+0xf4>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1b84:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1b86:	80 91 f3 00 	lds	r24, 0x00F3
    1b8a:	82 95       	swap	r24
    1b8c:	86 95       	lsr	r24
    1b8e:	87 70       	andi	r24, 0x07	; 7
    1b90:	81 83       	std	Z+1, r24	; 0x01
    1b92:	90 91 f2 00 	lds	r25, 0x00F2
    1b96:	80 91 f3 00 	lds	r24, 0x00F3
    1b9a:	88 0f       	add	r24, r24
    1b9c:	88 0f       	add	r24, r24
    1b9e:	88 0f       	add	r24, r24
    1ba0:	92 95       	swap	r25
    1ba2:	96 95       	lsr	r25
    1ba4:	97 70       	andi	r25, 0x07	; 7
    1ba6:	89 0f       	add	r24, r25
    1ba8:	8a 83       	std	Y+2, r24	; 0x02
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1baa:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
    1bac:	80 91 ef 00 	lds	r24, 0x00EF
    1bb0:	8f 73       	andi	r24, 0x3F	; 63
    1bb2:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    1bb6:	10 92 ee 00 	sts	0x00EE, r1
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	09 c0       	rjmp	.+18     	; 0x1bd0 <can_get_status+0x11e>
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1bbe:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
    1bc0:	80 91 ef 00 	lds	r24, 0x00EF
    1bc4:	8f 73       	andi	r24, 0x3F	; 63
    1bc6:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    1bca:	10 92 ee 00 	sts	0x00EE, r1
    1bce:	82 e0       	ldi	r24, 0x02	; 2
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	08 95       	ret

00001bd8 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <can_cmd+0xa>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <can_cmd+0xc>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	8c 01       	movw	r16, r24
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
    1bea:	dc 01       	movw	r26, r24
    1bec:	11 96       	adiw	r26, 0x01	; 1
    1bee:	8c 91       	ld	r24, X
    1bf0:	11 97       	sbiw	r26, 0x01	; 1
    1bf2:	8c 30       	cpi	r24, 0x0C	; 12
    1bf4:	a9 f4       	brne	.+42     	; 0x1c20 <can_cmd+0x48>
  {
    if (cmd->status == MOB_PENDING)
    1bf6:	19 96       	adiw	r26, 0x09	; 9
    1bf8:	8c 91       	ld	r24, X
    1bfa:	19 97       	sbiw	r26, 0x09	; 9
    1bfc:	80 36       	cpi	r24, 0x60	; 96
    1bfe:	69 f4       	brne	.+26     	; 0x1c1a <can_cmd+0x42>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
    1c00:	8c 91       	ld	r24, X
    1c02:	82 95       	swap	r24
    1c04:	80 7f       	andi	r24, 0xF0	; 240
    1c06:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
    1c0a:	80 91 ef 00 	lds	r24, 0x00EF
    1c0e:	8f 73       	andi	r24, 0x3F	; 63
    1c10:	80 93 ef 00 	sts	0x00EF, r24
      Can_clear_status_mob();       // To be sure !
    1c14:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
    1c18:	1c 92       	st	X, r1
    }
    cmd->status = STATUS_CLEARED; 
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	11 86       	std	Z+9, r1	; 0x09
    1c1e:	28 c1       	rjmp	.+592    	; 0x1e70 <can_cmd+0x298>
  }
  else
  {
    mob_handle = can_get_mob_free();
    1c20:	0e 94 2e 13 	call	0x265c	; 0x265c <can_get_mob_free>
    1c24:	98 2f       	mov	r25, r24
    if (mob_handle!= NO_MOB)
    1c26:	8f 3f       	cpi	r24, 0xFF	; 255
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <can_cmd+0x54>
    1c2a:	ee c4       	rjmp	.+2524   	; 0x2608 <can_cmd+0xa30>
    {
      cmd->status = MOB_PENDING; 
    1c2c:	80 e6       	ldi	r24, 0x60	; 96
    1c2e:	d8 01       	movw	r26, r16
    1c30:	19 96       	adiw	r26, 0x09	; 9
    1c32:	8c 93       	st	X, r24
    1c34:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
    1c36:	9c 93       	st	X, r25
      Can_set_mob(mob_handle);
    1c38:	92 95       	swap	r25
    1c3a:	90 7f       	andi	r25, 0xF0	; 240
    1c3c:	90 93 ed 00 	sts	0x00ED, r25
    1c40:	ee ee       	ldi	r30, 0xEE	; 238
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
      Can_clear_mob();
    1c44:	11 92       	st	Z+, r1
    1c46:	e8 3f       	cpi	r30, 0xF8	; 248
    1c48:	f1 05       	cpc	r31, r1
    1c4a:	e1 f7       	brne	.-8      	; 0x1c44 <can_cmd+0x6c>
          
      switch (cmd->cmd)
    1c4c:	f8 01       	movw	r30, r16
    1c4e:	81 81       	ldd	r24, Z+1	; 0x01
    1c50:	86 30       	cpi	r24, 0x06	; 6
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <can_cmd+0x7e>
    1c54:	dc c1       	rjmp	.+952    	; 0x200e <can_cmd+0x436>
    1c56:	87 30       	cpi	r24, 0x07	; 7
    1c58:	90 f4       	brcc	.+36     	; 0x1c7e <can_cmd+0xa6>
    1c5a:	83 30       	cpi	r24, 0x03	; 3
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <can_cmd+0x88>
    1c5e:	0a c1       	rjmp	.+532    	; 0x1e74 <can_cmd+0x29c>
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	30 f4       	brcc	.+12     	; 0x1c70 <can_cmd+0x98>
    1c64:	81 30       	cpi	r24, 0x01	; 1
    1c66:	11 f1       	breq	.+68     	; 0x1cac <can_cmd+0xd4>
    1c68:	82 30       	cpi	r24, 0x02	; 2
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <can_cmd+0x96>
    1c6c:	c9 c4       	rjmp	.+2450   	; 0x2600 <can_cmd+0xa28>
    1c6e:	8c c0       	rjmp	.+280    	; 0x1d88 <can_cmd+0x1b0>
    1c70:	84 30       	cpi	r24, 0x04	; 4
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <can_cmd+0x9e>
    1c74:	51 c1       	rjmp	.+674    	; 0x1f18 <can_cmd+0x340>
    1c76:	85 30       	cpi	r24, 0x05	; 5
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <can_cmd+0xa4>
    1c7a:	c2 c4       	rjmp	.+2436   	; 0x2600 <can_cmd+0xa28>
    1c7c:	88 c1       	rjmp	.+784    	; 0x1f8e <can_cmd+0x3b6>
    1c7e:	89 30       	cpi	r24, 0x09	; 9
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <can_cmd+0xac>
    1c82:	30 c3       	rjmp	.+1632   	; 0x22e4 <can_cmd+0x70c>
    1c84:	8a 30       	cpi	r24, 0x0A	; 10
    1c86:	38 f4       	brcc	.+14     	; 0x1c96 <can_cmd+0xbe>
    1c88:	87 30       	cpi	r24, 0x07	; 7
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <can_cmd+0xb6>
    1c8c:	07 c2       	rjmp	.+1038   	; 0x209c <can_cmd+0x4c4>
    1c8e:	88 30       	cpi	r24, 0x08	; 8
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <can_cmd+0xbc>
    1c92:	b6 c4       	rjmp	.+2412   	; 0x2600 <can_cmd+0xa28>
    1c94:	98 c2       	rjmp	.+1328   	; 0x21c6 <can_cmd+0x5ee>
    1c96:	8a 30       	cpi	r24, 0x0A	; 10
    1c98:	21 f0       	breq	.+8      	; 0x1ca2 <can_cmd+0xca>
    1c9a:	8b 30       	cpi	r24, 0x0B	; 11
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <can_cmd+0xc8>
    1c9e:	b0 c4       	rjmp	.+2400   	; 0x2600 <can_cmd+0xa28>
    1ca0:	0b c4       	rjmp	.+2070   	; 0x24b8 <can_cmd+0x8e0>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1ca2:	d8 01       	movw	r26, r16
    1ca4:	16 96       	adiw	r26, 0x06	; 6
    1ca6:	4c 91       	ld	r20, X
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	bc c3       	rjmp	.+1912   	; 0x2424 <can_cmd+0x84c>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1cac:	f8 01       	movw	r30, r16
    1cae:	83 85       	ldd	r24, Z+11	; 0x0b
    1cb0:	32 96       	adiw	r30, 0x02	; 2
    1cb2:	88 23       	and	r24, r24
    1cb4:	91 f1       	breq	.+100    	; 0x1d1a <can_cmd+0x142>
    1cb6:	32 81       	ldd	r19, Z+2	; 0x02
    1cb8:	93 2f       	mov	r25, r19
    1cba:	92 95       	swap	r25
    1cbc:	96 95       	lsr	r25
    1cbe:	97 70       	andi	r25, 0x07	; 7
    1cc0:	83 81       	ldd	r24, Z+3	; 0x03
    1cc2:	88 0f       	add	r24, r24
    1cc4:	88 0f       	add	r24, r24
    1cc6:	88 0f       	add	r24, r24
    1cc8:	98 0f       	add	r25, r24
    1cca:	90 93 f3 00 	sts	0x00F3, r25
    1cce:	21 81       	ldd	r18, Z+1	; 0x01
    1cd0:	82 2f       	mov	r24, r18
    1cd2:	82 95       	swap	r24
    1cd4:	86 95       	lsr	r24
    1cd6:	87 70       	andi	r24, 0x07	; 7
    1cd8:	33 0f       	add	r19, r19
    1cda:	33 0f       	add	r19, r19
    1cdc:	33 0f       	add	r19, r19
    1cde:	83 0f       	add	r24, r19
    1ce0:	80 93 f2 00 	sts	0x00F2, r24
    1ce4:	d8 01       	movw	r26, r16
    1ce6:	12 96       	adiw	r26, 0x02	; 2
    1ce8:	9c 91       	ld	r25, X
    1cea:	22 0f       	add	r18, r18
    1cec:	22 0f       	add	r18, r18
    1cee:	22 0f       	add	r18, r18
    1cf0:	89 2f       	mov	r24, r25
    1cf2:	82 95       	swap	r24
    1cf4:	86 95       	lsr	r24
    1cf6:	87 70       	andi	r24, 0x07	; 7
    1cf8:	28 0f       	add	r18, r24
    1cfa:	20 93 f1 00 	sts	0x00F1, r18
    1cfe:	99 0f       	add	r25, r25
    1d00:	99 0f       	add	r25, r25
    1d02:	99 0f       	add	r25, r25
    1d04:	90 93 f0 00 	sts	0x00F0, r25
    1d08:	80 91 ef 00 	lds	r24, 0x00EF
    1d0c:	80 61       	ori	r24, 0x10	; 16
    1d0e:	80 93 ef 00 	sts	0x00EF, r24
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1d12:	f8 01       	movw	r30, r16
    1d14:	26 81       	ldd	r18, Z+6	; 0x06
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	22 c0       	rjmp	.+68     	; 0x1d5e <can_cmd+0x186>
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    1d1a:	d8 01       	movw	r26, r16
    1d1c:	12 96       	adiw	r26, 0x02	; 2
    1d1e:	2c 91       	ld	r18, X
    1d20:	81 81       	ldd	r24, Z+1	; 0x01
    1d22:	82 95       	swap	r24
    1d24:	88 0f       	add	r24, r24
    1d26:	80 7e       	andi	r24, 0xE0	; 224
    1d28:	92 2f       	mov	r25, r18
    1d2a:	96 95       	lsr	r25
    1d2c:	96 95       	lsr	r25
    1d2e:	96 95       	lsr	r25
    1d30:	89 0f       	add	r24, r25
    1d32:	80 93 f3 00 	sts	0x00F3, r24
    1d36:	22 95       	swap	r18
    1d38:	22 0f       	add	r18, r18
    1d3a:	20 7e       	andi	r18, 0xE0	; 224
    1d3c:	20 93 f2 00 	sts	0x00F2, r18
    1d40:	80 91 ef 00 	lds	r24, 0x00EF
    1d44:	8f 7e       	andi	r24, 0xEF	; 239
    1d46:	e3 cf       	rjmp	.-58     	; 0x1d0e <can_cmd+0x136>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1d48:	d8 01       	movw	r26, r16
    1d4a:	17 96       	adiw	r26, 0x07	; 7
    1d4c:	ed 91       	ld	r30, X+
    1d4e:	fc 91       	ld	r31, X
    1d50:	18 97       	sbiw	r26, 0x08	; 8
    1d52:	e9 0f       	add	r30, r25
    1d54:	f1 1d       	adc	r31, r1
    1d56:	80 81       	ld	r24, Z
    1d58:	80 93 fa 00 	sts	0x00FA, r24
    1d5c:	9f 5f       	subi	r25, 0xFF	; 255
    1d5e:	92 17       	cp	r25, r18
    1d60:	98 f3       	brcs	.-26     	; 0x1d48 <can_cmd+0x170>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
    1d62:	f8 01       	movw	r30, r16
    1d64:	82 85       	ldd	r24, Z+10	; 0x0a
    1d66:	88 23       	and	r24, r24
    1d68:	21 f0       	breq	.+8      	; 0x1d72 <can_cmd+0x19a>
    1d6a:	80 91 f0 00 	lds	r24, 0x00F0
    1d6e:	84 60       	ori	r24, 0x04	; 4
    1d70:	03 c0       	rjmp	.+6      	; 0x1d78 <can_cmd+0x1a0>
            else Can_clear_rtr();    
    1d72:	80 91 f0 00 	lds	r24, 0x00F0
    1d76:	8b 7f       	andi	r24, 0xFB	; 251
    1d78:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_dlc(cmd->dlc);
    1d7c:	80 91 ef 00 	lds	r24, 0x00EF
    1d80:	28 2b       	or	r18, r24
    1d82:	20 93 ef 00 	sts	0x00EF, r18
    1d86:	6a c0       	rjmp	.+212    	; 0x1e5c <can_cmd+0x284>
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1d88:	d8 01       	movw	r26, r16
    1d8a:	1b 96       	adiw	r26, 0x0b	; 11
    1d8c:	8c 91       	ld	r24, X
    1d8e:	f8 01       	movw	r30, r16
    1d90:	32 96       	adiw	r30, 0x02	; 2
    1d92:	88 23       	and	r24, r24
    1d94:	91 f1       	breq	.+100    	; 0x1dfa <can_cmd+0x222>
    1d96:	32 81       	ldd	r19, Z+2	; 0x02
    1d98:	93 2f       	mov	r25, r19
    1d9a:	92 95       	swap	r25
    1d9c:	96 95       	lsr	r25
    1d9e:	97 70       	andi	r25, 0x07	; 7
    1da0:	83 81       	ldd	r24, Z+3	; 0x03
    1da2:	88 0f       	add	r24, r24
    1da4:	88 0f       	add	r24, r24
    1da6:	88 0f       	add	r24, r24
    1da8:	98 0f       	add	r25, r24
    1daa:	90 93 f3 00 	sts	0x00F3, r25
    1dae:	21 81       	ldd	r18, Z+1	; 0x01
    1db0:	82 2f       	mov	r24, r18
    1db2:	82 95       	swap	r24
    1db4:	86 95       	lsr	r24
    1db6:	87 70       	andi	r24, 0x07	; 7
    1db8:	33 0f       	add	r19, r19
    1dba:	33 0f       	add	r19, r19
    1dbc:	33 0f       	add	r19, r19
    1dbe:	83 0f       	add	r24, r19
    1dc0:	80 93 f2 00 	sts	0x00F2, r24
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	92 81       	ldd	r25, Z+2	; 0x02
    1dc8:	22 0f       	add	r18, r18
    1dca:	22 0f       	add	r18, r18
    1dcc:	22 0f       	add	r18, r18
    1dce:	89 2f       	mov	r24, r25
    1dd0:	82 95       	swap	r24
    1dd2:	86 95       	lsr	r24
    1dd4:	87 70       	andi	r24, 0x07	; 7
    1dd6:	28 0f       	add	r18, r24
    1dd8:	20 93 f1 00 	sts	0x00F1, r18
    1ddc:	99 0f       	add	r25, r25
    1dde:	99 0f       	add	r25, r25
    1de0:	99 0f       	add	r25, r25
    1de2:	90 93 f0 00 	sts	0x00F0, r25
    1de6:	80 91 ef 00 	lds	r24, 0x00EF
    1dea:	80 61       	ori	r24, 0x10	; 16
    1dec:	80 93 ef 00 	sts	0x00EF, r24
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1df0:	d8 01       	movw	r26, r16
    1df2:	16 96       	adiw	r26, 0x06	; 6
    1df4:	2c 91       	ld	r18, X
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	22 c0       	rjmp	.+68     	; 0x1e3e <can_cmd+0x266>
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    1dfa:	d8 01       	movw	r26, r16
    1dfc:	12 96       	adiw	r26, 0x02	; 2
    1dfe:	2c 91       	ld	r18, X
    1e00:	81 81       	ldd	r24, Z+1	; 0x01
    1e02:	82 95       	swap	r24
    1e04:	88 0f       	add	r24, r24
    1e06:	80 7e       	andi	r24, 0xE0	; 224
    1e08:	92 2f       	mov	r25, r18
    1e0a:	96 95       	lsr	r25
    1e0c:	96 95       	lsr	r25
    1e0e:	96 95       	lsr	r25
    1e10:	89 0f       	add	r24, r25
    1e12:	80 93 f3 00 	sts	0x00F3, r24
    1e16:	22 95       	swap	r18
    1e18:	22 0f       	add	r18, r18
    1e1a:	20 7e       	andi	r18, 0xE0	; 224
    1e1c:	20 93 f2 00 	sts	0x00F2, r18
    1e20:	80 91 ef 00 	lds	r24, 0x00EF
    1e24:	8f 7e       	andi	r24, 0xEF	; 239
    1e26:	e2 cf       	rjmp	.-60     	; 0x1dec <can_cmd+0x214>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1e28:	d8 01       	movw	r26, r16
    1e2a:	17 96       	adiw	r26, 0x07	; 7
    1e2c:	ed 91       	ld	r30, X+
    1e2e:	fc 91       	ld	r31, X
    1e30:	18 97       	sbiw	r26, 0x08	; 8
    1e32:	e9 0f       	add	r30, r25
    1e34:	f1 1d       	adc	r31, r1
    1e36:	80 81       	ld	r24, Z
    1e38:	80 93 fa 00 	sts	0x00FA, r24
    1e3c:	9f 5f       	subi	r25, 0xFF	; 255
    1e3e:	92 17       	cp	r25, r18
    1e40:	98 f3       	brcs	.-26     	; 0x1e28 <can_cmd+0x250>
          cmd->ctrl.rtr=0; Can_clear_rtr();
    1e42:	f8 01       	movw	r30, r16
    1e44:	12 86       	std	Z+10, r1	; 0x0a
    1e46:	80 91 f0 00 	lds	r24, 0x00F0
    1e4a:	8b 7f       	andi	r24, 0xFB	; 251
    1e4c:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_dlc(cmd->dlc);
    1e50:	80 91 ef 00 	lds	r24, 0x00EF
    1e54:	96 81       	ldd	r25, Z+6	; 0x06
    1e56:	89 2b       	or	r24, r25
    1e58:	80 93 ef 00 	sts	0x00EF, r24
          Can_config_tx();
    1e5c:	80 91 ef 00 	lds	r24, 0x00EF
    1e60:	8f 73       	andi	r24, 0x3F	; 63
    1e62:	80 93 ef 00 	sts	0x00EF, r24
    1e66:	80 91 ef 00 	lds	r24, 0x00EF
    1e6a:	80 64       	ori	r24, 0x40	; 64
    1e6c:	80 93 ef 00 	sts	0x00EF, r24
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	ce c3       	rjmp	.+1948   	; 0x2610 <can_cmd+0xa38>
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1e74:	d8 01       	movw	r26, r16
    1e76:	1b 96       	adiw	r26, 0x0b	; 11
    1e78:	8c 91       	ld	r24, X
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	32 96       	adiw	r30, 0x02	; 2
    1e7e:	88 23       	and	r24, r24
    1e80:	61 f1       	breq	.+88     	; 0x1eda <can_cmd+0x302>
    1e82:	32 81       	ldd	r19, Z+2	; 0x02
    1e84:	93 2f       	mov	r25, r19
    1e86:	92 95       	swap	r25
    1e88:	96 95       	lsr	r25
    1e8a:	97 70       	andi	r25, 0x07	; 7
    1e8c:	83 81       	ldd	r24, Z+3	; 0x03
    1e8e:	88 0f       	add	r24, r24
    1e90:	88 0f       	add	r24, r24
    1e92:	88 0f       	add	r24, r24
    1e94:	98 0f       	add	r25, r24
    1e96:	90 93 f3 00 	sts	0x00F3, r25
    1e9a:	21 81       	ldd	r18, Z+1	; 0x01
    1e9c:	82 2f       	mov	r24, r18
    1e9e:	82 95       	swap	r24
    1ea0:	86 95       	lsr	r24
    1ea2:	87 70       	andi	r24, 0x07	; 7
    1ea4:	33 0f       	add	r19, r19
    1ea6:	33 0f       	add	r19, r19
    1ea8:	33 0f       	add	r19, r19
    1eaa:	83 0f       	add	r24, r19
    1eac:	80 93 f2 00 	sts	0x00F2, r24
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	92 81       	ldd	r25, Z+2	; 0x02
    1eb4:	22 0f       	add	r18, r18
    1eb6:	22 0f       	add	r18, r18
    1eb8:	22 0f       	add	r18, r18
    1eba:	89 2f       	mov	r24, r25
    1ebc:	82 95       	swap	r24
    1ebe:	86 95       	lsr	r24
    1ec0:	87 70       	andi	r24, 0x07	; 7
    1ec2:	28 0f       	add	r18, r24
    1ec4:	20 93 f1 00 	sts	0x00F1, r18
    1ec8:	99 0f       	add	r25, r25
    1eca:	99 0f       	add	r25, r25
    1ecc:	99 0f       	add	r25, r25
    1ece:	90 93 f0 00 	sts	0x00F0, r25
    1ed2:	80 91 ef 00 	lds	r24, 0x00EF
    1ed6:	80 61       	ori	r24, 0x10	; 16
    1ed8:	16 c0       	rjmp	.+44     	; 0x1f06 <can_cmd+0x32e>
          else              { Can_set_std_id(cmd->id.std);}
    1eda:	d8 01       	movw	r26, r16
    1edc:	12 96       	adiw	r26, 0x02	; 2
    1ede:	2c 91       	ld	r18, X
    1ee0:	81 81       	ldd	r24, Z+1	; 0x01
    1ee2:	82 95       	swap	r24
    1ee4:	88 0f       	add	r24, r24
    1ee6:	80 7e       	andi	r24, 0xE0	; 224
    1ee8:	92 2f       	mov	r25, r18
    1eea:	96 95       	lsr	r25
    1eec:	96 95       	lsr	r25
    1eee:	96 95       	lsr	r25
    1ef0:	89 0f       	add	r24, r25
    1ef2:	80 93 f3 00 	sts	0x00F3, r24
    1ef6:	22 95       	swap	r18
    1ef8:	22 0f       	add	r18, r18
    1efa:	20 7e       	andi	r18, 0xE0	; 224
    1efc:	20 93 f2 00 	sts	0x00F2, r18
    1f00:	80 91 ef 00 	lds	r24, 0x00EF
    1f04:	8f 7e       	andi	r24, 0xEF	; 239
    1f06:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	f8 01       	movw	r30, r16
    1f0e:	82 87       	std	Z+10, r24	; 0x0a
    1f10:	80 91 f0 00 	lds	r24, 0x00F0
    1f14:	84 60       	ori	r24, 0x04	; 4
    1f16:	9a cf       	rjmp	.-204    	; 0x1e4c <can_cmd+0x274>
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1f18:	19 82       	std	Y+1, r1	; 0x01
    1f1a:	1a 82       	std	Y+2, r1	; 0x02
    1f1c:	1b 82       	std	Y+3, r1	; 0x03
    1f1e:	1c 82       	std	Y+4, r1	; 0x04
    1f20:	fe 01       	movw	r30, r28
    1f22:	31 96       	adiw	r30, 0x01	; 1
    1f24:	32 81       	ldd	r19, Z+2	; 0x02
    1f26:	93 2f       	mov	r25, r19
    1f28:	92 95       	swap	r25
    1f2a:	96 95       	lsr	r25
    1f2c:	97 70       	andi	r25, 0x07	; 7
    1f2e:	83 81       	ldd	r24, Z+3	; 0x03
    1f30:	88 0f       	add	r24, r24
    1f32:	88 0f       	add	r24, r24
    1f34:	88 0f       	add	r24, r24
    1f36:	98 0f       	add	r25, r24
    1f38:	90 93 f7 00 	sts	0x00F7, r25
    1f3c:	21 81       	ldd	r18, Z+1	; 0x01
    1f3e:	82 2f       	mov	r24, r18
    1f40:	82 95       	swap	r24
    1f42:	86 95       	lsr	r24
    1f44:	87 70       	andi	r24, 0x07	; 7
    1f46:	33 0f       	add	r19, r19
    1f48:	33 0f       	add	r19, r19
    1f4a:	33 0f       	add	r19, r19
    1f4c:	83 0f       	add	r24, r19
    1f4e:	80 93 f6 00 	sts	0x00F6, r24
    1f52:	99 81       	ldd	r25, Y+1	; 0x01
    1f54:	22 0f       	add	r18, r18
    1f56:	22 0f       	add	r18, r18
    1f58:	22 0f       	add	r18, r18
    1f5a:	89 2f       	mov	r24, r25
    1f5c:	82 95       	swap	r24
    1f5e:	86 95       	lsr	r24
    1f60:	87 70       	andi	r24, 0x07	; 7
    1f62:	28 0f       	add	r18, r24
    1f64:	20 93 f5 00 	sts	0x00F5, r18
    1f68:	99 0f       	add	r25, r25
    1f6a:	99 0f       	add	r25, r25
    1f6c:	99 0f       	add	r25, r25
    1f6e:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    1f72:	80 91 ef 00 	lds	r24, 0x00EF
    1f76:	d8 01       	movw	r26, r16
    1f78:	16 96       	adiw	r26, 0x06	; 6
    1f7a:	9c 91       	ld	r25, X
    1f7c:	89 2b       	or	r24, r25
    1f7e:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_rtrmsk();
    1f82:	80 91 f4 00 	lds	r24, 0x00F4
    1f86:	8b 7f       	andi	r24, 0xFB	; 251
    1f88:	80 93 f4 00 	sts	0x00F4, r24
    1f8c:	91 c2       	rjmp	.+1314   	; 0x24b0 <can_cmd+0x8d8>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1f8e:	19 82       	std	Y+1, r1	; 0x01
    1f90:	1a 82       	std	Y+2, r1	; 0x02
    1f92:	1b 82       	std	Y+3, r1	; 0x03
    1f94:	1c 82       	std	Y+4, r1	; 0x04
    1f96:	fe 01       	movw	r30, r28
    1f98:	31 96       	adiw	r30, 0x01	; 1
    1f9a:	32 81       	ldd	r19, Z+2	; 0x02
    1f9c:	93 2f       	mov	r25, r19
    1f9e:	92 95       	swap	r25
    1fa0:	96 95       	lsr	r25
    1fa2:	97 70       	andi	r25, 0x07	; 7
    1fa4:	83 81       	ldd	r24, Z+3	; 0x03
    1fa6:	88 0f       	add	r24, r24
    1fa8:	88 0f       	add	r24, r24
    1faa:	88 0f       	add	r24, r24
    1fac:	98 0f       	add	r25, r24
    1fae:	90 93 f7 00 	sts	0x00F7, r25
    1fb2:	21 81       	ldd	r18, Z+1	; 0x01
    1fb4:	82 2f       	mov	r24, r18
    1fb6:	82 95       	swap	r24
    1fb8:	86 95       	lsr	r24
    1fba:	87 70       	andi	r24, 0x07	; 7
    1fbc:	33 0f       	add	r19, r19
    1fbe:	33 0f       	add	r19, r19
    1fc0:	33 0f       	add	r19, r19
    1fc2:	83 0f       	add	r24, r19
    1fc4:	80 93 f6 00 	sts	0x00F6, r24
    1fc8:	99 81       	ldd	r25, Y+1	; 0x01
    1fca:	22 0f       	add	r18, r18
    1fcc:	22 0f       	add	r18, r18
    1fce:	22 0f       	add	r18, r18
    1fd0:	89 2f       	mov	r24, r25
    1fd2:	82 95       	swap	r24
    1fd4:	86 95       	lsr	r24
    1fd6:	87 70       	andi	r24, 0x07	; 7
    1fd8:	28 0f       	add	r18, r24
    1fda:	20 93 f5 00 	sts	0x00F5, r18
    1fde:	99 0f       	add	r25, r25
    1fe0:	99 0f       	add	r25, r25
    1fe2:	99 0f       	add	r25, r25
    1fe4:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    1fe8:	80 91 ef 00 	lds	r24, 0x00EF
    1fec:	f8 01       	movw	r30, r16
    1fee:	96 81       	ldd	r25, Z+6	; 0x06
    1ff0:	89 2b       	or	r24, r25
    1ff2:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1ff6:	12 86       	std	Z+10, r1	; 0x0a
    1ff8:	80 91 f4 00 	lds	r24, 0x00F4
    1ffc:	84 60       	ori	r24, 0x04	; 4
    1ffe:	80 93 f4 00 	sts	0x00F4, r24
    2002:	80 91 f0 00 	lds	r24, 0x00F0
    2006:	8b 7f       	andi	r24, 0xFB	; 251
    2008:	80 93 f0 00 	sts	0x00F0, r24
    200c:	51 c2       	rjmp	.+1186   	; 0x24b0 <can_cmd+0x8d8>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    200e:	19 82       	std	Y+1, r1	; 0x01
    2010:	1a 82       	std	Y+2, r1	; 0x02
    2012:	1b 82       	std	Y+3, r1	; 0x03
    2014:	1c 82       	std	Y+4, r1	; 0x04
    2016:	fe 01       	movw	r30, r28
    2018:	31 96       	adiw	r30, 0x01	; 1
    201a:	32 81       	ldd	r19, Z+2	; 0x02
    201c:	93 2f       	mov	r25, r19
    201e:	92 95       	swap	r25
    2020:	96 95       	lsr	r25
    2022:	97 70       	andi	r25, 0x07	; 7
    2024:	83 81       	ldd	r24, Z+3	; 0x03
    2026:	88 0f       	add	r24, r24
    2028:	88 0f       	add	r24, r24
    202a:	88 0f       	add	r24, r24
    202c:	98 0f       	add	r25, r24
    202e:	90 93 f7 00 	sts	0x00F7, r25
    2032:	21 81       	ldd	r18, Z+1	; 0x01
    2034:	82 2f       	mov	r24, r18
    2036:	82 95       	swap	r24
    2038:	86 95       	lsr	r24
    203a:	87 70       	andi	r24, 0x07	; 7
    203c:	33 0f       	add	r19, r19
    203e:	33 0f       	add	r19, r19
    2040:	33 0f       	add	r19, r19
    2042:	83 0f       	add	r24, r19
    2044:	80 93 f6 00 	sts	0x00F6, r24
    2048:	99 81       	ldd	r25, Y+1	; 0x01
    204a:	22 0f       	add	r18, r18
    204c:	22 0f       	add	r18, r18
    204e:	22 0f       	add	r18, r18
    2050:	89 2f       	mov	r24, r25
    2052:	82 95       	swap	r24
    2054:	86 95       	lsr	r24
    2056:	87 70       	andi	r24, 0x07	; 7
    2058:	28 0f       	add	r18, r24
    205a:	20 93 f5 00 	sts	0x00F5, r18
    205e:	99 0f       	add	r25, r25
    2060:	99 0f       	add	r25, r25
    2062:	99 0f       	add	r25, r25
    2064:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    2068:	80 91 ef 00 	lds	r24, 0x00EF
    206c:	d8 01       	movw	r26, r16
    206e:	16 96       	adiw	r26, 0x06	; 6
    2070:	9c 91       	ld	r25, X
    2072:	16 97       	sbiw	r26, 0x06	; 6
    2074:	89 2b       	or	r24, r25
    2076:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	1a 96       	adiw	r26, 0x0a	; 10
    207e:	8c 93       	st	X, r24
    2080:	80 91 f4 00 	lds	r24, 0x00F4
    2084:	84 60       	ori	r24, 0x04	; 4
    2086:	80 93 f4 00 	sts	0x00F4, r24
    208a:	80 91 f0 00 	lds	r24, 0x00F0
    208e:	84 60       	ori	r24, 0x04	; 4
    2090:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_rplv();
    2094:	80 91 ef 00 	lds	r24, 0x00EF
    2098:	8f 7d       	andi	r24, 0xDF	; 223
    209a:	08 c2       	rjmp	.+1040   	; 0x24ac <can_cmd+0x8d4>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    209c:	f8 01       	movw	r30, r16
    209e:	83 85       	ldd	r24, Z+11	; 0x0b
    20a0:	32 96       	adiw	r30, 0x02	; 2
    20a2:	88 23       	and	r24, r24
    20a4:	69 f1       	breq	.+90     	; 0x2100 <can_cmd+0x528>
    20a6:	32 81       	ldd	r19, Z+2	; 0x02
    20a8:	93 2f       	mov	r25, r19
    20aa:	92 95       	swap	r25
    20ac:	96 95       	lsr	r25
    20ae:	97 70       	andi	r25, 0x07	; 7
    20b0:	83 81       	ldd	r24, Z+3	; 0x03
    20b2:	88 0f       	add	r24, r24
    20b4:	88 0f       	add	r24, r24
    20b6:	88 0f       	add	r24, r24
    20b8:	98 0f       	add	r25, r24
    20ba:	90 93 f3 00 	sts	0x00F3, r25
    20be:	21 81       	ldd	r18, Z+1	; 0x01
    20c0:	82 2f       	mov	r24, r18
    20c2:	82 95       	swap	r24
    20c4:	86 95       	lsr	r24
    20c6:	87 70       	andi	r24, 0x07	; 7
    20c8:	33 0f       	add	r19, r19
    20ca:	33 0f       	add	r19, r19
    20cc:	33 0f       	add	r19, r19
    20ce:	83 0f       	add	r24, r19
    20d0:	80 93 f2 00 	sts	0x00F2, r24
    20d4:	d8 01       	movw	r26, r16
    20d6:	12 96       	adiw	r26, 0x02	; 2
    20d8:	9c 91       	ld	r25, X
    20da:	22 0f       	add	r18, r18
    20dc:	22 0f       	add	r18, r18
    20de:	22 0f       	add	r18, r18
    20e0:	89 2f       	mov	r24, r25
    20e2:	82 95       	swap	r24
    20e4:	86 95       	lsr	r24
    20e6:	87 70       	andi	r24, 0x07	; 7
    20e8:	28 0f       	add	r18, r24
    20ea:	20 93 f1 00 	sts	0x00F1, r18
    20ee:	99 0f       	add	r25, r25
    20f0:	99 0f       	add	r25, r25
    20f2:	99 0f       	add	r25, r25
    20f4:	90 93 f0 00 	sts	0x00F0, r25
    20f8:	80 91 ef 00 	lds	r24, 0x00EF
    20fc:	80 61       	ori	r24, 0x10	; 16
    20fe:	16 c0       	rjmp	.+44     	; 0x212c <can_cmd+0x554>
          else              { Can_set_std_id(cmd->id.std);}
    2100:	d8 01       	movw	r26, r16
    2102:	12 96       	adiw	r26, 0x02	; 2
    2104:	2c 91       	ld	r18, X
    2106:	81 81       	ldd	r24, Z+1	; 0x01
    2108:	82 95       	swap	r24
    210a:	88 0f       	add	r24, r24
    210c:	80 7e       	andi	r24, 0xE0	; 224
    210e:	92 2f       	mov	r25, r18
    2110:	96 95       	lsr	r25
    2112:	96 95       	lsr	r25
    2114:	96 95       	lsr	r25
    2116:	89 0f       	add	r24, r25
    2118:	80 93 f3 00 	sts	0x00F3, r24
    211c:	22 95       	swap	r18
    211e:	22 0f       	add	r18, r18
    2120:	20 7e       	andi	r18, 0xE0	; 224
    2122:	20 93 f2 00 	sts	0x00F2, r18
    2126:	80 91 ef 00 	lds	r24, 0x00EF
    212a:	8f 7e       	andi	r24, 0xEF	; 239
    212c:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    2130:	8f ef       	ldi	r24, 0xFF	; 255
    2132:	9f ef       	ldi	r25, 0xFF	; 255
    2134:	af ef       	ldi	r26, 0xFF	; 255
    2136:	bf ef       	ldi	r27, 0xFF	; 255
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	9a 83       	std	Y+2, r25	; 0x02
    213c:	ab 83       	std	Y+3, r26	; 0x03
    213e:	bc 83       	std	Y+4, r27	; 0x04
    2140:	fe 01       	movw	r30, r28
    2142:	31 96       	adiw	r30, 0x01	; 1
    2144:	32 81       	ldd	r19, Z+2	; 0x02
    2146:	93 2f       	mov	r25, r19
    2148:	92 95       	swap	r25
    214a:	96 95       	lsr	r25
    214c:	97 70       	andi	r25, 0x07	; 7
    214e:	83 81       	ldd	r24, Z+3	; 0x03
    2150:	88 0f       	add	r24, r24
    2152:	88 0f       	add	r24, r24
    2154:	88 0f       	add	r24, r24
    2156:	98 0f       	add	r25, r24
    2158:	90 93 f7 00 	sts	0x00F7, r25
    215c:	21 81       	ldd	r18, Z+1	; 0x01
    215e:	82 2f       	mov	r24, r18
    2160:	82 95       	swap	r24
    2162:	86 95       	lsr	r24
    2164:	87 70       	andi	r24, 0x07	; 7
    2166:	33 0f       	add	r19, r19
    2168:	33 0f       	add	r19, r19
    216a:	33 0f       	add	r19, r19
    216c:	83 0f       	add	r24, r19
    216e:	80 93 f6 00 	sts	0x00F6, r24
    2172:	99 81       	ldd	r25, Y+1	; 0x01
    2174:	22 0f       	add	r18, r18
    2176:	22 0f       	add	r18, r18
    2178:	22 0f       	add	r18, r18
    217a:	89 2f       	mov	r24, r25
    217c:	82 95       	swap	r24
    217e:	86 95       	lsr	r24
    2180:	87 70       	andi	r24, 0x07	; 7
    2182:	28 0f       	add	r18, r24
    2184:	20 93 f5 00 	sts	0x00F5, r18
    2188:	99 0f       	add	r25, r25
    218a:	99 0f       	add	r25, r25
    218c:	99 0f       	add	r25, r25
    218e:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    2192:	80 91 ef 00 	lds	r24, 0x00EF
    2196:	f8 01       	movw	r30, r16
    2198:	96 81       	ldd	r25, Z+6	; 0x06
    219a:	89 2b       	or	r24, r25
    219c:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_rtrmsk();
    21a0:	80 91 f4 00 	lds	r24, 0x00F4
    21a4:	8b 7f       	andi	r24, 0xFB	; 251
    21a6:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_idemsk();
    21aa:	80 91 f4 00 	lds	r24, 0x00F4
    21ae:	81 60       	ori	r24, 0x01	; 1
    21b0:	80 93 f4 00 	sts	0x00F4, r24
          Can_config_rx();       
    21b4:	80 91 ef 00 	lds	r24, 0x00EF
    21b8:	8f 73       	andi	r24, 0x3F	; 63
    21ba:	80 93 ef 00 	sts	0x00EF, r24
    21be:	80 91 ef 00 	lds	r24, 0x00EF
    21c2:	80 68       	ori	r24, 0x80	; 128
    21c4:	53 ce       	rjmp	.-858    	; 0x1e6c <can_cmd+0x294>
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    21c6:	d8 01       	movw	r26, r16
    21c8:	1b 96       	adiw	r26, 0x0b	; 11
    21ca:	8c 91       	ld	r24, X
    21cc:	f8 01       	movw	r30, r16
    21ce:	32 96       	adiw	r30, 0x02	; 2
    21d0:	88 23       	and	r24, r24
    21d2:	61 f1       	breq	.+88     	; 0x222c <can_cmd+0x654>
    21d4:	32 81       	ldd	r19, Z+2	; 0x02
    21d6:	93 2f       	mov	r25, r19
    21d8:	92 95       	swap	r25
    21da:	96 95       	lsr	r25
    21dc:	97 70       	andi	r25, 0x07	; 7
    21de:	83 81       	ldd	r24, Z+3	; 0x03
    21e0:	88 0f       	add	r24, r24
    21e2:	88 0f       	add	r24, r24
    21e4:	88 0f       	add	r24, r24
    21e6:	98 0f       	add	r25, r24
    21e8:	90 93 f3 00 	sts	0x00F3, r25
    21ec:	21 81       	ldd	r18, Z+1	; 0x01
    21ee:	82 2f       	mov	r24, r18
    21f0:	82 95       	swap	r24
    21f2:	86 95       	lsr	r24
    21f4:	87 70       	andi	r24, 0x07	; 7
    21f6:	33 0f       	add	r19, r19
    21f8:	33 0f       	add	r19, r19
    21fa:	33 0f       	add	r19, r19
    21fc:	83 0f       	add	r24, r19
    21fe:	80 93 f2 00 	sts	0x00F2, r24
    2202:	f8 01       	movw	r30, r16
    2204:	92 81       	ldd	r25, Z+2	; 0x02
    2206:	22 0f       	add	r18, r18
    2208:	22 0f       	add	r18, r18
    220a:	22 0f       	add	r18, r18
    220c:	89 2f       	mov	r24, r25
    220e:	82 95       	swap	r24
    2210:	86 95       	lsr	r24
    2212:	87 70       	andi	r24, 0x07	; 7
    2214:	28 0f       	add	r18, r24
    2216:	20 93 f1 00 	sts	0x00F1, r18
    221a:	99 0f       	add	r25, r25
    221c:	99 0f       	add	r25, r25
    221e:	99 0f       	add	r25, r25
    2220:	90 93 f0 00 	sts	0x00F0, r25
    2224:	80 91 ef 00 	lds	r24, 0x00EF
    2228:	80 61       	ori	r24, 0x10	; 16
    222a:	16 c0       	rjmp	.+44     	; 0x2258 <can_cmd+0x680>
          else              { Can_set_std_id(cmd->id.std);}
    222c:	d8 01       	movw	r26, r16
    222e:	12 96       	adiw	r26, 0x02	; 2
    2230:	2c 91       	ld	r18, X
    2232:	81 81       	ldd	r24, Z+1	; 0x01
    2234:	82 95       	swap	r24
    2236:	88 0f       	add	r24, r24
    2238:	80 7e       	andi	r24, 0xE0	; 224
    223a:	92 2f       	mov	r25, r18
    223c:	96 95       	lsr	r25
    223e:	96 95       	lsr	r25
    2240:	96 95       	lsr	r25
    2242:	89 0f       	add	r24, r25
    2244:	80 93 f3 00 	sts	0x00F3, r24
    2248:	22 95       	swap	r18
    224a:	22 0f       	add	r18, r18
    224c:	20 7e       	andi	r18, 0xE0	; 224
    224e:	20 93 f2 00 	sts	0x00F2, r18
    2252:	80 91 ef 00 	lds	r24, 0x00EF
    2256:	8f 7e       	andi	r24, 0xEF	; 239
    2258:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    225c:	8f ef       	ldi	r24, 0xFF	; 255
    225e:	9f ef       	ldi	r25, 0xFF	; 255
    2260:	af ef       	ldi	r26, 0xFF	; 255
    2262:	bf ef       	ldi	r27, 0xFF	; 255
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	9a 83       	std	Y+2, r25	; 0x02
    2268:	ab 83       	std	Y+3, r26	; 0x03
    226a:	bc 83       	std	Y+4, r27	; 0x04
    226c:	fe 01       	movw	r30, r28
    226e:	31 96       	adiw	r30, 0x01	; 1
    2270:	32 81       	ldd	r19, Z+2	; 0x02
    2272:	93 2f       	mov	r25, r19
    2274:	92 95       	swap	r25
    2276:	96 95       	lsr	r25
    2278:	97 70       	andi	r25, 0x07	; 7
    227a:	83 81       	ldd	r24, Z+3	; 0x03
    227c:	88 0f       	add	r24, r24
    227e:	88 0f       	add	r24, r24
    2280:	88 0f       	add	r24, r24
    2282:	98 0f       	add	r25, r24
    2284:	90 93 f7 00 	sts	0x00F7, r25
    2288:	21 81       	ldd	r18, Z+1	; 0x01
    228a:	82 2f       	mov	r24, r18
    228c:	82 95       	swap	r24
    228e:	86 95       	lsr	r24
    2290:	87 70       	andi	r24, 0x07	; 7
    2292:	33 0f       	add	r19, r19
    2294:	33 0f       	add	r19, r19
    2296:	33 0f       	add	r19, r19
    2298:	83 0f       	add	r24, r19
    229a:	80 93 f6 00 	sts	0x00F6, r24
    229e:	99 81       	ldd	r25, Y+1	; 0x01
    22a0:	22 0f       	add	r18, r18
    22a2:	22 0f       	add	r18, r18
    22a4:	22 0f       	add	r18, r18
    22a6:	89 2f       	mov	r24, r25
    22a8:	82 95       	swap	r24
    22aa:	86 95       	lsr	r24
    22ac:	87 70       	andi	r24, 0x07	; 7
    22ae:	28 0f       	add	r18, r24
    22b0:	20 93 f5 00 	sts	0x00F5, r18
    22b4:	99 0f       	add	r25, r25
    22b6:	99 0f       	add	r25, r25
    22b8:	99 0f       	add	r25, r25
    22ba:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    22be:	80 91 ef 00 	lds	r24, 0x00EF
    22c2:	f8 01       	movw	r30, r16
    22c4:	96 81       	ldd	r25, Z+6	; 0x06
    22c6:	89 2b       	or	r24, r25
    22c8:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    22cc:	12 86       	std	Z+10, r1	; 0x0a
    22ce:	80 91 f4 00 	lds	r24, 0x00F4
    22d2:	84 60       	ori	r24, 0x04	; 4
    22d4:	80 93 f4 00 	sts	0x00F4, r24
    22d8:	80 91 f0 00 	lds	r24, 0x00F0
    22dc:	8b 7f       	andi	r24, 0xFB	; 251
    22de:	80 93 f0 00 	sts	0x00F0, r24
    22e2:	63 cf       	rjmp	.-314    	; 0x21aa <can_cmd+0x5d2>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    22e4:	d8 01       	movw	r26, r16
    22e6:	1b 96       	adiw	r26, 0x0b	; 11
    22e8:	8c 91       	ld	r24, X
    22ea:	f8 01       	movw	r30, r16
    22ec:	32 96       	adiw	r30, 0x02	; 2
    22ee:	88 23       	and	r24, r24
    22f0:	61 f1       	breq	.+88     	; 0x234a <can_cmd+0x772>
    22f2:	32 81       	ldd	r19, Z+2	; 0x02
    22f4:	93 2f       	mov	r25, r19
    22f6:	92 95       	swap	r25
    22f8:	96 95       	lsr	r25
    22fa:	97 70       	andi	r25, 0x07	; 7
    22fc:	83 81       	ldd	r24, Z+3	; 0x03
    22fe:	88 0f       	add	r24, r24
    2300:	88 0f       	add	r24, r24
    2302:	88 0f       	add	r24, r24
    2304:	98 0f       	add	r25, r24
    2306:	90 93 f3 00 	sts	0x00F3, r25
    230a:	21 81       	ldd	r18, Z+1	; 0x01
    230c:	82 2f       	mov	r24, r18
    230e:	82 95       	swap	r24
    2310:	86 95       	lsr	r24
    2312:	87 70       	andi	r24, 0x07	; 7
    2314:	33 0f       	add	r19, r19
    2316:	33 0f       	add	r19, r19
    2318:	33 0f       	add	r19, r19
    231a:	83 0f       	add	r24, r19
    231c:	80 93 f2 00 	sts	0x00F2, r24
    2320:	f8 01       	movw	r30, r16
    2322:	92 81       	ldd	r25, Z+2	; 0x02
    2324:	22 0f       	add	r18, r18
    2326:	22 0f       	add	r18, r18
    2328:	22 0f       	add	r18, r18
    232a:	89 2f       	mov	r24, r25
    232c:	82 95       	swap	r24
    232e:	86 95       	lsr	r24
    2330:	87 70       	andi	r24, 0x07	; 7
    2332:	28 0f       	add	r18, r24
    2334:	20 93 f1 00 	sts	0x00F1, r18
    2338:	99 0f       	add	r25, r25
    233a:	99 0f       	add	r25, r25
    233c:	99 0f       	add	r25, r25
    233e:	90 93 f0 00 	sts	0x00F0, r25
    2342:	80 91 ef 00 	lds	r24, 0x00EF
    2346:	80 61       	ori	r24, 0x10	; 16
    2348:	16 c0       	rjmp	.+44     	; 0x2376 <can_cmd+0x79e>
          else              { Can_set_std_id(cmd->id.std);}
    234a:	d8 01       	movw	r26, r16
    234c:	12 96       	adiw	r26, 0x02	; 2
    234e:	2c 91       	ld	r18, X
    2350:	81 81       	ldd	r24, Z+1	; 0x01
    2352:	82 95       	swap	r24
    2354:	88 0f       	add	r24, r24
    2356:	80 7e       	andi	r24, 0xE0	; 224
    2358:	92 2f       	mov	r25, r18
    235a:	96 95       	lsr	r25
    235c:	96 95       	lsr	r25
    235e:	96 95       	lsr	r25
    2360:	89 0f       	add	r24, r25
    2362:	80 93 f3 00 	sts	0x00F3, r24
    2366:	22 95       	swap	r18
    2368:	22 0f       	add	r18, r18
    236a:	20 7e       	andi	r18, 0xE0	; 224
    236c:	20 93 f2 00 	sts	0x00F2, r18
    2370:	80 91 ef 00 	lds	r24, 0x00EF
    2374:	8f 7e       	andi	r24, 0xEF	; 239
    2376:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    237a:	8f ef       	ldi	r24, 0xFF	; 255
    237c:	9f ef       	ldi	r25, 0xFF	; 255
    237e:	af ef       	ldi	r26, 0xFF	; 255
    2380:	bf ef       	ldi	r27, 0xFF	; 255
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	9a 83       	std	Y+2, r25	; 0x02
    2386:	ab 83       	std	Y+3, r26	; 0x03
    2388:	bc 83       	std	Y+4, r27	; 0x04
    238a:	fe 01       	movw	r30, r28
    238c:	31 96       	adiw	r30, 0x01	; 1
    238e:	32 81       	ldd	r19, Z+2	; 0x02
    2390:	93 2f       	mov	r25, r19
    2392:	92 95       	swap	r25
    2394:	96 95       	lsr	r25
    2396:	97 70       	andi	r25, 0x07	; 7
    2398:	83 81       	ldd	r24, Z+3	; 0x03
    239a:	88 0f       	add	r24, r24
    239c:	88 0f       	add	r24, r24
    239e:	88 0f       	add	r24, r24
    23a0:	98 0f       	add	r25, r24
    23a2:	90 93 f7 00 	sts	0x00F7, r25
    23a6:	21 81       	ldd	r18, Z+1	; 0x01
    23a8:	82 2f       	mov	r24, r18
    23aa:	82 95       	swap	r24
    23ac:	86 95       	lsr	r24
    23ae:	87 70       	andi	r24, 0x07	; 7
    23b0:	33 0f       	add	r19, r19
    23b2:	33 0f       	add	r19, r19
    23b4:	33 0f       	add	r19, r19
    23b6:	83 0f       	add	r24, r19
    23b8:	80 93 f6 00 	sts	0x00F6, r24
    23bc:	99 81       	ldd	r25, Y+1	; 0x01
    23be:	22 0f       	add	r18, r18
    23c0:	22 0f       	add	r18, r18
    23c2:	22 0f       	add	r18, r18
    23c4:	89 2f       	mov	r24, r25
    23c6:	82 95       	swap	r24
    23c8:	86 95       	lsr	r24
    23ca:	87 70       	andi	r24, 0x07	; 7
    23cc:	28 0f       	add	r18, r24
    23ce:	20 93 f5 00 	sts	0x00F5, r18
    23d2:	99 0f       	add	r25, r25
    23d4:	99 0f       	add	r25, r25
    23d6:	99 0f       	add	r25, r25
    23d8:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    23dc:	80 91 ef 00 	lds	r24, 0x00EF
    23e0:	f8 01       	movw	r30, r16
    23e2:	96 81       	ldd	r25, Z+6	; 0x06
    23e4:	89 2b       	or	r24, r25
    23e6:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	82 87       	std	Z+10, r24	; 0x0a
    23ee:	80 91 f4 00 	lds	r24, 0x00F4
    23f2:	84 60       	ori	r24, 0x04	; 4
    23f4:	80 93 f4 00 	sts	0x00F4, r24
    23f8:	80 91 f0 00 	lds	r24, 0x00F0
    23fc:	84 60       	ori	r24, 0x04	; 4
    23fe:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_rplv();
    2402:	80 91 ef 00 	lds	r24, 0x00EF
    2406:	8f 7d       	andi	r24, 0xDF	; 223
    2408:	80 93 ef 00 	sts	0x00EF, r24
    240c:	ce ce       	rjmp	.-612    	; 0x21aa <can_cmd+0x5d2>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    240e:	d8 01       	movw	r26, r16
    2410:	17 96       	adiw	r26, 0x07	; 7
    2412:	ed 91       	ld	r30, X+
    2414:	fc 91       	ld	r31, X
    2416:	18 97       	sbiw	r26, 0x08	; 8
    2418:	e9 0f       	add	r30, r25
    241a:	f1 1d       	adc	r31, r1
    241c:	80 81       	ld	r24, Z
    241e:	80 93 fa 00 	sts	0x00FA, r24
    2422:	9f 5f       	subi	r25, 0xFF	; 255
    2424:	94 17       	cp	r25, r20
    2426:	98 f3       	brcs	.-26     	; 0x240e <can_cmd+0x836>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    2428:	19 82       	std	Y+1, r1	; 0x01
    242a:	1a 82       	std	Y+2, r1	; 0x02
    242c:	1b 82       	std	Y+3, r1	; 0x03
    242e:	1c 82       	std	Y+4, r1	; 0x04
    2430:	fe 01       	movw	r30, r28
    2432:	31 96       	adiw	r30, 0x01	; 1
    2434:	32 81       	ldd	r19, Z+2	; 0x02
    2436:	93 2f       	mov	r25, r19
    2438:	92 95       	swap	r25
    243a:	96 95       	lsr	r25
    243c:	97 70       	andi	r25, 0x07	; 7
    243e:	83 81       	ldd	r24, Z+3	; 0x03
    2440:	88 0f       	add	r24, r24
    2442:	88 0f       	add	r24, r24
    2444:	88 0f       	add	r24, r24
    2446:	98 0f       	add	r25, r24
    2448:	90 93 f7 00 	sts	0x00F7, r25
    244c:	21 81       	ldd	r18, Z+1	; 0x01
    244e:	82 2f       	mov	r24, r18
    2450:	82 95       	swap	r24
    2452:	86 95       	lsr	r24
    2454:	87 70       	andi	r24, 0x07	; 7
    2456:	33 0f       	add	r19, r19
    2458:	33 0f       	add	r19, r19
    245a:	33 0f       	add	r19, r19
    245c:	83 0f       	add	r24, r19
    245e:	80 93 f6 00 	sts	0x00F6, r24
    2462:	99 81       	ldd	r25, Y+1	; 0x01
    2464:	22 0f       	add	r18, r18
    2466:	22 0f       	add	r18, r18
    2468:	22 0f       	add	r18, r18
    246a:	89 2f       	mov	r24, r25
    246c:	82 95       	swap	r24
    246e:	86 95       	lsr	r24
    2470:	87 70       	andi	r24, 0x07	; 7
    2472:	28 0f       	add	r18, r24
    2474:	20 93 f5 00 	sts	0x00F5, r18
    2478:	99 0f       	add	r25, r25
    247a:	99 0f       	add	r25, r25
    247c:	99 0f       	add	r25, r25
    247e:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    2482:	80 91 ef 00 	lds	r24, 0x00EF
    2486:	48 2b       	or	r20, r24
    2488:	40 93 ef 00 	sts	0x00EF, r20
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	f8 01       	movw	r30, r16
    2490:	82 87       	std	Z+10, r24	; 0x0a
    2492:	80 91 f4 00 	lds	r24, 0x00F4
    2496:	84 60       	ori	r24, 0x04	; 4
    2498:	80 93 f4 00 	sts	0x00F4, r24
    249c:	80 91 f0 00 	lds	r24, 0x00F0
    24a0:	84 60       	ori	r24, 0x04	; 4
    24a2:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_rplv();
    24a6:	80 91 ef 00 	lds	r24, 0x00EF
    24aa:	80 62       	ori	r24, 0x20	; 32
    24ac:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_idemsk();
    24b0:	80 91 f4 00 	lds	r24, 0x00F4
    24b4:	8e 7f       	andi	r24, 0xFE	; 254
    24b6:	7c ce       	rjmp	.-776    	; 0x21b0 <can_cmd+0x5d8>
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    24b8:	d8 01       	movw	r26, r16
    24ba:	1b 96       	adiw	r26, 0x0b	; 11
    24bc:	8c 91       	ld	r24, X
    24be:	f8 01       	movw	r30, r16
    24c0:	32 96       	adiw	r30, 0x02	; 2
    24c2:	88 23       	and	r24, r24
    24c4:	91 f1       	breq	.+100    	; 0x252a <can_cmd+0x952>
    24c6:	32 81       	ldd	r19, Z+2	; 0x02
    24c8:	93 2f       	mov	r25, r19
    24ca:	92 95       	swap	r25
    24cc:	96 95       	lsr	r25
    24ce:	97 70       	andi	r25, 0x07	; 7
    24d0:	83 81       	ldd	r24, Z+3	; 0x03
    24d2:	88 0f       	add	r24, r24
    24d4:	88 0f       	add	r24, r24
    24d6:	88 0f       	add	r24, r24
    24d8:	98 0f       	add	r25, r24
    24da:	90 93 f3 00 	sts	0x00F3, r25
    24de:	21 81       	ldd	r18, Z+1	; 0x01
    24e0:	82 2f       	mov	r24, r18
    24e2:	82 95       	swap	r24
    24e4:	86 95       	lsr	r24
    24e6:	87 70       	andi	r24, 0x07	; 7
    24e8:	33 0f       	add	r19, r19
    24ea:	33 0f       	add	r19, r19
    24ec:	33 0f       	add	r19, r19
    24ee:	83 0f       	add	r24, r19
    24f0:	80 93 f2 00 	sts	0x00F2, r24
    24f4:	f8 01       	movw	r30, r16
    24f6:	92 81       	ldd	r25, Z+2	; 0x02
    24f8:	22 0f       	add	r18, r18
    24fa:	22 0f       	add	r18, r18
    24fc:	22 0f       	add	r18, r18
    24fe:	89 2f       	mov	r24, r25
    2500:	82 95       	swap	r24
    2502:	86 95       	lsr	r24
    2504:	87 70       	andi	r24, 0x07	; 7
    2506:	28 0f       	add	r18, r24
    2508:	20 93 f1 00 	sts	0x00F1, r18
    250c:	99 0f       	add	r25, r25
    250e:	99 0f       	add	r25, r25
    2510:	99 0f       	add	r25, r25
    2512:	90 93 f0 00 	sts	0x00F0, r25
    2516:	80 91 ef 00 	lds	r24, 0x00EF
    251a:	80 61       	ori	r24, 0x10	; 16
    251c:	80 93 ef 00 	sts	0x00EF, r24
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2520:	d8 01       	movw	r26, r16
    2522:	16 96       	adiw	r26, 0x06	; 6
    2524:	4c 91       	ld	r20, X
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	22 c0       	rjmp	.+68     	; 0x256e <can_cmd+0x996>
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    252a:	d8 01       	movw	r26, r16
    252c:	12 96       	adiw	r26, 0x02	; 2
    252e:	2c 91       	ld	r18, X
    2530:	81 81       	ldd	r24, Z+1	; 0x01
    2532:	82 95       	swap	r24
    2534:	88 0f       	add	r24, r24
    2536:	80 7e       	andi	r24, 0xE0	; 224
    2538:	92 2f       	mov	r25, r18
    253a:	96 95       	lsr	r25
    253c:	96 95       	lsr	r25
    253e:	96 95       	lsr	r25
    2540:	89 0f       	add	r24, r25
    2542:	80 93 f3 00 	sts	0x00F3, r24
    2546:	22 95       	swap	r18
    2548:	22 0f       	add	r18, r18
    254a:	20 7e       	andi	r18, 0xE0	; 224
    254c:	20 93 f2 00 	sts	0x00F2, r18
    2550:	80 91 ef 00 	lds	r24, 0x00EF
    2554:	8f 7e       	andi	r24, 0xEF	; 239
    2556:	e2 cf       	rjmp	.-60     	; 0x251c <can_cmd+0x944>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2558:	d8 01       	movw	r26, r16
    255a:	17 96       	adiw	r26, 0x07	; 7
    255c:	ed 91       	ld	r30, X+
    255e:	fc 91       	ld	r31, X
    2560:	18 97       	sbiw	r26, 0x08	; 8
    2562:	e9 0f       	add	r30, r25
    2564:	f1 1d       	adc	r31, r1
    2566:	80 81       	ld	r24, Z
    2568:	80 93 fa 00 	sts	0x00FA, r24
    256c:	9f 5f       	subi	r25, 0xFF	; 255
    256e:	94 17       	cp	r25, r20
    2570:	98 f3       	brcs	.-26     	; 0x2558 <can_cmd+0x980>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    2572:	8f ef       	ldi	r24, 0xFF	; 255
    2574:	9f ef       	ldi	r25, 0xFF	; 255
    2576:	af ef       	ldi	r26, 0xFF	; 255
    2578:	bf ef       	ldi	r27, 0xFF	; 255
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	ab 83       	std	Y+3, r26	; 0x03
    2580:	bc 83       	std	Y+4, r27	; 0x04
    2582:	fe 01       	movw	r30, r28
    2584:	31 96       	adiw	r30, 0x01	; 1
    2586:	32 81       	ldd	r19, Z+2	; 0x02
    2588:	93 2f       	mov	r25, r19
    258a:	92 95       	swap	r25
    258c:	96 95       	lsr	r25
    258e:	97 70       	andi	r25, 0x07	; 7
    2590:	83 81       	ldd	r24, Z+3	; 0x03
    2592:	88 0f       	add	r24, r24
    2594:	88 0f       	add	r24, r24
    2596:	88 0f       	add	r24, r24
    2598:	98 0f       	add	r25, r24
    259a:	90 93 f7 00 	sts	0x00F7, r25
    259e:	21 81       	ldd	r18, Z+1	; 0x01
    25a0:	82 2f       	mov	r24, r18
    25a2:	82 95       	swap	r24
    25a4:	86 95       	lsr	r24
    25a6:	87 70       	andi	r24, 0x07	; 7
    25a8:	33 0f       	add	r19, r19
    25aa:	33 0f       	add	r19, r19
    25ac:	33 0f       	add	r19, r19
    25ae:	83 0f       	add	r24, r19
    25b0:	80 93 f6 00 	sts	0x00F6, r24
    25b4:	99 81       	ldd	r25, Y+1	; 0x01
    25b6:	22 0f       	add	r18, r18
    25b8:	22 0f       	add	r18, r18
    25ba:	22 0f       	add	r18, r18
    25bc:	89 2f       	mov	r24, r25
    25be:	82 95       	swap	r24
    25c0:	86 95       	lsr	r24
    25c2:	87 70       	andi	r24, 0x07	; 7
    25c4:	28 0f       	add	r18, r24
    25c6:	20 93 f5 00 	sts	0x00F5, r18
    25ca:	99 0f       	add	r25, r25
    25cc:	99 0f       	add	r25, r25
    25ce:	99 0f       	add	r25, r25
    25d0:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    25d4:	80 91 ef 00 	lds	r24, 0x00EF
    25d8:	48 2b       	or	r20, r24
    25da:	40 93 ef 00 	sts	0x00EF, r20
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	f8 01       	movw	r30, r16
    25e2:	82 87       	std	Z+10, r24	; 0x0a
    25e4:	80 91 f4 00 	lds	r24, 0x00F4
    25e8:	84 60       	ori	r24, 0x04	; 4
    25ea:	80 93 f4 00 	sts	0x00F4, r24
    25ee:	80 91 f0 00 	lds	r24, 0x00F0
    25f2:	84 60       	ori	r24, 0x04	; 4
    25f4:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_rplv();
    25f8:	80 91 ef 00 	lds	r24, 0x00EF
    25fc:	80 62       	ori	r24, 0x20	; 32
    25fe:	04 cf       	rjmp	.-504    	; 0x2408 <can_cmd+0x830>
          Can_config_rx();       
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    2600:	d8 01       	movw	r26, r16
    2602:	19 96       	adiw	r26, 0x09	; 9
    2604:	1c 92       	st	X, r1
    2606:	34 cc       	rjmp	.-1944   	; 0x1e70 <can_cmd+0x298>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    2608:	8f e1       	ldi	r24, 0x1F	; 31
    260a:	f8 01       	movw	r30, r16
    260c:	81 87       	std	Z+9, r24	; 0x09
    260e:	8f ef       	ldi	r24, 0xFF	; 255
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	08 95       	ret

00002622 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U8 mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
    2622:	0e 94 de 14 	call	0x29bc	; 0x29bc <can_fixed_baudrate>
    2626:	88 23       	and	r24, r24
    2628:	41 f0       	breq	.+16     	; 0x263a <can_init+0x18>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    262a:	0e 94 1e 13 	call	0x263c	; 0x263c <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
    262e:	80 91 d8 00 	lds	r24, 0x00D8
    2632:	82 60       	ori	r24, 0x02	; 2
    2634:	80 93 d8 00 	sts	0x00D8, r24
    2638:	81 e0       	ldi	r24, 0x01	; 1
    return (1);
}
    263a:	08 95       	ret

0000263c <can_clear_all_mob>:
//! @param none
//!
//! @return none
//------------------------------------------------------------------------------
void can_clear_all_mob(void)
{
    263c:	90 e0       	ldi	r25, 0x00	; 0
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
    263e:	89 2f       	mov	r24, r25
    2640:	82 95       	swap	r24
    2642:	80 7f       	andi	r24, 0xF0	; 240
    2644:	80 93 ed 00 	sts	0x00ED, r24
    2648:	ee ee       	ldi	r30, 0xEE	; 238
    264a:	f0 e0       	ldi	r31, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
    264c:	11 92       	st	Z+, r1
    264e:	e8 3f       	cpi	r30, 0xF8	; 248
    2650:	f1 05       	cpc	r31, r1
    2652:	e1 f7       	brne	.-8      	; 0x264c <can_clear_all_mob+0x10>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    2654:	9f 5f       	subi	r25, 0xFF	; 255
    2656:	9f 30       	cpi	r25, 0x0F	; 15
    2658:	91 f7       	brne	.-28     	; 0x263e <can_clear_all_mob+0x2>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
    265a:	08 95       	ret

0000265c <can_get_mob_free>:
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    265c:	20 91 ed 00 	lds	r18, 0x00ED
    2660:	90 e0       	ldi	r25, 0x00	; 0
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
    2662:	89 2f       	mov	r24, r25
    2664:	82 95       	swap	r24
    2666:	80 7f       	andi	r24, 0xF0	; 240
    2668:	80 93 ed 00 	sts	0x00ED, r24
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    266c:	80 91 ef 00 	lds	r24, 0x00EF
    2670:	80 7c       	andi	r24, 0xC0	; 192
    2672:	19 f4       	brne	.+6      	; 0x267a <can_get_mob_free+0x1e>
        {
            CANPAGE = page_saved;
    2674:	20 93 ed 00 	sts	0x00ED, r18
    2678:	06 c0       	rjmp	.+12     	; 0x2686 <can_get_mob_free+0x2a>
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    267a:	9f 5f       	subi	r25, 0xFF	; 255
    267c:	9f 30       	cpi	r25, 0x0F	; 15
    267e:	89 f7       	brne	.-30     	; 0x2662 <can_get_mob_free+0x6>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    2680:	20 93 ed 00 	sts	0x00ED, r18
    2684:	9f ef       	ldi	r25, 0xFF	; 255
    return (NO_MOB);
}
    2686:	89 2f       	mov	r24, r25
    2688:	08 95       	ret

0000268a <can_get_mob_status>:
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    268a:	80 91 ef 00 	lds	r24, 0x00EF
    268e:	80 7c       	andi	r24, 0xC0	; 192
    2690:	11 f4       	brne	.+4      	; 0x2696 <can_get_mob_status+0xc>
    2692:	8f ef       	ldi	r24, 0xFF	; 255
    2694:	08 95       	ret

    canstmob_copy = CANSTMOB; // Copy for test integrity
    2696:	90 91 ee 00 	lds	r25, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    269a:	89 2f       	mov	r24, r25
    269c:	80 7e       	andi	r24, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
    269e:	80 32       	cpi	r24, 0x20	; 32
    26a0:	31 f0       	breq	.+12     	; 0x26ae <can_get_mob_status+0x24>
    26a2:	80 34       	cpi	r24, 0x40	; 64
    26a4:	21 f0       	breq	.+8      	; 0x26ae <can_get_mob_status+0x24>
    26a6:	80 3a       	cpi	r24, 0xA0	; 160
    26a8:	11 f0       	breq	.+4      	; 0x26ae <can_get_mob_status+0x24>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
    26aa:	89 2f       	mov	r24, r25
    26ac:	8f 71       	andi	r24, 0x1F	; 31
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
    26ae:	08 95       	ret

000026b0 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    26b0:	ac 01       	movw	r20, r24
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	06 c0       	rjmp	.+12     	; 0x26c2 <can_get_data+0x12>
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    {
        *(p_can_message_data + data_index) = CANMSG;
    26b6:	80 91 fa 00 	lds	r24, 0x00FA
    26ba:	e4 0f       	add	r30, r20
    26bc:	f5 1f       	adc	r31, r21
    26be:	80 83       	st	Z, r24
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    26c0:	2f 5f       	subi	r18, 0xFF	; 255
    26c2:	80 91 ef 00 	lds	r24, 0x00EF
    26c6:	e2 2f       	mov	r30, r18
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	8f 70       	andi	r24, 0x0F	; 15
    26ce:	90 70       	andi	r25, 0x00	; 0
    26d0:	e8 17       	cp	r30, r24
    26d2:	f9 07       	cpc	r31, r25
    26d4:	84 f3       	brlt	.-32     	; 0x26b6 <can_get_data+0x6>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
    26d6:	08 95       	ret

000026d8 <can_auto_baudrate>:
//! @return Baudrate Status
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed
//------------------------------------------------------------------------------
U8 can_auto_baudrate (U8 mode)
{
    26d8:	9f 92       	push	r9
    26da:	af 92       	push	r10
    26dc:	bf 92       	push	r11
    26de:	cf 92       	push	r12
    26e0:	df 92       	push	r13
    26e2:	ef 92       	push	r14
    26e4:	ff 92       	push	r15
    26e6:	0f 93       	push	r16
    26e8:	1f 93       	push	r17
    conf_index = 0;
    bt_not_found = 1;

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    26ea:	88 23       	and	r24, r24
    26ec:	61 f4       	brne	.+24     	; 0x2706 <can_auto_baudrate+0x2e>
    26ee:	dd 24       	eor	r13, r13
    26f0:	d3 94       	inc	r13
    26f2:	b3 e0       	ldi	r27, 0x03	; 3
    26f4:	a8 e0       	ldi	r26, 0x08	; 8
    26f6:	62 e0       	ldi	r22, 0x02	; 2
    26f8:	72 e0       	ldi	r23, 0x02	; 2
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	11 e0       	ldi	r17, 0x01	; 1
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	ff 24       	eor	r15, r15
    2702:	f3 94       	inc	r15
    2704:	54 c0       	rjmp	.+168    	; 0x27ae <can_auto_baudrate+0xd6>
        try_conf = 1;       //! Try this configuration
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
    2706:	80 91 e2 00 	lds	r24, 0x00E2
    270a:	8e 77       	andi	r24, 0x7E	; 126
    270c:	19 f4       	brne	.+6      	; 0x2714 <can_auto_baudrate+0x3c>
    270e:	dd 24       	eor	r13, r13
    2710:	d3 94       	inc	r13
    2712:	09 c0       	rjmp	.+18     	; 0x2726 <can_auto_baudrate+0x4e>
    2714:	80 91 e2 00 	lds	r24, 0x00E2
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	8e 77       	andi	r24, 0x7E	; 126
    271c:	90 70       	andi	r25, 0x00	; 0
    271e:	95 95       	asr	r25
    2720:	87 95       	ror	r24
    2722:	d8 2e       	mov	r13, r24
    2724:	d3 94       	inc	r13
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
    2726:	80 91 e3 00 	lds	r24, 0x00E3
    272a:	8e 70       	andi	r24, 0x0E	; 14
    272c:	11 f4       	brne	.+4      	; 0x2732 <can_auto_baudrate+0x5a>
    272e:	b1 e0       	ldi	r27, 0x01	; 1
    2730:	09 c0       	rjmp	.+18     	; 0x2744 <can_auto_baudrate+0x6c>
    2732:	80 91 e3 00 	lds	r24, 0x00E3
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	8e 70       	andi	r24, 0x0E	; 14
    273a:	90 70       	andi	r25, 0x00	; 0
    273c:	95 95       	asr	r25
    273e:	87 95       	ror	r24
    2740:	b8 2f       	mov	r27, r24
    2742:	bf 5f       	subi	r27, 0xFF	; 255
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
    2744:	80 91 e4 00 	lds	r24, 0x00E4
    2748:	8e 70       	andi	r24, 0x0E	; 14
    274a:	83 30       	cpi	r24, 0x03	; 3
    274c:	10 f4       	brcc	.+4      	; 0x2752 <can_auto_baudrate+0x7a>
    274e:	62 e0       	ldi	r22, 0x02	; 2
    2750:	09 c0       	rjmp	.+18     	; 0x2764 <can_auto_baudrate+0x8c>
    2752:	80 91 e4 00 	lds	r24, 0x00E4
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	8e 70       	andi	r24, 0x0E	; 14
    275a:	90 70       	andi	r25, 0x00	; 0
    275c:	95 95       	asr	r25
    275e:	87 95       	ror	r24
    2760:	68 2f       	mov	r22, r24
    2762:	6f 5f       	subi	r22, 0xFF	; 255
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
    2764:	80 91 e4 00 	lds	r24, 0x00E4
    2768:	80 77       	andi	r24, 0x70	; 112
    276a:	81 31       	cpi	r24, 0x11	; 17
    276c:	10 f4       	brcc	.+4      	; 0x2772 <can_auto_baudrate+0x9a>
    276e:	72 e0       	ldi	r23, 0x02	; 2
    2770:	0c c0       	rjmp	.+24     	; 0x278a <can_auto_baudrate+0xb2>
    2772:	80 91 e4 00 	lds	r24, 0x00E4
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	80 77       	andi	r24, 0x70	; 112
    277a:	90 70       	andi	r25, 0x00	; 0
    277c:	24 e0       	ldi	r18, 0x04	; 4
    277e:	95 95       	asr	r25
    2780:	87 95       	ror	r24
    2782:	2a 95       	dec	r18
    2784:	e1 f7       	brne	.-8      	; 0x277e <can_auto_baudrate+0xa6>
    2786:	78 2f       	mov	r23, r24
    2788:	7f 5f       	subi	r23, 0xFF	; 255
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
    278a:	8b 2f       	mov	r24, r27
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	86 0f       	add	r24, r22
    2790:	91 1d       	adc	r25, r1
    2792:	87 0f       	add	r24, r23
    2794:	91 1d       	adc	r25, r1
    2796:	08 97       	sbiw	r24, 0x08	; 8
    2798:	14 f4       	brge	.+4      	; 0x279e <can_auto_baudrate+0xc6>
    279a:	a8 e0       	ldi	r26, 0x08	; 8
    279c:	04 c0       	rjmp	.+8      	; 0x27a6 <can_auto_baudrate+0xce>
    279e:	ab 2f       	mov	r26, r27
    27a0:	af 5f       	subi	r26, 0xFF	; 255
    27a2:	a6 0f       	add	r26, r22
    27a4:	a7 0f       	add	r26, r23
    27a6:	51 e0       	ldi	r21, 0x01	; 1
    27a8:	10 e0       	ldi	r17, 0x00	; 0
    27aa:	41 e0       	ldi	r20, 0x01	; 1
    27ac:	ff 24       	eor	r15, r15
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    {
        Can_set_mob(u8_temp0);  //! Page index
    27b0:	89 2f       	mov	r24, r25
    27b2:	82 95       	swap	r24
    27b4:	80 7f       	andi	r24, 0xF0	; 240
    27b6:	80 93 ed 00 	sts	0x00ED, r24
    27ba:	ee ee       	ldi	r30, 0xEE	; 238
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
        Can_clear_mob();        //! All MOb Registers = 0x00
    27be:	11 92       	st	Z+, r1
    27c0:	e8 3f       	cpi	r30, 0xF8	; 248
    27c2:	f1 05       	cpc	r31, r1
    27c4:	e1 f7       	brne	.-8      	; 0x27be <can_auto_baudrate+0xe6>
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    27c6:	9f 5f       	subi	r25, 0xFF	; 255
    27c8:	9f 30       	cpi	r25, 0x0F	; 15
    27ca:	91 f7       	brne	.-28     	; 0x27b0 <can_auto_baudrate+0xd8>
    27cc:	ee 24       	eor	r14, r14
    27ce:	e0 e0       	ldi	r30, 0x00	; 0
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	cc 24       	eor	r12, r12
            CANTCON = (U8)(conf_index >> 3);

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
    27d4:	90 e8       	ldi	r25, 0x80	; 128
    27d6:	a9 2e       	mov	r10, r25

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
    27d8:	8a e0       	ldi	r24, 0x0A	; 10
    27da:	98 2e       	mov	r9, r24
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    27dc:	bb 24       	eor	r11, r11
    27de:	ba 94       	dec	r11
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	f8 16       	cp	r15, r24
    27e4:	09 f0       	breq	.+2      	; 0x27e8 <can_auto_baudrate+0x110>
    27e6:	43 c0       	rjmp	.+134    	; 0x286e <can_auto_baudrate+0x196>
        {
            Can_reset();
    27e8:	f0 92 d8 00 	sts	0x00D8, r15
            conf_index++;
    27ec:	31 96       	adiw	r30, 0x01	; 1
            ovrtim_flag=0;

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
    27ee:	8d 2d       	mov	r24, r13
    27f0:	81 50       	subi	r24, 0x01	; 1
    27f2:	88 0f       	add	r24, r24
    27f4:	80 93 e2 00 	sts	0x00E2, r24
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
    27f8:	27 2f       	mov	r18, r23
    27fa:	26 95       	lsr	r18
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	21 50       	subi	r18, 0x01	; 1
    2800:	30 40       	sbci	r19, 0x00	; 0
    2802:	05 e0       	ldi	r16, 0x05	; 5
    2804:	22 0f       	add	r18, r18
    2806:	33 1f       	adc	r19, r19
    2808:	0a 95       	dec	r16
    280a:	e1 f7       	brne	.-8      	; 0x2804 <can_auto_baudrate+0x12c>
    280c:	8b 2f       	mov	r24, r27
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	28 2b       	or	r18, r24
    2818:	20 93 e3 00 	sts	0x00E3, r18
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
    281c:	27 2f       	mov	r18, r23
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	21 50       	subi	r18, 0x01	; 1
    2822:	30 40       	sbci	r19, 0x00	; 0
    2824:	04 e0       	ldi	r16, 0x04	; 4
    2826:	22 0f       	add	r18, r18
    2828:	33 1f       	adc	r19, r19
    282a:	0a 95       	dec	r16
    282c:	e1 f7       	brne	.-8      	; 0x2826 <can_auto_baudrate+0x14e>
    282e:	86 2f       	mov	r24, r22
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	28 2b       	or	r18, r24
    283a:	21 60       	ori	r18, 0x01	; 1
    283c:	20 93 e4 00 	sts	0x00E4, r18

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (U8)(conf_index >> 3);
    2840:	cf 01       	movw	r24, r30
    2842:	23 e0       	ldi	r18, 0x03	; 3
    2844:	96 95       	lsr	r25
    2846:	87 95       	ror	r24
    2848:	2a 95       	dec	r18
    284a:	e1 f7       	brne	.-8      	; 0x2844 <can_auto_baudrate+0x16c>
    284c:	80 93 e5 00 	sts	0x00E5, r24

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
    2850:	10 92 ed 00 	sts	0x00ED, r1
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
    2854:	10 92 ee 00 	sts	0x00EE, r1
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
    2858:	a0 92 ef 00 	sts	0x00EF, r10

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
    285c:	90 92 d8 00 	sts	0x00D8, r9
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
    2860:	80 91 d9 00 	lds	r24, 0x00D9
    2864:	82 ff       	sbrs	r24, 2
    2866:	fc cf       	rjmp	.-8      	; 0x2860 <can_auto_baudrate+0x188>
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    2868:	b0 92 da 00 	sts	0x00DA, r11
    286c:	ee 24       	eor	r14, r14
    286e:	01 e0       	ldi	r16, 0x01	; 1
    2870:	3a c0       	rjmp	.+116    	; 0x28e6 <can_auto_baudrate+0x20e>
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
        {
            u8_temp0 = CANSTMOB;
    2872:	80 91 ee 00 	lds	r24, 0x00EE
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	85 ff       	sbrs	r24, 5
    287a:	10 c0       	rjmp	.+32     	; 0x289c <can_auto_baudrate+0x1c4>
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                bt_performed = 1;   //! Return flag = TRUE
                DISABLE_MOB;        //! Disable MOb-0
    287c:	80 91 ef 00 	lds	r24, 0x00EF
    2880:	8f 73       	andi	r24, 0x3F	; 63
    2882:	80 93 ef 00 	sts	0x00EF, r24
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    2886:	10 92 d8 00 	sts	0x00D8, r1
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    288a:	80 91 d9 00 	lds	r24, 0x00D9
    288e:	82 fd       	sbrc	r24, 2
    2890:	fc cf       	rjmp	.-8      	; 0x288a <can_auto_baudrate+0x1b2>
    2892:	00 e0       	ldi	r16, 0x00	; 0
    2894:	10 e0       	ldi	r17, 0x00	; 0
    2896:	cc 24       	eor	r12, r12
    2898:	c3 94       	inc	r12
    289a:	81 c0       	rjmp	.+258    	; 0x299e <can_auto_baudrate+0x2c6>
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
    289c:	8f 71       	andi	r24, 0x1F	; 31
    289e:	90 70       	andi	r25, 0x00	; 0
    28a0:	89 2b       	or	r24, r25
    28a2:	11 f0       	breq	.+4      	; 0x28a8 <can_auto_baudrate+0x1d0>
    28a4:	10 e0       	ldi	r17, 0x00	; 0
    28a6:	41 e0       	ldi	r20, 0x01	; 1
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                }

                u8_temp0 = CANGIT;
    28a8:	80 91 da 00 	lds	r24, 0x00DA

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
    28ac:	28 2f       	mov	r18, r24
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	85 ff       	sbrs	r24, 5
    28b2:	11 c0       	rjmp	.+34     	; 0x28d6 <can_auto_baudrate+0x1fe>
                {
                    if (ovrtim_flag==0)
    28b4:	ee 20       	and	r14, r14
    28b6:	41 f4       	brne	.+16     	; 0x28c8 <can_auto_baudrate+0x1f0>
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    28b8:	80 91 da 00 	lds	r24, 0x00DA
    28bc:	80 62       	ori	r24, 0x20	; 32
    28be:	80 93 da 00 	sts	0x00DA, r24
    28c2:	ee 24       	eor	r14, r14
    28c4:	e3 94       	inc	r14
    28c6:	07 c0       	rjmp	.+14     	; 0x28d6 <can_auto_baudrate+0x1fe>
                        ovrtim_flag++;
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    28c8:	80 91 da 00 	lds	r24, 0x00DA
    28cc:	80 62       	ori	r24, 0x20	; 32
    28ce:	80 93 da 00 	sts	0x00DA, r24
    28d2:	10 e0       	ldi	r17, 0x00	; 0
    28d4:	41 e0       	ldi	r20, 0x01	; 1
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
    28d6:	2f 70       	andi	r18, 0x0F	; 15
    28d8:	30 70       	andi	r19, 0x00	; 0
    28da:	23 2b       	or	r18, r19
    28dc:	21 f0       	breq	.+8      	; 0x28e6 <can_auto_baudrate+0x20e>
    28de:	10 e0       	ldi	r17, 0x00	; 0
    28e0:	ff 24       	eor	r15, r15
    28e2:	f3 94       	inc	r15
    28e4:	03 c0       	rjmp	.+6      	; 0x28ec <can_auto_baudrate+0x214>
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
    28e6:	11 30       	cpi	r17, 0x01	; 1
    28e8:	21 f2       	breq	.-120    	; 0x2872 <can_auto_baudrate+0x19a>
    28ea:	56 c0       	rjmp	.+172    	; 0x2998 <can_auto_baudrate+0x2c0>
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
    28ec:	51 11       	cpse	r21, r1
    28ee:	6f 5f       	subi	r22, 0xFF	; 255
            phs1_inc = 1;

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
    28f0:	69 30       	cpi	r22, 0x09	; 9
    28f2:	f8 f0       	brcs	.+62     	; 0x2932 <can_auto_baudrate+0x25a>
    28f4:	78 30       	cpi	r23, 0x08	; 8
    28f6:	e8 f0       	brcs	.+58     	; 0x2932 <can_auto_baudrate+0x25a>
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
    28f8:	a9 31       	cpi	r26, 0x19	; 25
    28fa:	11 f0       	breq	.+4      	; 0x2900 <can_auto_baudrate+0x228>
    28fc:	af 5f       	subi	r26, 0xFF	; 255
    28fe:	05 c0       	rjmp	.+10     	; 0x290a <can_auto_baudrate+0x232>
                else
                {
                    ntq = NTQ_MIN;
                    if (brp != BRP_MAX) brp++;
    2900:	80 e4       	ldi	r24, 0x40	; 64
    2902:	d8 16       	cp	r13, r24
    2904:	21 f0       	breq	.+8      	; 0x290e <can_auto_baudrate+0x236>
    2906:	d3 94       	inc	r13
    2908:	a8 e0       	ldi	r26, 0x08	; 8
    290a:	62 e0       	ldi	r22, 0x02	; 2
    290c:	14 c0       	rjmp	.+40     	; 0x2936 <can_auto_baudrate+0x25e>
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
                        bt_performed = 0;   //! Return flag = FALSE
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                        DISABLE_MOB;        //! Disable MOb-0
    290e:	80 91 ef 00 	lds	r24, 0x00EF
    2912:	8f 73       	andi	r24, 0x3F	; 63
    2914:	80 93 ef 00 	sts	0x00EF, r24
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    2918:	10 92 d8 00 	sts	0x00D8, r1
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    291c:	80 91 d9 00 	lds	r24, 0x00D9
    2920:	82 fd       	sbrc	r24, 2
    2922:	fc cf       	rjmp	.-8      	; 0x291c <can_auto_baudrate+0x244>
    2924:	a8 e0       	ldi	r26, 0x08	; 8
    2926:	62 e0       	ldi	r22, 0x02	; 2
    2928:	72 e0       	ldi	r23, 0x02	; 2
    292a:	50 e0       	ldi	r21, 0x00	; 0
    292c:	00 e0       	ldi	r16, 0x00	; 0
    292e:	cc 24       	eor	r12, r12
    2930:	36 c0       	rjmp	.+108    	; 0x299e <can_auto_baudrate+0x2c6>
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
    2932:	66 30       	cpi	r22, 0x06	; 6
    2934:	10 f4       	brcc	.+4      	; 0x293a <can_auto_baudrate+0x262>
    2936:	76 2f       	mov	r23, r22
    2938:	0a c0       	rjmp	.+20     	; 0x294e <can_auto_baudrate+0x276>
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
    293a:	26 2f       	mov	r18, r22
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	87 2f       	mov	r24, r23
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	01 96       	adiw	r24, 0x01	; 1
    2944:	82 17       	cp	r24, r18
    2946:	93 07       	cpc	r25, r19
    2948:	14 f4       	brge	.+4      	; 0x294e <can_auto_baudrate+0x276>
    294a:	7f 5f       	subi	r23, 0xFF	; 255
    294c:	67 2f       	mov	r22, r23
                }
                else
                {
                phs2=phs1;
                }
                prs = ntq - ( phs1 + phs2 + 1 );
    294e:	b7 2f       	mov	r27, r23
    2950:	b6 0f       	add	r27, r22
    2952:	b0 95       	com	r27
    2954:	ba 0f       	add	r27, r26

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
    2956:	8b 2f       	mov	r24, r27
    2958:	81 50       	subi	r24, 0x01	; 1
    295a:	88 30       	cpi	r24, 0x08	; 8
    295c:	40 f6       	brcc	.-112    	; 0x28ee <can_auto_baudrate+0x216>
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
    295e:	47 2f       	mov	r20, r23
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	26 2f       	mov	r18, r22
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	2f 5f       	subi	r18, 0xFF	; 255
    2968:	3f 4f       	sbci	r19, 0xFF	; 255
    296a:	2b 0f       	add	r18, r27
    296c:	31 1d       	adc	r19, r1
    296e:	ca 01       	movw	r24, r20
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	82 17       	cp	r24, r18
    297a:	93 07       	cpc	r25, r19
    297c:	0c f4       	brge	.+2      	; 0x2980 <can_auto_baudrate+0x2a8>
    297e:	b7 cf       	rjmp	.-146    	; 0x28ee <can_auto_baudrate+0x216>
    2980:	ca 01       	movw	r24, r20
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	84 0f       	add	r24, r20
    2988:	95 1f       	adc	r25, r21
    298a:	28 17       	cp	r18, r24
    298c:	39 07       	cpc	r19, r25
    298e:	0c f4       	brge	.+2      	; 0x2992 <can_auto_baudrate+0x2ba>
    2990:	ae cf       	rjmp	.-164    	; 0x28ee <can_auto_baudrate+0x216>
    2992:	51 e0       	ldi	r21, 0x01	; 1
    2994:	11 e0       	ldi	r17, 0x01	; 1
    2996:	03 c0       	rjmp	.+6      	; 0x299e <can_auto_baudrate+0x2c6>
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
    2998:	41 30       	cpi	r20, 0x01	; 1
    299a:	09 f4       	brne	.+2      	; 0x299e <can_auto_baudrate+0x2c6>
    299c:	a7 cf       	rjmp	.-178    	; 0x28ec <can_auto_baudrate+0x214>
    299e:	40 e0       	ldi	r20, 0x00	; 0
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    29a0:	01 30       	cpi	r16, 0x01	; 1
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <can_auto_baudrate+0x2ce>
    29a4:	1d cf       	rjmp	.-454    	; 0x27e0 <can_auto_baudrate+0x108>
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
    29a6:	8c 2d       	mov	r24, r12
    29a8:	1f 91       	pop	r17
    29aa:	0f 91       	pop	r16
    29ac:	ff 90       	pop	r15
    29ae:	ef 90       	pop	r14
    29b0:	df 90       	pop	r13
    29b2:	cf 90       	pop	r12
    29b4:	bf 90       	pop	r11
    29b6:	af 90       	pop	r10
    29b8:	9f 90       	pop	r9
    29ba:	08 95       	ret

000029bc <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U8 mode)
{
    Can_reset();
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
    29c2:	82 e0       	ldi	r24, 0x02	; 2
    29c4:	80 93 e2 00 	sts	0x00E2, r24
    29c8:	84 e0       	ldi	r24, 0x04	; 4
    29ca:	80 93 e3 00 	sts	0x00E3, r24
    29ce:	83 e1       	ldi	r24, 0x13	; 19
    29d0:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
}
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	08 95       	ret

000029d8 <uart_test_hit>:
//!         ==1: A character has been received
//!
//------------------------------------------------------------------------------
U8 uart_test_hit (void)
{
    return (Uart_rx_ready());
    29d8:	80 91 d8 03 	lds	r24, 0x03D8
    29dc:	88 23       	and	r24, r24
    29de:	31 f4       	brne	.+12     	; 0x29ec <uart_test_hit+0x14>
    29e0:	80 91 c0 00 	lds	r24, 0x00C0
    29e4:	88 1f       	adc	r24, r24
    29e6:	88 27       	eor	r24, r24
    29e8:	88 1f       	adc	r24, r24
    29ea:	08 95       	ret
    29ec:	80 91 c8 00 	lds	r24, 0x00C8
    29f0:	88 1f       	adc	r24, r24
    29f2:	88 27       	eor	r24, r24
    29f4:	88 1f       	adc	r24, r24
}
    29f6:	08 95       	ret

000029f8 <uart_putchar>:
//!
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    29f8:	98 2f       	mov	r25, r24
    while(!Uart_tx_ready());
    29fa:	20 91 d8 03 	lds	r18, 0x03D8
    29fe:	22 23       	and	r18, r18
    2a00:	29 f4       	brne	.+10     	; 0x2a0c <uart_putchar+0x14>
    2a02:	80 91 c0 00 	lds	r24, 0x00C0
    2a06:	85 fd       	sbrc	r24, 5
    2a08:	06 c0       	rjmp	.+12     	; 0x2a16 <uart_putchar+0x1e>
    2a0a:	fb cf       	rjmp	.-10     	; 0x2a02 <uart_putchar+0xa>
    2a0c:	80 91 c8 00 	lds	r24, 0x00C8
    2a10:	85 fd       	sbrc	r24, 5
    2a12:	06 c0       	rjmp	.+12     	; 0x2a20 <uart_putchar+0x28>
    2a14:	f4 cf       	rjmp	.-24     	; 0x29fe <uart_putchar+0x6>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2a16:	90 93 c6 00 	sts	0x00C6, r25
    2a1a:	80 91 c6 00 	lds	r24, 0x00C6
    2a1e:	04 c0       	rjmp	.+8      	; 0x2a28 <uart_putchar+0x30>
    2a20:	90 93 ce 00 	sts	0x00CE, r25
    2a24:	80 91 ce 00 	lds	r24, 0x00CE
    return (ch);
}
    2a28:	89 2f       	mov	r24, r25
    2a2a:	08 95       	ret

00002a2c <uart_getchar>:
//------------------------------------------------------------------------------
U8 uart_getchar (void)
{
    U8 ch;

    while(!Uart_rx_ready());
    2a2c:	90 91 d8 03 	lds	r25, 0x03D8
    2a30:	99 23       	and	r25, r25
    2a32:	29 f4       	brne	.+10     	; 0x2a3e <uart_getchar+0x12>
    2a34:	80 91 c0 00 	lds	r24, 0x00C0
    2a38:	87 fd       	sbrc	r24, 7
    2a3a:	06 c0       	rjmp	.+12     	; 0x2a48 <uart_getchar+0x1c>
    2a3c:	fb cf       	rjmp	.-10     	; 0x2a34 <uart_getchar+0x8>
    2a3e:	80 91 c8 00 	lds	r24, 0x00C8
    2a42:	87 fd       	sbrc	r24, 7
    2a44:	04 c0       	rjmp	.+8      	; 0x2a4e <uart_getchar+0x22>
    2a46:	f4 cf       	rjmp	.-24     	; 0x2a30 <uart_getchar+0x4>
    ch = Uart_get_byte();
    2a48:	80 91 c6 00 	lds	r24, 0x00C6
    2a4c:	08 95       	ret
    2a4e:	80 91 ce 00 	lds	r24, 0x00CE
    Uart_ack_rx_byte();
    return ch;
}
    2a52:	08 95       	ret

00002a54 <uart_put_string>:
//! @return (none)
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
void uart_put_string (U8 *data_string)
    {
    2a54:	fc 01       	movw	r30, r24
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    2a56:	20 91 d8 03 	lds	r18, 0x03D8
    2a5a:	16 c0       	rjmp	.+44     	; 0x2a88 <uart_put_string+0x34>
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
void uart_put_string (U8 *data_string)
    {
    while(*data_string) uart_putchar (*data_string++);
    2a5c:	31 96       	adiw	r30, 0x01	; 1
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    2a5e:	22 23       	and	r18, r18
    2a60:	29 f4       	brne	.+10     	; 0x2a6c <uart_put_string+0x18>
    2a62:	80 91 c0 00 	lds	r24, 0x00C0
    2a66:	85 fd       	sbrc	r24, 5
    2a68:	06 c0       	rjmp	.+12     	; 0x2a76 <uart_put_string+0x22>
    2a6a:	fb cf       	rjmp	.-10     	; 0x2a62 <uart_put_string+0xe>
    2a6c:	80 91 c8 00 	lds	r24, 0x00C8
    2a70:	85 fd       	sbrc	r24, 5
    2a72:	06 c0       	rjmp	.+12     	; 0x2a80 <uart_put_string+0x2c>
    2a74:	f4 cf       	rjmp	.-24     	; 0x2a5e <uart_put_string+0xa>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2a76:	90 93 c6 00 	sts	0x00C6, r25
    2a7a:	80 91 c6 00 	lds	r24, 0x00C6
    2a7e:	04 c0       	rjmp	.+8      	; 0x2a88 <uart_put_string+0x34>
    2a80:	90 93 ce 00 	sts	0x00CE, r25
    2a84:	80 91 ce 00 	lds	r24, 0x00CE
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
void uart_put_string (U8 *data_string)
    {
    while(*data_string) uart_putchar (*data_string++);
    2a88:	90 81       	ld	r25, Z
    2a8a:	99 23       	and	r25, r25
    2a8c:	39 f7       	brne	.-50     	; 0x2a5c <uart_put_string+0x8>
    }
    2a8e:	08 95       	ret

00002a90 <uart_mini_printf>:
//! Return: 0 = O.K.
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
U8 uart_mini_printf(char *format, ...)
{
    2a90:	2f 92       	push	r2
    2a92:	3f 92       	push	r3
    2a94:	4f 92       	push	r4
    2a96:	5f 92       	push	r5
    2a98:	6f 92       	push	r6
    2a9a:	7f 92       	push	r7
    2a9c:	8f 92       	push	r8
    2a9e:	9f 92       	push	r9
    2aa0:	af 92       	push	r10
    2aa2:	bf 92       	push	r11
    2aa4:	cf 92       	push	r12
    2aa6:	df 92       	push	r13
    2aa8:	ef 92       	push	r14
    2aaa:	ff 92       	push	r15
    2aac:	0f 93       	push	r16
    2aae:	1f 93       	push	r17
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	2e 97       	sbiw	r28, 0x0e	; 14
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	85 e2       	ldi	r24, 0x25	; 37
    2ac6:	a8 2e       	mov	r10, r24
    2ac8:	b1 2c       	mov	r11, r1
    2aca:	ac 0e       	add	r10, r28
    2acc:	bd 1e       	adc	r11, r29
    2ace:	8b a1       	ldd	r24, Y+35	; 0x23
    2ad0:	9c a1       	ldd	r25, Y+36	; 0x24
    2ad2:	9c 01       	movw	r18, r24
    2ad4:	f9 01       	movw	r30, r18
    2ad6:	0b e0       	ldi	r16, 0x0B	; 11
    2ad8:	80 2e       	mov	r8, r16
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	80 e0       	ldi	r24, 0x00	; 0
                {
                    alt_p_c = TRUE;
                    long_flag = TRUE;
                }
                p--;
                break;  // case 'l'
    2ade:	1e 01       	movw	r2, r28
    2ae0:	08 94       	sec
    2ae2:	21 1c       	adc	r2, r1
    2ae4:	31 1c       	adc	r3, r1
                
            case 'd':
                n_sign  = FALSE;               
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2ae6:	9e 01       	movw	r18, r28
    2ae8:	24 5f       	subi	r18, 0xF4	; 244
    2aea:	3f 4f       	sbci	r19, 0xFF	; 255
    2aec:	3e 87       	std	Y+14, r19	; 0x0e
    2aee:	2d 87       	std	Y+13, r18	; 0x0d
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2af0:	1c e6       	ldi	r17, 0x6C	; 108
    2af2:	41 2e       	mov	r4, r17
    2af4:	06 c3       	rjmp	.+1548   	; 0x3102 <uart_mini_printf+0x672>
    min_size = DATA_BUF_LEN-1;

    va_start(arg_ptr, format);   // make arg_ptr point to the first unnamed arg
    for (p = (U8 *) format; *p; p++)
    {
        if ((*p == '%') || (alt_p_c == TRUE))
    2af6:	25 32       	cpi	r18, 0x25	; 37
    2af8:	11 f0       	breq	.+4      	; 0x2afe <uart_mini_printf+0x6e>
    2afa:	81 30       	cpi	r24, 0x01	; 1
    2afc:	19 f5       	brne	.+70     	; 0x2b44 <uart_mini_printf+0xb4>
        {
            p++;
    2afe:	3f 01       	movw	r6, r30
    2b00:	08 94       	sec
    2b02:	61 1c       	adc	r6, r1
    2b04:	71 1c       	adc	r7, r1
            uart_putchar(*p);
            alt_p_c = FALSE;
            long_flag = FALSE;
            continue;   // "switch (*p)" section skipped
        }
        switch (*p)
    2b06:	21 81       	ldd	r18, Z+1	; 0x01
    2b08:	24 36       	cpi	r18, 0x64	; 100
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <uart_mini_printf+0x7e>
    2b0c:	ed c0       	rjmp	.+474    	; 0x2ce8 <uart_mini_printf+0x258>
    2b0e:	25 36       	cpi	r18, 0x65	; 101
    2b10:	48 f4       	brcc	.+18     	; 0x2b24 <uart_mini_printf+0x94>
    2b12:	28 35       	cpi	r18, 0x58	; 88
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <uart_mini_printf+0x88>
    2b16:	cd c1       	rjmp	.+922    	; 0x2eb2 <uart_mini_printf+0x422>
    2b18:	23 36       	cpi	r18, 0x63	; 99
    2b1a:	69 f1       	breq	.+90     	; 0x2b76 <uart_mini_printf+0xe6>
    2b1c:	20 33       	cpi	r18, 0x30	; 48
    2b1e:	09 f0       	breq	.+2      	; 0x2b22 <uart_mini_printf+0x92>
    2b20:	b7 c2       	rjmp	.+1390   	; 0x3090 <uart_mini_printf+0x600>
    2b22:	2f c2       	rjmp	.+1118   	; 0x2f82 <uart_mini_printf+0x4f2>
    2b24:	23 37       	cpi	r18, 0x73	; 115
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <uart_mini_printf+0x9a>
    2b28:	6e c0       	rjmp	.+220    	; 0x2c06 <uart_mini_printf+0x176>
    2b2a:	24 37       	cpi	r18, 0x74	; 116
    2b2c:	20 f4       	brcc	.+8      	; 0x2b36 <uart_mini_printf+0xa6>
    2b2e:	2c 36       	cpi	r18, 0x6C	; 108
    2b30:	09 f0       	breq	.+2      	; 0x2b34 <uart_mini_printf+0xa4>
    2b32:	ae c2       	rjmp	.+1372   	; 0x3090 <uart_mini_printf+0x600>
    2b34:	b9 c0       	rjmp	.+370    	; 0x2ca8 <uart_mini_printf+0x218>
    2b36:	25 37       	cpi	r18, 0x75	; 117
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <uart_mini_printf+0xac>
    2b3a:	5c c1       	rjmp	.+696    	; 0x2df4 <uart_mini_printf+0x364>
    2b3c:	28 37       	cpi	r18, 0x78	; 120
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <uart_mini_printf+0xb2>
    2b40:	a7 c2       	rjmp	.+1358   	; 0x3090 <uart_mini_printf+0x600>
    2b42:	b7 c1       	rjmp	.+878    	; 0x2eb2 <uart_mini_printf+0x422>
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    2b44:	90 91 d8 03 	lds	r25, 0x03D8
    2b48:	99 23       	and	r25, r25
    2b4a:	29 f4       	brne	.+10     	; 0x2b56 <uart_mini_printf+0xc6>
    2b4c:	80 91 c0 00 	lds	r24, 0x00C0
    2b50:	85 fd       	sbrc	r24, 5
    2b52:	06 c0       	rjmp	.+12     	; 0x2b60 <uart_mini_printf+0xd0>
    2b54:	fb cf       	rjmp	.-10     	; 0x2b4c <uart_mini_printf+0xbc>
    2b56:	80 91 c8 00 	lds	r24, 0x00C8
    2b5a:	85 fd       	sbrc	r24, 5
    2b5c:	06 c0       	rjmp	.+12     	; 0x2b6a <uart_mini_printf+0xda>
    2b5e:	f4 cf       	rjmp	.-24     	; 0x2b48 <uart_mini_printf+0xb8>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2b60:	20 93 c6 00 	sts	0x00C6, r18
    2b64:	80 91 c6 00 	lds	r24, 0x00C6
    2b68:	04 c0       	rjmp	.+8      	; 0x2b72 <uart_mini_printf+0xe2>
    2b6a:	20 93 ce 00 	sts	0x00CE, r18
    2b6e:	80 91 ce 00 	lds	r24, 0x00CE
    2b72:	85 01       	movw	r16, r10
    2b74:	c2 c2       	rjmp	.+1412   	; 0x30fa <uart_mini_printf+0x66a>
    2b76:	20 91 d8 03 	lds	r18, 0x03D8
            continue;   // "switch (*p)" section skipped
        }
        switch (*p)
        {
            case 'c':
                if (long_flag == TRUE)      // ERROR: 'l' before any 'c'
    2b7a:	91 30       	cpi	r25, 0x01	; 1
    2b7c:	49 f5       	brne	.+82     	; 0x2bd0 <uart_mini_printf+0x140>
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    2b7e:	22 23       	and	r18, r18
    2b80:	29 f4       	brne	.+10     	; 0x2b8c <uart_mini_printf+0xfc>
    2b82:	80 91 c0 00 	lds	r24, 0x00C0
    2b86:	85 fd       	sbrc	r24, 5
    2b88:	06 c0       	rjmp	.+12     	; 0x2b96 <uart_mini_printf+0x106>
    2b8a:	fb cf       	rjmp	.-10     	; 0x2b82 <uart_mini_printf+0xf2>
    2b8c:	80 91 c8 00 	lds	r24, 0x00C8
    2b90:	85 fd       	sbrc	r24, 5
    2b92:	06 c0       	rjmp	.+12     	; 0x2ba0 <uart_mini_printf+0x110>
    2b94:	f4 cf       	rjmp	.-24     	; 0x2b7e <uart_mini_printf+0xee>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2b96:	40 92 c6 00 	sts	0x00C6, r4
    2b9a:	80 91 c6 00 	lds	r24, 0x00C6
    2b9e:	04 c0       	rjmp	.+8      	; 0x2ba8 <uart_mini_printf+0x118>
    2ba0:	40 92 ce 00 	sts	0x00CE, r4
    2ba4:	80 91 ce 00 	lds	r24, 0x00CE
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    2ba8:	22 23       	and	r18, r18
    2baa:	29 f4       	brne	.+10     	; 0x2bb6 <uart_mini_printf+0x126>
    2bac:	80 91 c0 00 	lds	r24, 0x00C0
    2bb0:	85 fd       	sbrc	r24, 5
    2bb2:	06 c0       	rjmp	.+12     	; 0x2bc0 <uart_mini_printf+0x130>
    2bb4:	fb cf       	rjmp	.-10     	; 0x2bac <uart_mini_printf+0x11c>
    2bb6:	80 91 c8 00 	lds	r24, 0x00C8
    2bba:	85 fd       	sbrc	r24, 5
    2bbc:	05 c0       	rjmp	.+10     	; 0x2bc8 <uart_mini_printf+0x138>
    2bbe:	f4 cf       	rjmp	.-24     	; 0x2ba8 <uart_mini_printf+0x118>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2bc0:	33 e6       	ldi	r19, 0x63	; 99
    2bc2:	30 93 c6 00 	sts	0x00C6, r19
    2bc6:	8e c2       	rjmp	.+1308   	; 0x30e4 <uart_mini_printf+0x654>
    2bc8:	83 e6       	ldi	r24, 0x63	; 99
    2bca:	80 93 ce 00 	sts	0x00CE, r24
    2bce:	8f c2       	rjmp	.+1310   	; 0x30ee <uart_mini_printf+0x65e>
                    uart_putchar('l');
                    uart_putchar('c');
                }
                else
                {
                    s8_val = (S8)(va_arg(arg_ptr, int));    // s8_val = (S8)(va_arg(arg_ptr, S16));
    2bd0:	85 01       	movw	r16, r10
    2bd2:	0e 5f       	subi	r16, 0xFE	; 254
    2bd4:	1f 4f       	sbci	r17, 0xFF	; 255
                    uart_putchar((U8)(s8_val));
    2bd6:	d5 01       	movw	r26, r10
    2bd8:	9c 91       	ld	r25, X
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    2bda:	22 23       	and	r18, r18
    2bdc:	29 f4       	brne	.+10     	; 0x2be8 <uart_mini_printf+0x158>
    2bde:	80 91 c0 00 	lds	r24, 0x00C0
    2be2:	85 fd       	sbrc	r24, 5
    2be4:	06 c0       	rjmp	.+12     	; 0x2bf2 <uart_mini_printf+0x162>
    2be6:	fb cf       	rjmp	.-10     	; 0x2bde <uart_mini_printf+0x14e>
    2be8:	80 91 c8 00 	lds	r24, 0x00C8
    2bec:	85 fd       	sbrc	r24, 5
    2bee:	06 c0       	rjmp	.+12     	; 0x2bfc <uart_mini_printf+0x16c>
    2bf0:	f4 cf       	rjmp	.-24     	; 0x2bda <uart_mini_printf+0x14a>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2bf2:	90 93 c6 00 	sts	0x00C6, r25
    2bf6:	80 91 c6 00 	lds	r24, 0x00C6
    2bfa:	59 c1       	rjmp	.+690    	; 0x2eae <uart_mini_printf+0x41e>
    2bfc:	90 93 ce 00 	sts	0x00CE, r25
    2c00:	80 91 ce 00 	lds	r24, 0x00CE
    2c04:	54 c1       	rjmp	.+680    	; 0x2eae <uart_mini_printf+0x41e>
    2c06:	20 91 d8 03 	lds	r18, 0x03D8
                alt_p_c = FALSE;
                long_flag = FALSE;
                break; // case 'c'
                
            case 's':
                if (long_flag == TRUE)      // ERROR: 'l' before any 's'
    2c0a:	91 30       	cpi	r25, 0x01	; 1
    2c0c:	49 f5       	brne	.+82     	; 0x2c60 <uart_mini_printf+0x1d0>
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    2c0e:	22 23       	and	r18, r18
    2c10:	29 f4       	brne	.+10     	; 0x2c1c <uart_mini_printf+0x18c>
    2c12:	80 91 c0 00 	lds	r24, 0x00C0
    2c16:	85 fd       	sbrc	r24, 5
    2c18:	06 c0       	rjmp	.+12     	; 0x2c26 <uart_mini_printf+0x196>
    2c1a:	fb cf       	rjmp	.-10     	; 0x2c12 <uart_mini_printf+0x182>
    2c1c:	80 91 c8 00 	lds	r24, 0x00C8
    2c20:	85 fd       	sbrc	r24, 5
    2c22:	06 c0       	rjmp	.+12     	; 0x2c30 <uart_mini_printf+0x1a0>
    2c24:	f4 cf       	rjmp	.-24     	; 0x2c0e <uart_mini_printf+0x17e>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2c26:	40 92 c6 00 	sts	0x00C6, r4
    2c2a:	80 91 c6 00 	lds	r24, 0x00C6
    2c2e:	04 c0       	rjmp	.+8      	; 0x2c38 <uart_mini_printf+0x1a8>
    2c30:	40 92 ce 00 	sts	0x00CE, r4
    2c34:	80 91 ce 00 	lds	r24, 0x00CE
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    2c38:	22 23       	and	r18, r18
    2c3a:	29 f4       	brne	.+10     	; 0x2c46 <uart_mini_printf+0x1b6>
    2c3c:	80 91 c0 00 	lds	r24, 0x00C0
    2c40:	85 fd       	sbrc	r24, 5
    2c42:	06 c0       	rjmp	.+12     	; 0x2c50 <uart_mini_printf+0x1c0>
    2c44:	fb cf       	rjmp	.-10     	; 0x2c3c <uart_mini_printf+0x1ac>
    2c46:	80 91 c8 00 	lds	r24, 0x00C8
    2c4a:	85 fd       	sbrc	r24, 5
    2c4c:	05 c0       	rjmp	.+10     	; 0x2c58 <uart_mini_printf+0x1c8>
    2c4e:	f4 cf       	rjmp	.-24     	; 0x2c38 <uart_mini_printf+0x1a8>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2c50:	b3 e7       	ldi	r27, 0x73	; 115
    2c52:	b0 93 c6 00 	sts	0x00C6, r27
    2c56:	46 c2       	rjmp	.+1164   	; 0x30e4 <uart_mini_printf+0x654>
    2c58:	e3 e7       	ldi	r30, 0x73	; 115
    2c5a:	e0 93 ce 00 	sts	0x00CE, r30
    2c5e:	47 c2       	rjmp	.+1166   	; 0x30ee <uart_mini_printf+0x65e>
                    uart_putchar('l');
                    uart_putchar('s');
                }
                else
                {
                    for (sval = va_arg(arg_ptr, U8 *); *sval; sval++)
    2c60:	d5 01       	movw	r26, r10
    2c62:	ed 91       	ld	r30, X+
    2c64:	fc 91       	ld	r31, X
    2c66:	16 c0       	rjmp	.+44     	; 0x2c94 <uart_mini_printf+0x204>
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    2c68:	22 23       	and	r18, r18
    2c6a:	29 f4       	brne	.+10     	; 0x2c76 <uart_mini_printf+0x1e6>
    2c6c:	80 91 c0 00 	lds	r24, 0x00C0
    2c70:	85 fd       	sbrc	r24, 5
    2c72:	06 c0       	rjmp	.+12     	; 0x2c80 <uart_mini_printf+0x1f0>
    2c74:	fb cf       	rjmp	.-10     	; 0x2c6c <uart_mini_printf+0x1dc>
    2c76:	80 91 c8 00 	lds	r24, 0x00C8
    2c7a:	85 fd       	sbrc	r24, 5
    2c7c:	06 c0       	rjmp	.+12     	; 0x2c8a <uart_mini_printf+0x1fa>
    2c7e:	f4 cf       	rjmp	.-24     	; 0x2c68 <uart_mini_printf+0x1d8>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2c80:	90 93 c6 00 	sts	0x00C6, r25
    2c84:	80 91 c6 00 	lds	r24, 0x00C6
    2c88:	04 c0       	rjmp	.+8      	; 0x2c92 <uart_mini_printf+0x202>
    2c8a:	90 93 ce 00 	sts	0x00CE, r25
    2c8e:	80 91 ce 00 	lds	r24, 0x00CE
                    uart_putchar('l');
                    uart_putchar('s');
                }
                else
                {
                    for (sval = va_arg(arg_ptr, U8 *); *sval; sval++)
    2c92:	31 96       	adiw	r30, 0x01	; 1
    2c94:	90 81       	ld	r25, Z
    2c96:	99 23       	and	r25, r25
    2c98:	39 f7       	brne	.-50     	; 0x2c68 <uart_mini_printf+0x1d8>
    2c9a:	85 01       	movw	r16, r10
    2c9c:	0e 5f       	subi	r16, 0xFE	; 254
    2c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca0:	f3 01       	movw	r30, r6
    2ca2:	bb e0       	ldi	r27, 0x0B	; 11
    2ca4:	8b 2e       	mov	r8, r27
    2ca6:	2a c2       	rjmp	.+1108   	; 0x30fc <uart_mini_printf+0x66c>
                alt_p_c = FALSE;
                long_flag = FALSE;
                break;  // case 's'
                
            case 'l':  // It is not the number "ONE" but the lower case of "L" character
                if (long_flag == TRUE)      // ERROR: two consecutive 'l'
    2ca8:	91 30       	cpi	r25, 0x01	; 1
    2caa:	19 f0       	breq	.+6      	; 0x2cb2 <uart_mini_printf+0x222>
    2cac:	91 e0       	ldi	r25, 0x01	; 1
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	19 c0       	rjmp	.+50     	; 0x2ce4 <uart_mini_printf+0x254>
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    2cb2:	90 91 d8 03 	lds	r25, 0x03D8
    2cb6:	99 23       	and	r25, r25
    2cb8:	29 f4       	brne	.+10     	; 0x2cc4 <uart_mini_printf+0x234>
    2cba:	80 91 c0 00 	lds	r24, 0x00C0
    2cbe:	85 fd       	sbrc	r24, 5
    2cc0:	06 c0       	rjmp	.+12     	; 0x2cce <uart_mini_printf+0x23e>
    2cc2:	fb cf       	rjmp	.-10     	; 0x2cba <uart_mini_printf+0x22a>
    2cc4:	80 91 c8 00 	lds	r24, 0x00C8
    2cc8:	85 fd       	sbrc	r24, 5
    2cca:	06 c0       	rjmp	.+12     	; 0x2cd8 <uart_mini_printf+0x248>
    2ccc:	f4 cf       	rjmp	.-24     	; 0x2cb6 <uart_mini_printf+0x226>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2cce:	40 92 c6 00 	sts	0x00C6, r4
    2cd2:	80 91 c6 00 	lds	r24, 0x00C6
    2cd6:	04 c0       	rjmp	.+8      	; 0x2ce0 <uart_mini_printf+0x250>
    2cd8:	40 92 ce 00 	sts	0x00CE, r4
    2cdc:	80 91 ce 00 	lds	r24, 0x00CE
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	85 01       	movw	r16, r10
    2ce6:	0b c2       	rjmp	.+1046   	; 0x30fe <uart_mini_printf+0x66e>
                {
                    alt_p_c = TRUE;
                    long_flag = TRUE;
                }
                p--;
                break;  // case 'l'
    2ce8:	f1 01       	movw	r30, r2
                
            case 'd':
                n_sign  = FALSE;               
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
                {
                    data_buf[data_idx] = '0';
    2cea:	b0 e3       	ldi	r27, 0x30	; 48
    2cec:	b1 93       	st	Z+, r27
                p--;
                break;  // case 'l'
                
            case 'd':
                n_sign  = FALSE;               
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2cee:	2d 85       	ldd	r18, Y+13	; 0x0d
    2cf0:	3e 85       	ldd	r19, Y+14	; 0x0e
    2cf2:	e2 17       	cp	r30, r18
    2cf4:	f3 07       	cpc	r31, r19
    2cf6:	c9 f7       	brne	.-14     	; 0x2cea <uart_mini_printf+0x25a>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    2cf8:	1c 86       	std	Y+12, r1	; 0x0c
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
    2cfa:	99 23       	and	r25, r25
    2cfc:	c9 f1       	breq	.+114    	; 0x2d70 <uart_mini_printf+0x2e0>
                {
                    s32_val = va_arg(arg_ptr, S32);
    2cfe:	d5 01       	movw	r26, r10
    2d00:	cd 90       	ld	r12, X+
    2d02:	dd 90       	ld	r13, X+
    2d04:	ed 90       	ld	r14, X+
    2d06:	fc 90       	ld	r15, X
                    if (s32_val < 0)
    2d08:	f7 fc       	sbrc	r15, 7
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <uart_mini_printf+0x280>
    2d0c:	55 24       	eor	r5, r5
    2d0e:	0a c0       	rjmp	.+20     	; 0x2d24 <uart_mini_printf+0x294>
                    {
                        n_sign = TRUE;
                        s32_val  = -s32_val;
    2d10:	f0 94       	com	r15
    2d12:	e0 94       	com	r14
    2d14:	d0 94       	com	r13
    2d16:	c0 94       	com	r12
    2d18:	c1 1c       	adc	r12, r1
    2d1a:	d1 1c       	adc	r13, r1
    2d1c:	e1 1c       	adc	r14, r1
    2d1e:	f1 1c       	adc	r15, r1
    2d20:	55 24       	eor	r5, r5
    2d22:	53 94       	inc	r5
    2d24:	aa e0       	ldi	r26, 0x0A	; 10
    2d26:	9a 2e       	mov	r9, r26
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s32_val % 10 + '0';
    2d28:	81 01       	movw	r16, r2
    2d2a:	09 0d       	add	r16, r9
    2d2c:	11 1d       	adc	r17, r1
    2d2e:	c7 01       	movw	r24, r14
    2d30:	b6 01       	movw	r22, r12
    2d32:	2a e0       	ldi	r18, 0x0A	; 10
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e0       	ldi	r20, 0x00	; 0
    2d38:	50 e0       	ldi	r21, 0x00	; 0
    2d3a:	0e 94 aa 21 	call	0x4354	; 0x4354 <__divmodsi4>
    2d3e:	60 5d       	subi	r22, 0xD0	; 208
    2d40:	f8 01       	movw	r30, r16
    2d42:	60 83       	st	Z, r22
                        s32_val /= 10;
    2d44:	c7 01       	movw	r24, r14
    2d46:	b6 01       	movw	r22, r12
    2d48:	2a e0       	ldi	r18, 0x0A	; 10
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e0       	ldi	r20, 0x00	; 0
    2d4e:	50 e0       	ldi	r21, 0x00	; 0
    2d50:	0e 94 aa 21 	call	0x4354	; 0x4354 <__divmodsi4>
    2d54:	c9 01       	movw	r24, r18
    2d56:	da 01       	movw	r26, r20
    2d58:	6c 01       	movw	r12, r24
    2d5a:	7d 01       	movw	r14, r26
                        data_idx--;
    2d5c:	9a 94       	dec	r9
						if (s32_val==0) break;
    2d5e:	c1 14       	cp	r12, r1
    2d60:	d1 04       	cpc	r13, r1
    2d62:	e1 04       	cpc	r14, r1
    2d64:	f1 04       	cpc	r15, r1
    2d66:	01 f7       	brne	.-64     	; 0x2d28 <uart_mini_printf+0x298>
                }
                data_buf[DATA_BUF_LEN-1] = 0;
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
                {
                    s32_val = va_arg(arg_ptr, S32);
    2d68:	85 01       	movw	r16, r10
    2d6a:	0c 5f       	subi	r16, 0xFC	; 252
    2d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6e:	25 c0       	rjmp	.+74     	; 0x2dba <uart_mini_printf+0x32a>
						if (s32_val==0) break;
                   }
                }
                else  // 16-bit
                {
                    s16_val = (S16)(va_arg(arg_ptr, int)); // s16_val = va_arg(arg_ptr, S16);
    2d70:	d5 01       	movw	r26, r10
    2d72:	2d 91       	ld	r18, X+
    2d74:	3c 91       	ld	r19, X
                    if (s16_val < 0)
    2d76:	37 fd       	sbrc	r19, 7
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <uart_mini_printf+0x2ee>
    2d7a:	55 24       	eor	r5, r5
    2d7c:	05 c0       	rjmp	.+10     	; 0x2d88 <uart_mini_printf+0x2f8>
                    {
                        n_sign = TRUE;
                        s16_val  = -s16_val;
    2d7e:	30 95       	com	r19
    2d80:	21 95       	neg	r18
    2d82:	3f 4f       	sbci	r19, 0xFF	; 255
    2d84:	55 24       	eor	r5, r5
    2d86:	53 94       	inc	r5
    2d88:	fa e0       	ldi	r31, 0x0A	; 10
    2d8a:	9f 2e       	mov	r9, r31
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s16_val % 10 + '0';
    2d8c:	f1 01       	movw	r30, r2
    2d8e:	e9 0d       	add	r30, r9
    2d90:	f1 1d       	adc	r31, r1
    2d92:	c9 01       	movw	r24, r18
    2d94:	6a e0       	ldi	r22, 0x0A	; 10
    2d96:	70 e0       	ldi	r23, 0x00	; 0
    2d98:	0e 94 75 21 	call	0x42ea	; 0x42ea <__divmodhi4>
    2d9c:	80 5d       	subi	r24, 0xD0	; 208
    2d9e:	80 83       	st	Z, r24
                        s16_val /= 10;
    2da0:	c9 01       	movw	r24, r18
    2da2:	6a e0       	ldi	r22, 0x0A	; 10
    2da4:	70 e0       	ldi	r23, 0x00	; 0
    2da6:	0e 94 75 21 	call	0x42ea	; 0x42ea <__divmodhi4>
    2daa:	9b 01       	movw	r18, r22
                        data_idx--;
    2dac:	9a 94       	dec	r9
						if (s16_val==0) break;
    2dae:	61 15       	cp	r22, r1
    2db0:	71 05       	cpc	r23, r1
    2db2:	61 f7       	brne	.-40     	; 0x2d8c <uart_mini_printf+0x2fc>
						if (s32_val==0) break;
                   }
                }
                else  // 16-bit
                {
                    s16_val = (S16)(va_arg(arg_ptr, int)); // s16_val = va_arg(arg_ptr, S16);
    2db4:	85 01       	movw	r16, r10
    2db6:	0e 5f       	subi	r16, 0xFE	; 254
    2db8:	1f 4f       	sbci	r17, 0xFF	; 255
                        s16_val /= 10;
                        data_idx--;
						if (s16_val==0) break;
                    }
                }
                if (n_sign) { uart_putchar('-'); }
    2dba:	55 20       	and	r5, r5
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <uart_mini_printf+0x330>
    2dbe:	6c c0       	rjmp	.+216    	; 0x2e98 <uart_mini_printf+0x408>
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    2dc0:	90 91 d8 03 	lds	r25, 0x03D8
    2dc4:	99 23       	and	r25, r25
    2dc6:	29 f4       	brne	.+10     	; 0x2dd2 <uart_mini_printf+0x342>
    2dc8:	80 91 c0 00 	lds	r24, 0x00C0
    2dcc:	85 fd       	sbrc	r24, 5
    2dce:	06 c0       	rjmp	.+12     	; 0x2ddc <uart_mini_printf+0x34c>
    2dd0:	fb cf       	rjmp	.-10     	; 0x2dc8 <uart_mini_printf+0x338>
    2dd2:	80 91 c8 00 	lds	r24, 0x00C8
    2dd6:	85 fd       	sbrc	r24, 5
    2dd8:	07 c0       	rjmp	.+14     	; 0x2de8 <uart_mini_printf+0x358>
    2dda:	f4 cf       	rjmp	.-24     	; 0x2dc4 <uart_mini_printf+0x334>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2ddc:	bd e2       	ldi	r27, 0x2D	; 45
    2dde:	b0 93 c6 00 	sts	0x00C6, r27
    2de2:	80 91 c6 00 	lds	r24, 0x00C6
    2de6:	58 c0       	rjmp	.+176    	; 0x2e98 <uart_mini_printf+0x408>
    2de8:	ed e2       	ldi	r30, 0x2D	; 45
    2dea:	e0 93 ce 00 	sts	0x00CE, r30
    2dee:	80 91 ce 00 	lds	r24, 0x00CE
    2df2:	52 c0       	rjmp	.+164    	; 0x2e98 <uart_mini_printf+0x408>
                uart_put_string (data_buf + data_idx);
                // Clean up
                min_size = DATA_BUF_LEN-1;
                alt_p_c = FALSE;
                long_flag = FALSE;
                break;  // case 'd'
    2df4:	f1 01       	movw	r30, r2
                
            case 'u':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
                {
                    data_buf[data_idx] = '0';
    2df6:	30 e3       	ldi	r19, 0x30	; 48
    2df8:	31 93       	st	Z+, r19
                alt_p_c = FALSE;
                long_flag = FALSE;
                break;  // case 'd'
                
            case 'u':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2dfa:	ad 85       	ldd	r26, Y+13	; 0x0d
    2dfc:	be 85       	ldd	r27, Y+14	; 0x0e
    2dfe:	ea 17       	cp	r30, r26
    2e00:	fb 07       	cpc	r31, r27
    2e02:	c9 f7       	brne	.-14     	; 0x2df6 <uart_mini_printf+0x366>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    2e04:	1c 86       	std	Y+12, r1	; 0x0c
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
    2e06:	99 23       	and	r25, r25
    2e08:	59 f1       	breq	.+86     	; 0x2e60 <uart_mini_printf+0x3d0>
                {
                    u32_val = va_arg(arg_ptr, U32);
    2e0a:	f5 01       	movw	r30, r10
    2e0c:	c0 80       	ld	r12, Z
    2e0e:	d1 80       	ldd	r13, Z+1	; 0x01
    2e10:	e2 80       	ldd	r14, Z+2	; 0x02
    2e12:	f3 80       	ldd	r15, Z+3	; 0x03
    2e14:	ea e0       	ldi	r30, 0x0A	; 10
    2e16:	9e 2e       	mov	r9, r30
                    while (1)
                    {
                        data_buf[data_idx] = u32_val % 10 + '0';
    2e18:	81 01       	movw	r16, r2
    2e1a:	09 0d       	add	r16, r9
    2e1c:	11 1d       	adc	r17, r1
    2e1e:	c7 01       	movw	r24, r14
    2e20:	b6 01       	movw	r22, r12
    2e22:	2a e0       	ldi	r18, 0x0A	; 10
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	40 e0       	ldi	r20, 0x00	; 0
    2e28:	50 e0       	ldi	r21, 0x00	; 0
    2e2a:	0e 94 88 21 	call	0x4310	; 0x4310 <__udivmodsi4>
    2e2e:	60 5d       	subi	r22, 0xD0	; 208
    2e30:	d8 01       	movw	r26, r16
    2e32:	6c 93       	st	X, r22
                        u32_val /= 10;
    2e34:	c7 01       	movw	r24, r14
    2e36:	b6 01       	movw	r22, r12
    2e38:	2a e0       	ldi	r18, 0x0A	; 10
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	40 e0       	ldi	r20, 0x00	; 0
    2e3e:	50 e0       	ldi	r21, 0x00	; 0
    2e40:	0e 94 88 21 	call	0x4310	; 0x4310 <__udivmodsi4>
    2e44:	c9 01       	movw	r24, r18
    2e46:	da 01       	movw	r26, r20
    2e48:	6c 01       	movw	r12, r24
    2e4a:	7d 01       	movw	r14, r26
                        data_idx--;
    2e4c:	9a 94       	dec	r9
						if (u32_val==0) break;
    2e4e:	c1 14       	cp	r12, r1
    2e50:	d1 04       	cpc	r13, r1
    2e52:	e1 04       	cpc	r14, r1
    2e54:	f1 04       	cpc	r15, r1
    2e56:	01 f7       	brne	.-64     	; 0x2e18 <uart_mini_printf+0x388>
                }
                data_buf[DATA_BUF_LEN-1] = 0;
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
                {
                    u32_val = va_arg(arg_ptr, U32);
    2e58:	85 01       	movw	r16, r10
    2e5a:	0c 5f       	subi	r16, 0xFC	; 252
    2e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5e:	1c c0       	rjmp	.+56     	; 0x2e98 <uart_mini_printf+0x408>
						if (u32_val==0) break;
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
    2e60:	f5 01       	movw	r30, r10
    2e62:	20 81       	ld	r18, Z
    2e64:	31 81       	ldd	r19, Z+1	; 0x01
    2e66:	7a e0       	ldi	r23, 0x0A	; 10
    2e68:	97 2e       	mov	r9, r23
                    while (1)
                    {
                        data_buf[data_idx] = u16_val % 10 + '0';
    2e6a:	f1 01       	movw	r30, r2
    2e6c:	e9 0d       	add	r30, r9
    2e6e:	f1 1d       	adc	r31, r1
    2e70:	c9 01       	movw	r24, r18
    2e72:	6a e0       	ldi	r22, 0x0A	; 10
    2e74:	70 e0       	ldi	r23, 0x00	; 0
    2e76:	0e 94 61 21 	call	0x42c2	; 0x42c2 <__udivmodhi4>
    2e7a:	80 5d       	subi	r24, 0xD0	; 208
    2e7c:	80 83       	st	Z, r24
                        data_idx--;
    2e7e:	9a 94       	dec	r9
                        u16_val /= 10;
    2e80:	c9 01       	movw	r24, r18
    2e82:	6a e0       	ldi	r22, 0x0A	; 10
    2e84:	70 e0       	ldi	r23, 0x00	; 0
    2e86:	0e 94 61 21 	call	0x42c2	; 0x42c2 <__udivmodhi4>
    2e8a:	9b 01       	movw	r18, r22
						if (u16_val==0) break;
    2e8c:	61 15       	cp	r22, r1
    2e8e:	71 05       	cpc	r23, r1
    2e90:	61 f7       	brne	.-40     	; 0x2e6a <uart_mini_printf+0x3da>
						if (u32_val==0) break;
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
    2e92:	85 01       	movw	r16, r10
    2e94:	0e 5f       	subi	r16, 0xFE	; 254
    2e96:	1f 4f       	sbci	r17, 0xFF	; 255
                        data_idx--;
                        u16_val /= 10;
						if (u16_val==0) break;
                    }
                }
                data_idx++;
    2e98:	89 2d       	mov	r24, r9
    2e9a:	8f 5f       	subi	r24, 0xFF	; 255
                if (min_size < data_idx)
                {
                    data_idx = min_size;
                }
                uart_put_string (data_buf + data_idx);
    2e9c:	88 16       	cp	r8, r24
    2e9e:	08 f4       	brcc	.+2      	; 0x2ea2 <uart_mini_printf+0x412>
    2ea0:	88 2d       	mov	r24, r8
    2ea2:	91 01       	movw	r18, r2
    2ea4:	28 0f       	add	r18, r24
    2ea6:	31 1d       	adc	r19, r1
    2ea8:	c9 01       	movw	r24, r18
    2eaa:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <uart_put_string>
    2eae:	f3 01       	movw	r30, r6
    2eb0:	22 c1       	rjmp	.+580    	; 0x30f6 <uart_mini_printf+0x666>
                // Clean up
                min_size = DATA_BUF_LEN-1;
                alt_p_c = FALSE;
                long_flag = FALSE;
                break;  // case 'u':
    2eb2:	f1 01       	movw	r30, r2
                
            case 'x':
            case 'X':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
                {
                    data_buf[data_idx] = '0';
    2eb4:	30 e3       	ldi	r19, 0x30	; 48
    2eb6:	31 93       	st	Z+, r19
                long_flag = FALSE;
                break;  // case 'u':
                
            case 'x':
            case 'X':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2eb8:	ad 85       	ldd	r26, Y+13	; 0x0d
    2eba:	be 85       	ldd	r27, Y+14	; 0x0e
    2ebc:	ea 17       	cp	r30, r26
    2ebe:	fb 07       	cpc	r31, r27
    2ec0:	c9 f7       	brne	.-14     	; 0x2eb4 <uart_mini_printf+0x424>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    2ec2:	1c 86       	std	Y+12, r1	; 0x0c
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
    2ec4:	99 23       	and	r25, r25
    2ec6:	69 f1       	breq	.+90     	; 0x2f22 <uart_mini_printf+0x492>
                { 
                    u32_val = va_arg(arg_ptr, U32);
    2ec8:	f5 01       	movw	r30, r10
    2eca:	20 81       	ld	r18, Z
    2ecc:	31 81       	ldd	r19, Z+1	; 0x01
    2ece:	42 81       	ldd	r20, Z+2	; 0x02
    2ed0:	53 81       	ldd	r21, Z+3	; 0x03
    2ed2:	7a e0       	ldi	r23, 0x0A	; 10
    2ed4:	1d c0       	rjmp	.+58     	; 0x2f10 <uart_mini_printf+0x480>
                    while (u32_val)
                    {
                        u8_temp = (U8)(u32_val & 0x0F);
    2ed6:	92 2f       	mov	r25, r18
    2ed8:	9f 70       	andi	r25, 0x0F	; 15
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
    2eda:	9a 30       	cpi	r25, 0x0A	; 10
    2edc:	18 f4       	brcc	.+6      	; 0x2ee4 <uart_mini_printf+0x454>
    2ede:	89 2f       	mov	r24, r25
    2ee0:	80 5d       	subi	r24, 0xD0	; 208
    2ee2:	0a c0       	rjmp	.+20     	; 0x2ef8 <uart_mini_printf+0x468>
    2ee4:	d3 01       	movw	r26, r6
    2ee6:	8c 91       	ld	r24, X
    2ee8:	88 37       	cpi	r24, 0x78	; 120
    2eea:	11 f0       	breq	.+4      	; 0x2ef0 <uart_mini_printf+0x460>
    2eec:	61 e4       	ldi	r22, 0x41	; 65
    2eee:	01 c0       	rjmp	.+2      	; 0x2ef2 <uart_mini_printf+0x462>
    2ef0:	61 e6       	ldi	r22, 0x61	; 97
    2ef2:	89 2f       	mov	r24, r25
    2ef4:	8a 50       	subi	r24, 0x0A	; 10
    2ef6:	86 0f       	add	r24, r22
    2ef8:	f1 01       	movw	r30, r2
    2efa:	e7 0f       	add	r30, r23
    2efc:	f1 1d       	adc	r31, r1
    2efe:	80 83       	st	Z, r24
                        u32_val >>= 4;
    2f00:	64 e0       	ldi	r22, 0x04	; 4
    2f02:	56 95       	lsr	r21
    2f04:	47 95       	ror	r20
    2f06:	37 95       	ror	r19
    2f08:	27 95       	ror	r18
    2f0a:	6a 95       	dec	r22
    2f0c:	d1 f7       	brne	.-12     	; 0x2f02 <uart_mini_printf+0x472>
                        data_idx--;
    2f0e:	71 50       	subi	r23, 0x01	; 1
                data_buf[DATA_BUF_LEN-1] = 0;
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
                { 
                    u32_val = va_arg(arg_ptr, U32);
                    while (u32_val)
    2f10:	21 15       	cp	r18, r1
    2f12:	31 05       	cpc	r19, r1
    2f14:	41 05       	cpc	r20, r1
    2f16:	51 05       	cpc	r21, r1
    2f18:	f1 f6       	brne	.-68     	; 0x2ed6 <uart_mini_printf+0x446>
                }
                data_buf[DATA_BUF_LEN-1] = 0;
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
                { 
                    u32_val = va_arg(arg_ptr, U32);
    2f1a:	85 01       	movw	r16, r10
    2f1c:	0c 5f       	subi	r16, 0xFC	; 252
    2f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f20:	26 c0       	rjmp	.+76     	; 0x2f6e <uart_mini_printf+0x4de>
                        data_idx--;
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
    2f22:	f5 01       	movw	r30, r10
    2f24:	20 81       	ld	r18, Z
    2f26:	31 81       	ldd	r19, Z+1	; 0x01
    2f28:	7a e0       	ldi	r23, 0x0A	; 10
    2f2a:	1b c0       	rjmp	.+54     	; 0x2f62 <uart_mini_printf+0x4d2>
                    while (u16_val)
                    {
                        u8_temp = (U8)(u16_val & 0x0F);
    2f2c:	92 2f       	mov	r25, r18
    2f2e:	9f 70       	andi	r25, 0x0F	; 15
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
    2f30:	9a 30       	cpi	r25, 0x0A	; 10
    2f32:	18 f4       	brcc	.+6      	; 0x2f3a <uart_mini_printf+0x4aa>
    2f34:	89 2f       	mov	r24, r25
    2f36:	80 5d       	subi	r24, 0xD0	; 208
    2f38:	0a c0       	rjmp	.+20     	; 0x2f4e <uart_mini_printf+0x4be>
    2f3a:	d3 01       	movw	r26, r6
    2f3c:	8c 91       	ld	r24, X
    2f3e:	88 37       	cpi	r24, 0x78	; 120
    2f40:	11 f0       	breq	.+4      	; 0x2f46 <uart_mini_printf+0x4b6>
    2f42:	41 e4       	ldi	r20, 0x41	; 65
    2f44:	01 c0       	rjmp	.+2      	; 0x2f48 <uart_mini_printf+0x4b8>
    2f46:	41 e6       	ldi	r20, 0x61	; 97
    2f48:	89 2f       	mov	r24, r25
    2f4a:	8a 50       	subi	r24, 0x0A	; 10
    2f4c:	84 0f       	add	r24, r20
    2f4e:	f1 01       	movw	r30, r2
    2f50:	e7 0f       	add	r30, r23
    2f52:	f1 1d       	adc	r31, r1
    2f54:	80 83       	st	Z, r24
                        u16_val >>= 4;
    2f56:	44 e0       	ldi	r20, 0x04	; 4
    2f58:	36 95       	lsr	r19
    2f5a:	27 95       	ror	r18
    2f5c:	4a 95       	dec	r20
    2f5e:	e1 f7       	brne	.-8      	; 0x2f58 <uart_mini_printf+0x4c8>
                        data_idx--;
    2f60:	71 50       	subi	r23, 0x01	; 1
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
                    while (u16_val)
    2f62:	21 15       	cp	r18, r1
    2f64:	31 05       	cpc	r19, r1
    2f66:	11 f7       	brne	.-60     	; 0x2f2c <uart_mini_printf+0x49c>
                        data_idx--;
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
    2f68:	85 01       	movw	r16, r10
    2f6a:	0e 5f       	subi	r16, 0xFE	; 254
    2f6c:	1f 4f       	sbci	r17, 0xFF	; 255
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
                        u16_val >>= 4;
                        data_idx--;
                    }
                }
                data_idx++;
    2f6e:	87 2f       	mov	r24, r23
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
                if (min_size < data_idx)
                {
                    data_idx = min_size;
                }
                uart_put_string (data_buf + data_idx);
    2f72:	88 16       	cp	r8, r24
    2f74:	08 f4       	brcc	.+2      	; 0x2f78 <uart_mini_printf+0x4e8>
    2f76:	88 2d       	mov	r24, r8
    2f78:	f1 01       	movw	r30, r2
    2f7a:	e8 0f       	add	r30, r24
    2f7c:	f1 1d       	adc	r31, r1
    2f7e:	cf 01       	movw	r24, r30
    2f80:	94 cf       	rjmp	.-216    	; 0x2eaa <uart_mini_printf+0x41a>
                long_flag = FALSE;
                break;  // case 'x' & 'X'
                
            case '0':   // Max allowed "min_size" 2 decimal digit, truncated to DATA_BUF_LEN-1.
                min_size = DATA_BUF_LEN-1;
                if (long_flag == TRUE)      // ERROR: 'l' before '0'
    2f82:	91 30       	cpi	r25, 0x01	; 1
    2f84:	49 f5       	brne	.+82     	; 0x2fd8 <uart_mini_printf+0x548>
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    2f86:	90 91 d8 03 	lds	r25, 0x03D8
    2f8a:	99 23       	and	r25, r25
    2f8c:	29 f4       	brne	.+10     	; 0x2f98 <uart_mini_printf+0x508>
    2f8e:	80 91 c0 00 	lds	r24, 0x00C0
    2f92:	85 fd       	sbrc	r24, 5
    2f94:	06 c0       	rjmp	.+12     	; 0x2fa2 <uart_mini_printf+0x512>
    2f96:	fb cf       	rjmp	.-10     	; 0x2f8e <uart_mini_printf+0x4fe>
    2f98:	80 91 c8 00 	lds	r24, 0x00C8
    2f9c:	85 fd       	sbrc	r24, 5
    2f9e:	06 c0       	rjmp	.+12     	; 0x2fac <uart_mini_printf+0x51c>
    2fa0:	f4 cf       	rjmp	.-24     	; 0x2f8a <uart_mini_printf+0x4fa>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2fa2:	40 92 c6 00 	sts	0x00C6, r4
    2fa6:	80 91 c6 00 	lds	r24, 0x00C6
    2faa:	04 c0       	rjmp	.+8      	; 0x2fb4 <uart_mini_printf+0x524>
    2fac:	40 92 ce 00 	sts	0x00CE, r4
    2fb0:	80 91 ce 00 	lds	r24, 0x00CE
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    2fb4:	99 23       	and	r25, r25
    2fb6:	29 f4       	brne	.+10     	; 0x2fc2 <uart_mini_printf+0x532>
    2fb8:	80 91 c0 00 	lds	r24, 0x00C0
    2fbc:	85 fd       	sbrc	r24, 5
    2fbe:	06 c0       	rjmp	.+12     	; 0x2fcc <uart_mini_printf+0x53c>
    2fc0:	fb cf       	rjmp	.-10     	; 0x2fb8 <uart_mini_printf+0x528>
    2fc2:	80 91 c8 00 	lds	r24, 0x00C8
    2fc6:	85 fd       	sbrc	r24, 5
    2fc8:	05 c0       	rjmp	.+10     	; 0x2fd4 <uart_mini_printf+0x544>
    2fca:	f4 cf       	rjmp	.-24     	; 0x2fb4 <uart_mini_printf+0x524>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2fcc:	f0 e3       	ldi	r31, 0x30	; 48
    2fce:	f0 93 c6 00 	sts	0x00C6, r31
    2fd2:	88 c0       	rjmp	.+272    	; 0x30e4 <uart_mini_printf+0x654>
    2fd4:	20 e3       	ldi	r18, 0x30	; 48
    2fd6:	89 c0       	rjmp	.+274    	; 0x30ea <uart_mini_printf+0x65a>
                    // Clean up
                    alt_p_c = FALSE;
                    long_flag = FALSE;
                    break;
                }
                u8_temp = *++p;
    2fd8:	f3 01       	movw	r30, r6
    2fda:	31 96       	adiw	r30, 0x01	; 1
    2fdc:	d3 01       	movw	r26, r6
    2fde:	11 96       	adiw	r26, 0x01	; 1
    2fe0:	9c 91       	ld	r25, X
                if ((u8_temp >='0') && (u8_temp <='9'))
    2fe2:	89 2f       	mov	r24, r25
    2fe4:	80 53       	subi	r24, 0x30	; 48
    2fe6:	8a 30       	cpi	r24, 0x0A	; 10
    2fe8:	20 f5       	brcc	.+72     	; 0x3032 <uart_mini_printf+0x5a2>
                {
                    min_size = u8_temp & 0x0F;
    2fea:	9f 70       	andi	r25, 0x0F	; 15
                    u8_temp = *++p;
    2fec:	af 01       	movw	r20, r30
    2fee:	4f 5f       	subi	r20, 0xFF	; 255
    2ff0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff2:	21 81       	ldd	r18, Z+1	; 0x01
                    if ((u8_temp >='0') && (u8_temp <='9'))
    2ff4:	82 2f       	mov	r24, r18
    2ff6:	80 53       	subi	r24, 0x30	; 48
    2ff8:	8a 30       	cpi	r24, 0x0A	; 10
    2ffa:	30 f4       	brcc	.+12     	; 0x3008 <uart_mini_printf+0x578>
                    {
                        min_size <<= 4;
                        min_size |= (u8_temp & 0x0F);
    2ffc:	2f 70       	andi	r18, 0x0F	; 15
    2ffe:	92 95       	swap	r25
    3000:	90 7f       	andi	r25, 0xF0	; 240
    3002:	92 2b       	or	r25, r18
                        p++;
    3004:	4f 5f       	subi	r20, 0xFF	; 255
    3006:	5f 4f       	sbci	r21, 0xFF	; 255
                    }
                    min_size = ((min_size & 0x0F) + ((min_size >> 4) *10));  // Decimal to hexa
    3008:	89 2f       	mov	r24, r25
    300a:	82 95       	swap	r24
    300c:	8f 70       	andi	r24, 0x0F	; 15
    300e:	ba e0       	ldi	r27, 0x0A	; 10
    3010:	8b 9f       	mul	r24, r27
    3012:	80 2d       	mov	r24, r0
    3014:	11 24       	eor	r1, r1
    3016:	9f 70       	andi	r25, 0x0F	; 15
    3018:	89 0f       	add	r24, r25
    301a:	8c 30       	cpi	r24, 0x0C	; 12
    301c:	08 f0       	brcs	.+2      	; 0x3020 <uart_mini_printf+0x590>
    301e:	8b e0       	ldi	r24, 0x0B	; 11
                    if (min_size > (DATA_BUF_LEN-1))
                    {
                        min_size = (DATA_BUF_LEN-1);
                    }  // Truncation
                    min_size = DATA_BUF_LEN-1 - min_size;  // "min_size" formatted as "data_ix"
    3020:	9b e0       	ldi	r25, 0x0B	; 11
    3022:	89 2e       	mov	r8, r25
    3024:	88 1a       	sub	r8, r24
                    // Clean up
                    alt_p_c = FALSE;
                    long_flag = FALSE;
                    break;
                }
                p-=2;
    3026:	fa 01       	movw	r30, r20
    3028:	32 97       	sbiw	r30, 0x02	; 2
    302a:	85 01       	movw	r16, r10
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	66 c0       	rjmp	.+204    	; 0x30fe <uart_mini_printf+0x66e>
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    3032:	20 91 d8 03 	lds	r18, 0x03D8
    3036:	22 23       	and	r18, r18
    3038:	29 f4       	brne	.+10     	; 0x3044 <uart_mini_printf+0x5b4>
    303a:	80 91 c0 00 	lds	r24, 0x00C0
    303e:	85 fd       	sbrc	r24, 5
    3040:	06 c0       	rjmp	.+12     	; 0x304e <uart_mini_printf+0x5be>
    3042:	fb cf       	rjmp	.-10     	; 0x303a <uart_mini_printf+0x5aa>
    3044:	80 91 c8 00 	lds	r24, 0x00C8
    3048:	85 fd       	sbrc	r24, 5
    304a:	07 c0       	rjmp	.+14     	; 0x305a <uart_mini_printf+0x5ca>
    304c:	f4 cf       	rjmp	.-24     	; 0x3036 <uart_mini_printf+0x5a6>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    304e:	30 e3       	ldi	r19, 0x30	; 48
    3050:	30 93 c6 00 	sts	0x00C6, r19
    3054:	80 91 c6 00 	lds	r24, 0x00C6
    3058:	05 c0       	rjmp	.+10     	; 0x3064 <uart_mini_printf+0x5d4>
    305a:	80 e3       	ldi	r24, 0x30	; 48
    305c:	80 93 ce 00 	sts	0x00CE, r24
    3060:	80 91 ce 00 	lds	r24, 0x00CE
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    3064:	22 23       	and	r18, r18
    3066:	29 f4       	brne	.+10     	; 0x3072 <uart_mini_printf+0x5e2>
    3068:	80 91 c0 00 	lds	r24, 0x00C0
    306c:	85 fd       	sbrc	r24, 5
    306e:	06 c0       	rjmp	.+12     	; 0x307c <uart_mini_printf+0x5ec>
    3070:	fb cf       	rjmp	.-10     	; 0x3068 <uart_mini_printf+0x5d8>
    3072:	80 91 c8 00 	lds	r24, 0x00C8
    3076:	85 fd       	sbrc	r24, 5
    3078:	06 c0       	rjmp	.+12     	; 0x3086 <uart_mini_printf+0x5f6>
    307a:	f4 cf       	rjmp	.-24     	; 0x3064 <uart_mini_printf+0x5d4>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    307c:	90 93 c6 00 	sts	0x00C6, r25
    3080:	80 91 c6 00 	lds	r24, 0x00C6
    3084:	37 c0       	rjmp	.+110    	; 0x30f4 <uart_mini_printf+0x664>
    3086:	90 93 ce 00 	sts	0x00CE, r25
    308a:	80 91 ce 00 	lds	r24, 0x00CE
    308e:	32 c0       	rjmp	.+100    	; 0x30f4 <uart_mini_printf+0x664>
                // Clean up
                long_flag = FALSE;
                break;  // case '0'
                
            default:
                if (long_flag == TRUE)
    3090:	91 30       	cpi	r25, 0x01	; 1
    3092:	91 f4       	brne	.+36     	; 0x30b8 <uart_mini_printf+0x628>
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    3094:	90 91 d8 03 	lds	r25, 0x03D8
    3098:	99 23       	and	r25, r25
    309a:	29 f4       	brne	.+10     	; 0x30a6 <uart_mini_printf+0x616>
    309c:	80 91 c0 00 	lds	r24, 0x00C0
    30a0:	85 fd       	sbrc	r24, 5
    30a2:	06 c0       	rjmp	.+12     	; 0x30b0 <uart_mini_printf+0x620>
    30a4:	fb cf       	rjmp	.-10     	; 0x309c <uart_mini_printf+0x60c>
    30a6:	80 91 c8 00 	lds	r24, 0x00C8
    30aa:	85 fd       	sbrc	r24, 5
    30ac:	08 c0       	rjmp	.+16     	; 0x30be <uart_mini_printf+0x62e>
    30ae:	f4 cf       	rjmp	.-24     	; 0x3098 <uart_mini_printf+0x608>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    30b0:	40 92 c6 00 	sts	0x00C6, r4
    30b4:	80 91 c6 00 	lds	r24, 0x00C6
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    30b8:	90 91 d8 03 	lds	r25, 0x03D8
    30bc:	05 c0       	rjmp	.+10     	; 0x30c8 <uart_mini_printf+0x638>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    30be:	40 92 ce 00 	sts	0x00CE, r4
    30c2:	80 91 ce 00 	lds	r24, 0x00CE
    30c6:	f8 cf       	rjmp	.-16     	; 0x30b8 <uart_mini_printf+0x628>
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    while(!Uart_tx_ready());
    30c8:	99 23       	and	r25, r25
    30ca:	29 f4       	brne	.+10     	; 0x30d6 <uart_mini_printf+0x646>
    30cc:	80 91 c0 00 	lds	r24, 0x00C0
    30d0:	85 fd       	sbrc	r24, 5
    30d2:	06 c0       	rjmp	.+12     	; 0x30e0 <uart_mini_printf+0x650>
    30d4:	fb cf       	rjmp	.-10     	; 0x30cc <uart_mini_printf+0x63c>
    30d6:	80 91 c8 00 	lds	r24, 0x00C8
    30da:	85 fd       	sbrc	r24, 5
    30dc:	06 c0       	rjmp	.+12     	; 0x30ea <uart_mini_printf+0x65a>
    30de:	f4 cf       	rjmp	.-24     	; 0x30c8 <uart_mini_printf+0x638>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    30e0:	20 93 c6 00 	sts	0x00C6, r18
    30e4:	80 91 c6 00 	lds	r24, 0x00C6
    30e8:	04 c0       	rjmp	.+8      	; 0x30f2 <uart_mini_printf+0x662>
    30ea:	20 93 ce 00 	sts	0x00CE, r18
    30ee:	80 91 ce 00 	lds	r24, 0x00CE
    30f2:	f3 01       	movw	r30, r6
    30f4:	85 01       	movw	r16, r10
    30f6:	8b e0       	ldi	r24, 0x0B	; 11
    30f8:	88 2e       	mov	r8, r24
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    long_flag = FALSE;
    alt_p_c = FALSE;
    min_size = DATA_BUF_LEN-1;

    va_start(arg_ptr, format);   // make arg_ptr point to the first unnamed arg
    for (p = (U8 *) format; *p; p++)
    30fe:	31 96       	adiw	r30, 0x01	; 1
    3100:	58 01       	movw	r10, r16
    3102:	20 81       	ld	r18, Z
    3104:	22 23       	and	r18, r18
    3106:	09 f0       	breq	.+2      	; 0x310a <uart_mini_printf+0x67a>
    3108:	f6 cc       	rjmp	.-1556   	; 0x2af6 <uart_mini_printf+0x66>
        
    }   // for (p = ...
    
    va_end(arg_ptr);
    return 0;
}
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	2e 96       	adiw	r28, 0x0e	; 14
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	1f 91       	pop	r17
    311e:	0f 91       	pop	r16
    3120:	ff 90       	pop	r15
    3122:	ef 90       	pop	r14
    3124:	df 90       	pop	r13
    3126:	cf 90       	pop	r12
    3128:	bf 90       	pop	r11
    312a:	af 90       	pop	r10
    312c:	9f 90       	pop	r9
    312e:	8f 90       	pop	r8
    3130:	7f 90       	pop	r7
    3132:	6f 90       	pop	r6
    3134:	5f 90       	pop	r5
    3136:	4f 90       	pop	r4
    3138:	3f 90       	pop	r3
    313a:	2f 90       	pop	r2
    313c:	08 95       	ret

0000313e <uart_init>:
//!         ==0: research of timing failed
//!         ==1: baudrate performed
//!
//------------------------------------------------------------------------------
U8 uart_init (U8 mode, U32 baudrate)
{
    313e:	1f 93       	push	r17
    3140:	18 2f       	mov	r17, r24
    Uart_clear();       // Flush, Disable and Reset UART
    3142:	80 91 d8 03 	lds	r24, 0x03D8
    3146:	88 23       	and	r24, r24
    3148:	89 f4       	brne	.+34     	; 0x316c <uart_init+0x2e>
    314a:	10 92 c1 00 	sts	0x00C1, r1
    314e:	80 91 c6 00 	lds	r24, 0x00C6
    3152:	80 93 c2 00 	sts	0x00C2, r24
    3156:	80 e4       	ldi	r24, 0x40	; 64
    3158:	80 93 c0 00 	sts	0x00C0, r24
    315c:	86 e0       	ldi	r24, 0x06	; 6
    315e:	80 93 c2 00 	sts	0x00C2, r24
    3162:	10 92 c5 00 	sts	0x00C5, r1
    3166:	10 92 c4 00 	sts	0x00C4, r1
    316a:	10 c0       	rjmp	.+32     	; 0x318c <uart_init+0x4e>
    316c:	10 92 c9 00 	sts	0x00C9, r1
    3170:	80 91 ce 00 	lds	r24, 0x00CE
    3174:	80 93 ca 00 	sts	0x00CA, r24
    3178:	80 e4       	ldi	r24, 0x40	; 64
    317a:	80 93 c8 00 	sts	0x00C8, r24
    317e:	86 e0       	ldi	r24, 0x06	; 6
    3180:	80 93 ca 00 	sts	0x00CA, r24
    3184:	10 92 cd 00 	sts	0x00CD, r1
    3188:	10 92 cc 00 	sts	0x00CC, r1
    if (Uart_set_baudrate(baudrate) == 0) return 0;  //!<  c.f. macro in "uart_drv.h"
    318c:	cb 01       	movw	r24, r22
    318e:	ba 01       	movw	r22, r20
    3190:	0e 94 21 19 	call	0x3242	; 0x3242 <uart_set_baudrate>
    3194:	88 23       	and	r24, r24
    3196:	09 f4       	brne	.+2      	; 0x319a <uart_init+0x5c>
    3198:	52 c0       	rjmp	.+164    	; 0x323e <uart_init+0x100>
    Uart_hw_init(mode);     //!<  c.f. macro in "uart_drv.h"
    319a:	80 91 d8 03 	lds	r24, 0x03D8
    319e:	91 2f       	mov	r25, r17
    31a0:	94 70       	andi	r25, 0x04	; 4
    31a2:	41 2f       	mov	r20, r17
    31a4:	48 73       	andi	r20, 0x38	; 56
    31a6:	21 2f       	mov	r18, r17
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	88 23       	and	r24, r24
    31ac:	21 f5       	brne	.+72     	; 0x31f6 <uart_init+0xb8>
    31ae:	80 91 c0 00 	lds	r24, 0x00C0
    31b2:	80 62       	ori	r24, 0x20	; 32
    31b4:	80 93 c0 00 	sts	0x00C0, r24
    31b8:	80 91 c1 00 	lds	r24, 0x00C1
    31bc:	8b 7f       	andi	r24, 0xFB	; 251
    31be:	80 93 c1 00 	sts	0x00C1, r24
    31c2:	80 91 c1 00 	lds	r24, 0x00C1
    31c6:	98 2b       	or	r25, r24
    31c8:	90 93 c1 00 	sts	0x00C1, r25
    31cc:	40 93 c2 00 	sts	0x00C2, r20
    31d0:	80 91 c2 00 	lds	r24, 0x00C2
    31d4:	23 70       	andi	r18, 0x03	; 3
    31d6:	30 70       	andi	r19, 0x00	; 0
    31d8:	22 0f       	add	r18, r18
    31da:	33 1f       	adc	r19, r19
    31dc:	82 2b       	or	r24, r18
    31de:	80 93 c2 00 	sts	0x00C2, r24
    31e2:	80 91 c2 00 	lds	r24, 0x00C2
    Uart_enable();          //!<  c.f. macro in "uart_drv.h"
    31e6:	80 91 c1 00 	lds	r24, 0x00C1
    31ea:	88 61       	ori	r24, 0x18	; 24
    31ec:	80 93 c1 00 	sts	0x00C1, r24
    31f0:	80 91 c1 00 	lds	r24, 0x00C1
    31f4:	23 c0       	rjmp	.+70     	; 0x323c <uart_init+0xfe>
//------------------------------------------------------------------------------
U8 uart_init (U8 mode, U32 baudrate)
{
    Uart_clear();       // Flush, Disable and Reset UART
    if (Uart_set_baudrate(baudrate) == 0) return 0;  //!<  c.f. macro in "uart_drv.h"
    Uart_hw_init(mode);     //!<  c.f. macro in "uart_drv.h"
    31f6:	80 91 c8 00 	lds	r24, 0x00C8
    31fa:	80 62       	ori	r24, 0x20	; 32
    31fc:	80 93 c8 00 	sts	0x00C8, r24
    3200:	80 91 c9 00 	lds	r24, 0x00C9
    3204:	8b 7f       	andi	r24, 0xFB	; 251
    3206:	80 93 c9 00 	sts	0x00C9, r24
    320a:	80 91 c9 00 	lds	r24, 0x00C9
    320e:	98 2b       	or	r25, r24
    3210:	90 93 c9 00 	sts	0x00C9, r25
    3214:	40 93 ca 00 	sts	0x00CA, r20
    3218:	80 91 ca 00 	lds	r24, 0x00CA
    321c:	23 70       	andi	r18, 0x03	; 3
    321e:	30 70       	andi	r19, 0x00	; 0
    3220:	22 0f       	add	r18, r18
    3222:	33 1f       	adc	r19, r19
    3224:	82 2b       	or	r24, r18
    3226:	80 93 ca 00 	sts	0x00CA, r24
    322a:	80 91 ca 00 	lds	r24, 0x00CA
    Uart_enable();          //!<  c.f. macro in "uart_drv.h"
    322e:	80 91 c9 00 	lds	r24, 0x00C9
    3232:	88 61       	ori	r24, 0x18	; 24
    3234:	80 93 c9 00 	sts	0x00C9, r24
    3238:	80 91 c9 00 	lds	r24, 0x00C9
    323c:	81 e0       	ldi	r24, 0x01	; 1
    return (1);
}
    323e:	1f 91       	pop	r17
    3240:	08 95       	ret

00003242 <uart_set_baudrate>:
//! @return Baudrate Status
//!         ==0: baudrate configuration failed
//!         ==1: baudrate performed
//------------------------------------------------------------------------------
U8 uart_set_baudrate (U32 baudrate)
{
    3242:	ef 92       	push	r14
    3244:	ff 92       	push	r15
    3246:	0f 93       	push	r16
    3248:	1f 93       	push	r17
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
    324e:	9b 01       	movw	r18, r22
    3250:	ac 01       	movw	r20, r24
    U16 t_meas_0, t_meas_1, t_meas_2, t_meas_3, t_meas_4;
    U16 t_min, t_max;

    if (baudrate != 0)
    3252:	61 15       	cp	r22, r1
    3254:	71 05       	cpc	r23, r1
    3256:	81 05       	cpc	r24, r1
    3258:	91 05       	cpc	r25, r1
    325a:	b1 f0       	breq	.+44     	; 0x3288 <uart_set_baudrate+0x46>
    {
        // UBRRN Value (rounded to nearest division) with U2Xn=1
        t_meas_4 = (U16)(( (((((U32)FOSC*1000)<<1)/((U32)baudrate*8))+1)>>1)-1);
    325c:	63 e0       	ldi	r22, 0x03	; 3
    325e:	22 0f       	add	r18, r18
    3260:	33 1f       	adc	r19, r19
    3262:	44 1f       	adc	r20, r20
    3264:	55 1f       	adc	r21, r21
    3266:	6a 95       	dec	r22
    3268:	d1 f7       	brne	.-12     	; 0x325e <uart_set_baudrate+0x1c>
    326a:	60 e0       	ldi	r22, 0x00	; 0
    326c:	78 e4       	ldi	r23, 0x48	; 72
    326e:	88 ee       	ldi	r24, 0xE8	; 232
    3270:	91 e0       	ldi	r25, 0x01	; 1
    3272:	0e 94 88 21 	call	0x4310	; 0x4310 <__udivmodsi4>
    3276:	2f 5f       	subi	r18, 0xFF	; 255
    3278:	3f 4f       	sbci	r19, 0xFF	; 255
    327a:	4f 4f       	sbci	r20, 0xFF	; 255
    327c:	5f 4f       	sbci	r21, 0xFF	; 255
    327e:	56 95       	lsr	r21
    3280:	47 95       	ror	r20
    3282:	37 95       	ror	r19
    3284:	27 95       	ror	r18
    3286:	fb c1       	rjmp	.+1014   	; 0x367e <uart_set_baudrate+0x43c>
    }
    else    // Wait for only one "U" ASCII Char (0x55)
            // Autobaud using "USE_TIMER16" definition
    {
        // Autobaud set-up
        Uart_rx_in_pu_on();     // RxD in input + pull up
    3288:	60 91 d8 03 	lds	r22, 0x03D8
    328c:	66 23       	and	r22, r22
    328e:	39 f4       	brne	.+14     	; 0x329e <uart_set_baudrate+0x5c>
    3290:	68 98       	cbi	0x0d, 0	; 13
    3292:	70 9a       	sbi	0x0e, 0	; 14
    3294:	8e b1       	in	r24, 0x0e	; 14
        Uart_tx_in_pu_on();     // TxD in input + pull up
    3296:	69 98       	cbi	0x0d, 1	; 13
    3298:	71 9a       	sbi	0x0e, 1	; 14
    329a:	8e b1       	in	r24, 0x0e	; 14
    329c:	06 c0       	rjmp	.+12     	; 0x32aa <uart_set_baudrate+0x68>
    }
    else    // Wait for only one "U" ASCII Char (0x55)
            // Autobaud using "USE_TIMER16" definition
    {
        // Autobaud set-up
        Uart_rx_in_pu_on();     // RxD in input + pull up
    329e:	52 98       	cbi	0x0a, 2	; 10
    32a0:	5a 9a       	sbi	0x0b, 2	; 11
    32a2:	8b b1       	in	r24, 0x0b	; 11
        Uart_tx_in_pu_on();     // TxD in input + pull up
    32a4:	53 98       	cbi	0x0a, 3	; 10
    32a6:	5b 9a       	sbi	0x0b, 3	; 11
    32a8:	8b b1       	in	r24, 0x0b	; 11
        Timer16_clear();        // Flush, Disable and Reset TIMER16
    32aa:	70 91 d9 03 	lds	r23, 0x03D9
    32ae:	71 30       	cpi	r23, 0x01	; 1
    32b0:	d9 f4       	brne	.+54     	; 0x32e8 <uart_set_baudrate+0xa6>
    32b2:	10 92 81 00 	sts	0x0081, r1
    32b6:	10 92 80 00 	sts	0x0080, r1
    32ba:	10 92 82 00 	sts	0x0082, r1
    32be:	10 92 85 00 	sts	0x0085, r1
    32c2:	10 92 84 00 	sts	0x0084, r1
    32c6:	10 92 89 00 	sts	0x0089, r1
    32ca:	10 92 88 00 	sts	0x0088, r1
    32ce:	10 92 8b 00 	sts	0x008B, r1
    32d2:	10 92 8a 00 	sts	0x008A, r1
    32d6:	10 92 8d 00 	sts	0x008D, r1
    32da:	10 92 8c 00 	sts	0x008C, r1
    32de:	10 92 87 00 	sts	0x0087, r1
    32e2:	10 92 86 00 	sts	0x0086, r1
    32e6:	1a c0       	rjmp	.+52     	; 0x331c <uart_set_baudrate+0xda>
    32e8:	10 92 91 00 	sts	0x0091, r1
    32ec:	10 92 90 00 	sts	0x0090, r1
    32f0:	10 92 92 00 	sts	0x0092, r1
    32f4:	10 92 95 00 	sts	0x0095, r1
    32f8:	10 92 94 00 	sts	0x0094, r1
    32fc:	10 92 99 00 	sts	0x0099, r1
    3300:	10 92 98 00 	sts	0x0098, r1
    3304:	10 92 9b 00 	sts	0x009B, r1
    3308:	10 92 9a 00 	sts	0x009A, r1
    330c:	10 92 9d 00 	sts	0x009D, r1
    3310:	10 92 9c 00 	sts	0x009C, r1
    3314:	10 92 97 00 	sts	0x0097, r1
    3318:	10 92 96 00 	sts	0x0096, r1

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_3_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    331c:	66 23       	and	r22, r22
    331e:	39 f4       	brne	.+14     	; 0x332e <uart_set_baudrate+0xec>
    {
        u8_temp = (UART_0_PORT_IN  & UART_0_PORT_IN  & UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    3320:	2c b1       	in	r18, 0x0c	; 12
    3322:	8c b1       	in	r24, 0x0c	; 12
    3324:	9c b1       	in	r25, 0x0c	; 12
    3326:	28 23       	and	r18, r24
    3328:	21 70       	andi	r18, 0x01	; 1
    332a:	29 23       	and	r18, r25
    332c:	0e c0       	rjmp	.+28     	; 0x334a <uart_set_baudrate+0x108>
    }
    if (uart_selected == UART_1)
    332e:	61 30       	cpi	r22, 0x01	; 1
    3330:	a9 f7       	brne	.-22     	; 0x331c <uart_set_baudrate+0xda>
    {
        u8_temp = (UART_1_PORT_IN  & UART_1_PORT_IN  & UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    3332:	89 b1       	in	r24, 0x09	; 9
    3334:	29 b1       	in	r18, 0x09	; 9
    3336:	99 b1       	in	r25, 0x09	; 9
    3338:	28 23       	and	r18, r24
    333a:	29 23       	and	r18, r25
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	24 70       	andi	r18, 0x04	; 4
    3340:	30 70       	andi	r19, 0x00	; 0
    3342:	35 95       	asr	r19
    3344:	27 95       	ror	r18
    3346:	35 95       	asr	r19
    3348:	27 95       	ror	r18
// processed on all falling edges,  the start of the whole measurement will be
// done from the start of bit 1 (failling edge detection) of the 'U' character.
//
#ifndef SOF_DETECTED        
        // Wait for falling edge of SOF.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
    334a:	22 23       	and	r18, r18
    334c:	39 f3       	breq	.-50     	; 0x331c <uart_set_baudrate+0xda>

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    334e:	66 23       	and	r22, r22
    3350:	19 f4       	brne	.+6      	; 0x3358 <uart_set_baudrate+0x116>
    {
        u8_temp = (UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    3352:	8c b1       	in	r24, 0x0c	; 12
    3354:	81 70       	andi	r24, 0x01	; 1
    3356:	0a c0       	rjmp	.+20     	; 0x336c <uart_set_baudrate+0x12a>
    }
    if (uart_selected == UART_1)
    3358:	61 30       	cpi	r22, 0x01	; 1
    335a:	51 f4       	brne	.+20     	; 0x3370 <uart_set_baudrate+0x12e>
    {
        u8_temp = (UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    335c:	89 b1       	in	r24, 0x09	; 9
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	84 70       	andi	r24, 0x04	; 4
    3362:	90 70       	andi	r25, 0x00	; 0
    3364:	95 95       	asr	r25
    3366:	87 95       	ror	r24
    3368:	95 95       	asr	r25
    336a:	87 95       	ror	r24
// done from the start of bit 1 (failling edge detection) of the 'U' character.
//
#ifndef SOF_DETECTED        
        // Wait for falling edge of SOF.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
    336c:	88 23       	and	r24, r24
    336e:	79 f7       	brne	.-34     	; 0x334e <uart_set_baudrate+0x10c>

        // SOF Detected => Start Timer
        Timer16_set_clock(TIMER16_CLKIO_BY_1);     
    3370:	71 30       	cpi	r23, 0x01	; 1
    3372:	49 f4       	brne	.+18     	; 0x3386 <uart_set_baudrate+0x144>
    3374:	80 91 81 00 	lds	r24, 0x0081
    3378:	88 7f       	andi	r24, 0xF8	; 248
    337a:	81 60       	ori	r24, 0x01	; 1
    337c:	80 93 81 00 	sts	0x0081, r24
    3380:	80 91 81 00 	lds	r24, 0x0081
    3384:	08 c0       	rjmp	.+16     	; 0x3396 <uart_set_baudrate+0x154>
    3386:	80 91 91 00 	lds	r24, 0x0091
    338a:	88 7f       	andi	r24, 0xF8	; 248
    338c:	81 60       	ori	r24, 0x01	; 1
    338e:	80 93 91 00 	sts	0x0091, r24
    3392:	80 91 91 00 	lds	r24, 0x0091

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_3_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    3396:	66 23       	and	r22, r22
    3398:	39 f4       	brne	.+14     	; 0x33a8 <uart_set_baudrate+0x166>
    {
        u8_temp = (UART_0_PORT_IN  & UART_0_PORT_IN  & UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    339a:	2c b1       	in	r18, 0x0c	; 12
    339c:	8c b1       	in	r24, 0x0c	; 12
    339e:	9c b1       	in	r25, 0x0c	; 12
    33a0:	28 23       	and	r18, r24
    33a2:	21 70       	andi	r18, 0x01	; 1
    33a4:	29 23       	and	r18, r25
    33a6:	0e c0       	rjmp	.+28     	; 0x33c4 <uart_set_baudrate+0x182>
    }
    if (uart_selected == UART_1)
    33a8:	61 30       	cpi	r22, 0x01	; 1
    33aa:	a9 f7       	brne	.-22     	; 0x3396 <uart_set_baudrate+0x154>
    {
        u8_temp = (UART_1_PORT_IN  & UART_1_PORT_IN  & UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    33ac:	89 b1       	in	r24, 0x09	; 9
    33ae:	29 b1       	in	r18, 0x09	; 9
    33b0:	99 b1       	in	r25, 0x09	; 9
    33b2:	28 23       	and	r18, r24
    33b4:	29 23       	and	r18, r25
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	24 70       	andi	r18, 0x04	; 4
    33ba:	30 70       	andi	r19, 0x00	; 0
    33bc:	35 95       	asr	r19
    33be:	27 95       	ror	r18
    33c0:	35 95       	asr	r19
    33c2:	27 95       	ror	r18

        // SOF Detected => Start Timer
        Timer16_set_clock(TIMER16_CLKIO_BY_1);     

        // SOF + bit[0] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
    33c4:	22 23       	and	r18, r18
    33c6:	39 f3       	breq	.-50     	; 0x3396 <uart_set_baudrate+0x154>

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    33c8:	66 23       	and	r22, r22
    33ca:	19 f4       	brne	.+6      	; 0x33d2 <uart_set_baudrate+0x190>
    {
        u8_temp = (UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    33cc:	8c b1       	in	r24, 0x0c	; 12
    33ce:	81 70       	andi	r24, 0x01	; 1
    33d0:	0a c0       	rjmp	.+20     	; 0x33e6 <uart_set_baudrate+0x1a4>
    }
    if (uart_selected == UART_1)
    33d2:	61 30       	cpi	r22, 0x01	; 1
    33d4:	51 f4       	brne	.+20     	; 0x33ea <uart_set_baudrate+0x1a8>
    {
        u8_temp = (UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    33d6:	89 b1       	in	r24, 0x09	; 9
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	84 70       	andi	r24, 0x04	; 4
    33dc:	90 70       	andi	r25, 0x00	; 0
    33de:	95 95       	asr	r25
    33e0:	87 95       	ror	r24
    33e2:	95 95       	asr	r25
    33e4:	87 95       	ror	r24
        // SOF Detected => Start Timer
        Timer16_set_clock(TIMER16_CLKIO_BY_1);     

        // SOF + bit[0] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
    33e6:	88 23       	and	r24, r24
    33e8:	79 f7       	brne	.-34     	; 0x33c8 <uart_set_baudrate+0x186>
        //t_meas_0 = TCNT3;
        t_meas_0  =  Timer16_get_counter_low();
    33ea:	71 30       	cpi	r23, 0x01	; 1
    33ec:	29 f4       	brne	.+10     	; 0x33f8 <uart_set_baudrate+0x1b6>
    33ee:	90 91 84 00 	lds	r25, 0x0084
        t_meas_0 |= (Timer16_get_counter_high() << 8 );
    33f2:	80 91 85 00 	lds	r24, 0x0085
    33f6:	04 c0       	rjmp	.+8      	; 0x3400 <uart_set_baudrate+0x1be>

        // SOF + bit[0] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
        //t_meas_0 = TCNT3;
        t_meas_0  =  Timer16_get_counter_low();
    33f8:	90 91 94 00 	lds	r25, 0x0094
        t_meas_0 |= (Timer16_get_counter_high() << 8 );
    33fc:	80 91 95 00 	lds	r24, 0x0095
    3400:	38 2f       	mov	r19, r24
    3402:	20 e0       	ldi	r18, 0x00	; 0

        // SOF + bit[0] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
        //t_meas_0 = TCNT3;
        t_meas_0  =  Timer16_get_counter_low();
    3404:	09 2f       	mov	r16, r25
    3406:	10 e0       	ldi	r17, 0x00	; 0
        t_meas_0 |= (Timer16_get_counter_high() << 8 );
    3408:	02 2b       	or	r16, r18
    340a:	13 2b       	or	r17, r19

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_3_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    340c:	66 23       	and	r22, r22
    340e:	39 f4       	brne	.+14     	; 0x341e <uart_set_baudrate+0x1dc>
    {
        u8_temp = (UART_0_PORT_IN  & UART_0_PORT_IN  & UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    3410:	2c b1       	in	r18, 0x0c	; 12
    3412:	8c b1       	in	r24, 0x0c	; 12
    3414:	9c b1       	in	r25, 0x0c	; 12
    3416:	28 23       	and	r18, r24
    3418:	21 70       	andi	r18, 0x01	; 1
    341a:	29 23       	and	r18, r25
    341c:	0e c0       	rjmp	.+28     	; 0x343a <uart_set_baudrate+0x1f8>
    }
    if (uart_selected == UART_1)
    341e:	61 30       	cpi	r22, 0x01	; 1
    3420:	a9 f7       	brne	.-22     	; 0x340c <uart_set_baudrate+0x1ca>
    {
        u8_temp = (UART_1_PORT_IN  & UART_1_PORT_IN  & UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    3422:	89 b1       	in	r24, 0x09	; 9
    3424:	29 b1       	in	r18, 0x09	; 9
    3426:	99 b1       	in	r25, 0x09	; 9
    3428:	28 23       	and	r18, r24
    342a:	29 23       	and	r18, r25
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	24 70       	andi	r18, 0x04	; 4
    3430:	30 70       	andi	r19, 0x00	; 0
    3432:	35 95       	asr	r19
    3434:	27 95       	ror	r18
    3436:	35 95       	asr	r19
    3438:	27 95       	ror	r18
        //t_meas_0 = TCNT3;
        t_meas_0  =  Timer16_get_counter_low();
        t_meas_0 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:2] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
    343a:	22 23       	and	r18, r18
    343c:	39 f3       	breq	.-50     	; 0x340c <uart_set_baudrate+0x1ca>

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    343e:	66 23       	and	r22, r22
    3440:	19 f4       	brne	.+6      	; 0x3448 <uart_set_baudrate+0x206>
    {
        u8_temp = (UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    3442:	8c b1       	in	r24, 0x0c	; 12
    3444:	81 70       	andi	r24, 0x01	; 1
    3446:	0a c0       	rjmp	.+20     	; 0x345c <uart_set_baudrate+0x21a>
    }
    if (uart_selected == UART_1)
    3448:	61 30       	cpi	r22, 0x01	; 1
    344a:	51 f4       	brne	.+20     	; 0x3460 <uart_set_baudrate+0x21e>
    {
        u8_temp = (UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    344c:	89 b1       	in	r24, 0x09	; 9
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	84 70       	andi	r24, 0x04	; 4
    3452:	90 70       	andi	r25, 0x00	; 0
    3454:	95 95       	asr	r25
    3456:	87 95       	ror	r24
    3458:	95 95       	asr	r25
    345a:	87 95       	ror	r24
        t_meas_0  =  Timer16_get_counter_low();
        t_meas_0 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:2] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
    345c:	88 23       	and	r24, r24
    345e:	79 f7       	brne	.-34     	; 0x343e <uart_set_baudrate+0x1fc>
        t_meas_1  =  Timer16_get_counter_low();
    3460:	71 30       	cpi	r23, 0x01	; 1
    3462:	29 f4       	brne	.+10     	; 0x346e <uart_set_baudrate+0x22c>
    3464:	e0 90 84 00 	lds	r14, 0x0084
        t_meas_1 |= (Timer16_get_counter_high() << 8 );
    3468:	80 91 85 00 	lds	r24, 0x0085
    346c:	04 c0       	rjmp	.+8      	; 0x3476 <uart_set_baudrate+0x234>
        t_meas_0 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:2] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
        t_meas_1  =  Timer16_get_counter_low();
    346e:	e0 90 94 00 	lds	r14, 0x0094
        t_meas_1 |= (Timer16_get_counter_high() << 8 );
    3472:	80 91 95 00 	lds	r24, 0x0095
    3476:	58 2f       	mov	r21, r24
    3478:	40 e0       	ldi	r20, 0x00	; 0

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_3_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    347a:	66 23       	and	r22, r22
    347c:	39 f4       	brne	.+14     	; 0x348c <uart_set_baudrate+0x24a>
    {
        u8_temp = (UART_0_PORT_IN  & UART_0_PORT_IN  & UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    347e:	2c b1       	in	r18, 0x0c	; 12
    3480:	8c b1       	in	r24, 0x0c	; 12
    3482:	9c b1       	in	r25, 0x0c	; 12
    3484:	28 23       	and	r18, r24
    3486:	21 70       	andi	r18, 0x01	; 1
    3488:	29 23       	and	r18, r25
    348a:	0e c0       	rjmp	.+28     	; 0x34a8 <uart_set_baudrate+0x266>
    }
    if (uart_selected == UART_1)
    348c:	61 30       	cpi	r22, 0x01	; 1
    348e:	a9 f7       	brne	.-22     	; 0x347a <uart_set_baudrate+0x238>
    {
        u8_temp = (UART_1_PORT_IN  & UART_1_PORT_IN  & UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    3490:	89 b1       	in	r24, 0x09	; 9
    3492:	29 b1       	in	r18, 0x09	; 9
    3494:	99 b1       	in	r25, 0x09	; 9
    3496:	28 23       	and	r18, r24
    3498:	29 23       	and	r18, r25
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	24 70       	andi	r18, 0x04	; 4
    349e:	30 70       	andi	r19, 0x00	; 0
    34a0:	35 95       	asr	r19
    34a2:	27 95       	ror	r18
    34a4:	35 95       	asr	r19
    34a6:	27 95       	ror	r18
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
        t_meas_1  =  Timer16_get_counter_low();
        t_meas_1 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:4] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
    34a8:	22 23       	and	r18, r18
    34aa:	39 f3       	breq	.-50     	; 0x347a <uart_set_baudrate+0x238>

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    34ac:	66 23       	and	r22, r22
    34ae:	19 f4       	brne	.+6      	; 0x34b6 <uart_set_baudrate+0x274>
    {
        u8_temp = (UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    34b0:	8c b1       	in	r24, 0x0c	; 12
    34b2:	81 70       	andi	r24, 0x01	; 1
    34b4:	0a c0       	rjmp	.+20     	; 0x34ca <uart_set_baudrate+0x288>
    }
    if (uart_selected == UART_1)
    34b6:	61 30       	cpi	r22, 0x01	; 1
    34b8:	51 f4       	brne	.+20     	; 0x34ce <uart_set_baudrate+0x28c>
    {
        u8_temp = (UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    34ba:	89 b1       	in	r24, 0x09	; 9
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	84 70       	andi	r24, 0x04	; 4
    34c0:	90 70       	andi	r25, 0x00	; 0
    34c2:	95 95       	asr	r25
    34c4:	87 95       	ror	r24
    34c6:	95 95       	asr	r25
    34c8:	87 95       	ror	r24
        t_meas_1  =  Timer16_get_counter_low();
        t_meas_1 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:4] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
    34ca:	88 23       	and	r24, r24
    34cc:	79 f7       	brne	.-34     	; 0x34ac <uart_set_baudrate+0x26a>
        t_meas_2  =  Timer16_get_counter_low();
    34ce:	71 30       	cpi	r23, 0x01	; 1
    34d0:	29 f4       	brne	.+10     	; 0x34dc <uart_set_baudrate+0x29a>
    34d2:	f0 90 84 00 	lds	r15, 0x0084
        t_meas_2 |= (Timer16_get_counter_high() << 8 );
    34d6:	80 91 85 00 	lds	r24, 0x0085
    34da:	04 c0       	rjmp	.+8      	; 0x34e4 <uart_set_baudrate+0x2a2>
        t_meas_1 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:4] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
        t_meas_2  =  Timer16_get_counter_low();
    34dc:	f0 90 94 00 	lds	r15, 0x0094
        t_meas_2 |= (Timer16_get_counter_high() << 8 );
    34e0:	80 91 95 00 	lds	r24, 0x0095
    34e4:	b8 2f       	mov	r27, r24
    34e6:	a0 e0       	ldi	r26, 0x00	; 0

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_3_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    34e8:	66 23       	and	r22, r22
    34ea:	39 f4       	brne	.+14     	; 0x34fa <uart_set_baudrate+0x2b8>
    {
        u8_temp = (UART_0_PORT_IN  & UART_0_PORT_IN  & UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    34ec:	2c b1       	in	r18, 0x0c	; 12
    34ee:	8c b1       	in	r24, 0x0c	; 12
    34f0:	9c b1       	in	r25, 0x0c	; 12
    34f2:	28 23       	and	r18, r24
    34f4:	21 70       	andi	r18, 0x01	; 1
    34f6:	29 23       	and	r18, r25
    34f8:	0e c0       	rjmp	.+28     	; 0x3516 <uart_set_baudrate+0x2d4>
    }
    if (uart_selected == UART_1)
    34fa:	61 30       	cpi	r22, 0x01	; 1
    34fc:	a9 f7       	brne	.-22     	; 0x34e8 <uart_set_baudrate+0x2a6>
    {
        u8_temp = (UART_1_PORT_IN  & UART_1_PORT_IN  & UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    34fe:	89 b1       	in	r24, 0x09	; 9
    3500:	29 b1       	in	r18, 0x09	; 9
    3502:	99 b1       	in	r25, 0x09	; 9
    3504:	28 23       	and	r18, r24
    3506:	29 23       	and	r18, r25
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	24 70       	andi	r18, 0x04	; 4
    350c:	30 70       	andi	r19, 0x00	; 0
    350e:	35 95       	asr	r19
    3510:	27 95       	ror	r18
    3512:	35 95       	asr	r19
    3514:	27 95       	ror	r18
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
        t_meas_2  =  Timer16_get_counter_low();
        t_meas_2 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:6] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
    3516:	22 23       	and	r18, r18
    3518:	39 f3       	breq	.-50     	; 0x34e8 <uart_set_baudrate+0x2a6>

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    351a:	66 23       	and	r22, r22
    351c:	19 f4       	brne	.+6      	; 0x3524 <uart_set_baudrate+0x2e2>
    {
        u8_temp = (UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    351e:	8c b1       	in	r24, 0x0c	; 12
    3520:	81 70       	andi	r24, 0x01	; 1
    3522:	0a c0       	rjmp	.+20     	; 0x3538 <uart_set_baudrate+0x2f6>
    }
    if (uart_selected == UART_1)
    3524:	61 30       	cpi	r22, 0x01	; 1
    3526:	51 f4       	brne	.+20     	; 0x353c <uart_set_baudrate+0x2fa>
    {
        u8_temp = (UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    3528:	89 b1       	in	r24, 0x09	; 9
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	84 70       	andi	r24, 0x04	; 4
    352e:	90 70       	andi	r25, 0x00	; 0
    3530:	95 95       	asr	r25
    3532:	87 95       	ror	r24
    3534:	95 95       	asr	r25
    3536:	87 95       	ror	r24
        t_meas_2  =  Timer16_get_counter_low();
        t_meas_2 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:6] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
    3538:	88 23       	and	r24, r24
    353a:	79 f7       	brne	.-34     	; 0x351a <uart_set_baudrate+0x2d8>
        t_meas_3  =  Timer16_get_counter_low();
    353c:	71 30       	cpi	r23, 0x01	; 1
    353e:	29 f4       	brne	.+10     	; 0x354a <uart_set_baudrate+0x308>
    3540:	90 91 84 00 	lds	r25, 0x0084
        t_meas_3 |= (Timer16_get_counter_high() << 8 );
    3544:	80 91 85 00 	lds	r24, 0x0085
    3548:	04 c0       	rjmp	.+8      	; 0x3552 <uart_set_baudrate+0x310>
        t_meas_2 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:6] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
        t_meas_3  =  Timer16_get_counter_low();
    354a:	90 91 94 00 	lds	r25, 0x0094
        t_meas_3 |= (Timer16_get_counter_high() << 8 );
    354e:	80 91 95 00 	lds	r24, 0x0095
    3552:	38 2f       	mov	r19, r24
    3554:	20 e0       	ldi	r18, 0x00	; 0
        t_meas_2 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:6] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
        t_meas_3  =  Timer16_get_counter_low();
    3556:	c9 2f       	mov	r28, r25
    3558:	d0 e0       	ldi	r29, 0x00	; 0
        t_meas_3 |= (Timer16_get_counter_high() << 8 );
    355a:	c2 2b       	or	r28, r18
    355c:	d3 2b       	or	r29, r19

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    355e:	66 23       	and	r22, r22
    3560:	19 f4       	brne	.+6      	; 0x3568 <uart_set_baudrate+0x326>
    {
        u8_temp = (UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    3562:	8c b1       	in	r24, 0x0c	; 12
    3564:	81 70       	andi	r24, 0x01	; 1
    3566:	0a c0       	rjmp	.+20     	; 0x357c <uart_set_baudrate+0x33a>
    }
    if (uart_selected == UART_1)
    3568:	61 30       	cpi	r22, 0x01	; 1
    356a:	c9 f7       	brne	.-14     	; 0x355e <uart_set_baudrate+0x31c>
    {
        u8_temp = (UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    356c:	89 b1       	in	r24, 0x09	; 9
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	84 70       	andi	r24, 0x04	; 4
    3572:	90 70       	andi	r25, 0x00	; 0
    3574:	95 95       	asr	r25
    3576:	87 95       	ror	r24
    3578:	95 95       	asr	r25
    357a:	87 95       	ror	r24
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
        t_meas_3  =  Timer16_get_counter_low();
        t_meas_3 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:7] Measurement. Only 1 read because looking for _/ edge.
        while (uart_rx_get_data()   == 0);  // Wait for RxD=1
    357c:	88 23       	and	r24, r24
    357e:	79 f3       	breq	.-34     	; 0x355e <uart_set_baudrate+0x31c>
        t_meas_4  =  Timer16_get_counter_low();
    3580:	71 30       	cpi	r23, 0x01	; 1
    3582:	71 f4       	brne	.+28     	; 0x35a0 <uart_set_baudrate+0x35e>
    3584:	90 91 84 00 	lds	r25, 0x0084
        t_meas_4 |= (Timer16_get_counter_high() << 8 );
    3588:	80 91 85 00 	lds	r24, 0x0085
    358c:	38 2f       	mov	r19, r24
    358e:	20 e0       	ldi	r18, 0x00	; 0

        // End of Frame
        Timer16_off();
    3590:	80 91 81 00 	lds	r24, 0x0081
    3594:	88 7f       	andi	r24, 0xF8	; 248
    3596:	80 93 81 00 	sts	0x0081, r24
    359a:	80 91 81 00 	lds	r24, 0x0081
    359e:	0d c0       	rjmp	.+26     	; 0x35ba <uart_set_baudrate+0x378>
        t_meas_3  =  Timer16_get_counter_low();
        t_meas_3 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:7] Measurement. Only 1 read because looking for _/ edge.
        while (uart_rx_get_data()   == 0);  // Wait for RxD=1
        t_meas_4  =  Timer16_get_counter_low();
    35a0:	90 91 94 00 	lds	r25, 0x0094
        t_meas_4 |= (Timer16_get_counter_high() << 8 );
    35a4:	80 91 95 00 	lds	r24, 0x0095
    35a8:	38 2f       	mov	r19, r24
    35aa:	20 e0       	ldi	r18, 0x00	; 0

        // End of Frame
        Timer16_off();
    35ac:	80 91 91 00 	lds	r24, 0x0091
    35b0:	88 7f       	andi	r24, 0xF8	; 248
    35b2:	80 93 91 00 	sts	0x0091, r24
    35b6:	80 91 91 00 	lds	r24, 0x0091
        Uart_rx_in_pu_off();     // RxD in input no pull-up
    35ba:	66 23       	and	r22, r22
    35bc:	39 f4       	brne	.+14     	; 0x35cc <uart_set_baudrate+0x38a>
    35be:	68 98       	cbi	0x0d, 0	; 13
    35c0:	70 98       	cbi	0x0e, 0	; 14
    35c2:	8e b1       	in	r24, 0x0e	; 14
        Uart_tx_in_pu_off();     // TxD in input no pull-up
    35c4:	69 98       	cbi	0x0d, 1	; 13
    35c6:	71 98       	cbi	0x0e, 1	; 14
    35c8:	8e b1       	in	r24, 0x0e	; 14
    35ca:	06 c0       	rjmp	.+12     	; 0x35d8 <uart_set_baudrate+0x396>
        t_meas_4  =  Timer16_get_counter_low();
        t_meas_4 |= (Timer16_get_counter_high() << 8 );

        // End of Frame
        Timer16_off();
        Uart_rx_in_pu_off();     // RxD in input no pull-up
    35cc:	52 98       	cbi	0x0a, 2	; 10
    35ce:	5a 98       	cbi	0x0b, 2	; 11
    35d0:	8b b1       	in	r24, 0x0b	; 11
        Uart_tx_in_pu_off();     // TxD in input no pull-up
    35d2:	53 98       	cbi	0x0a, 3	; 10
    35d4:	5b 98       	cbi	0x0b, 3	; 11
    35d6:	8b b1       	in	r24, 0x0b	; 11
        t_meas_3  =  Timer16_get_counter_low();
        t_meas_3 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:7] Measurement. Only 1 read because looking for _/ edge.
        while (uart_rx_get_data()   == 0);  // Wait for RxD=1
        t_meas_4  =  Timer16_get_counter_low();
    35d8:	89 2f       	mov	r24, r25
    35da:	90 e0       	ldi	r25, 0x00	; 0
        t_meas_4 |= (Timer16_get_counter_high() << 8 );
    35dc:	82 2b       	or	r24, r18
    35de:	93 2b       	or	r25, r19
        Timer16_off();
        Uart_rx_in_pu_off();     // RxD in input no pull-up
        Uart_tx_in_pu_off();     // TxD in input no pull-up

        // 1-bit (last bit) measurement
        t_meas_4 = t_meas_4 - t_meas_3;       // Bit[7]   length
    35e0:	8c 1b       	sub	r24, r28
    35e2:	9d 0b       	sbc	r25, r29
        t_meas_1 = t_meas_1 - t_meas_0;       // Bit[1:2] length
        // t_meas_0 is already 2-bit length, SOF + bit[0] length

        // Verification if each couple of bits has an length error
        // less than 1/4 (2*1/8) of Bit[7] length
        t_min =  (2* t_meas_4) - (t_meas_4 >> 2);
    35e4:	9c 01       	movw	r18, r24
    35e6:	22 0f       	add	r18, r18
    35e8:	33 1f       	adc	r19, r19
    35ea:	96 95       	lsr	r25
    35ec:	87 95       	ror	r24
    35ee:	96 95       	lsr	r25
    35f0:	87 95       	ror	r24
        t_max =  (2* t_meas_4) + (t_meas_4 >> 2);
    35f2:	fc 01       	movw	r30, r24
    35f4:	e2 0f       	add	r30, r18
    35f6:	f3 1f       	adc	r31, r19
        if ((t_meas_0 > t_max) || (t_meas_0 < t_min)) return 0;
    35f8:	e0 17       	cp	r30, r16
    35fa:	f1 07       	cpc	r31, r17
    35fc:	08 f4       	brcc	.+2      	; 0x3600 <uart_set_baudrate+0x3be>
    35fe:	5c c0       	rjmp	.+184    	; 0x36b8 <uart_set_baudrate+0x476>
        t_meas_1 = t_meas_1 - t_meas_0;       // Bit[1:2] length
        // t_meas_0 is already 2-bit length, SOF + bit[0] length

        // Verification if each couple of bits has an length error
        // less than 1/4 (2*1/8) of Bit[7] length
        t_min =  (2* t_meas_4) - (t_meas_4 >> 2);
    3600:	b9 01       	movw	r22, r18
    3602:	68 1b       	sub	r22, r24
    3604:	79 0b       	sbc	r23, r25
    3606:	cb 01       	movw	r24, r22
        t_max =  (2* t_meas_4) + (t_meas_4 >> 2);
        if ((t_meas_0 > t_max) || (t_meas_0 < t_min)) return 0;
    3608:	06 17       	cp	r16, r22
    360a:	17 07       	cpc	r17, r23
    360c:	08 f4       	brcc	.+2      	; 0x3610 <uart_set_baudrate+0x3ce>
    360e:	54 c0       	rjmp	.+168    	; 0x36b8 <uart_set_baudrate+0x476>
        t_meas_0 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:2] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
        t_meas_1  =  Timer16_get_counter_low();
    3610:	6e 2d       	mov	r22, r14
    3612:	70 e0       	ldi	r23, 0x00	; 0
        t_meas_1 |= (Timer16_get_counter_high() << 8 );
    3614:	64 2b       	or	r22, r20
    3616:	75 2b       	or	r23, r21
        // 1-bit (last bit) measurement
        t_meas_4 = t_meas_4 - t_meas_3;       // Bit[7]   length
        // 2-bit measurements
        t_meas_3 = t_meas_3 - t_meas_2;       // Bit[5:6] length
        t_meas_2 = t_meas_2 - t_meas_1;       // Bit[3:4] length
        t_meas_1 = t_meas_1 - t_meas_0;       // Bit[1:2] length
    3618:	9b 01       	movw	r18, r22
    361a:	20 1b       	sub	r18, r16
    361c:	31 0b       	sbc	r19, r17
        // Verification if each couple of bits has an length error
        // less than 1/4 (2*1/8) of Bit[7] length
        t_min =  (2* t_meas_4) - (t_meas_4 >> 2);
        t_max =  (2* t_meas_4) + (t_meas_4 >> 2);
        if ((t_meas_0 > t_max) || (t_meas_0 < t_min)) return 0;
        if ((t_meas_1 > t_max) || (t_meas_1 < t_min)) return 0;
    361e:	e2 17       	cp	r30, r18
    3620:	f3 07       	cpc	r31, r19
    3622:	08 f4       	brcc	.+2      	; 0x3626 <uart_set_baudrate+0x3e4>
    3624:	49 c0       	rjmp	.+146    	; 0x36b8 <uart_set_baudrate+0x476>
    3626:	28 17       	cp	r18, r24
    3628:	39 07       	cpc	r19, r25
    362a:	08 f4       	brcc	.+2      	; 0x362e <uart_set_baudrate+0x3ec>
    362c:	45 c0       	rjmp	.+138    	; 0x36b8 <uart_set_baudrate+0x476>
        t_meas_1 |= (Timer16_get_counter_high() << 8 );

        // SOF + bit[0:4] Measurement. Read 3 times to remove overshoots.
        while (uart_rx_get_3_data() == 0);  // Wait for RxD=1
        while (uart_rx_get_data()   != 0);  // Wait for RxD=0
        t_meas_2  =  Timer16_get_counter_low();
    362e:	4f 2d       	mov	r20, r15
    3630:	50 e0       	ldi	r21, 0x00	; 0
        t_meas_2 |= (Timer16_get_counter_high() << 8 );
    3632:	4a 2b       	or	r20, r26
    3634:	5b 2b       	or	r21, r27

        // 1-bit (last bit) measurement
        t_meas_4 = t_meas_4 - t_meas_3;       // Bit[7]   length
        // 2-bit measurements
        t_meas_3 = t_meas_3 - t_meas_2;       // Bit[5:6] length
        t_meas_2 = t_meas_2 - t_meas_1;       // Bit[3:4] length
    3636:	da 01       	movw	r26, r20
    3638:	a6 1b       	sub	r26, r22
    363a:	b7 0b       	sbc	r27, r23
    363c:	bd 01       	movw	r22, r26
        // less than 1/4 (2*1/8) of Bit[7] length
        t_min =  (2* t_meas_4) - (t_meas_4 >> 2);
        t_max =  (2* t_meas_4) + (t_meas_4 >> 2);
        if ((t_meas_0 > t_max) || (t_meas_0 < t_min)) return 0;
        if ((t_meas_1 > t_max) || (t_meas_1 < t_min)) return 0;
        if ((t_meas_2 > t_max) || (t_meas_2 < t_min)) return 0;
    363e:	ea 17       	cp	r30, r26
    3640:	fb 07       	cpc	r31, r27
    3642:	d0 f1       	brcs	.+116    	; 0x36b8 <uart_set_baudrate+0x476>
    3644:	a8 17       	cp	r26, r24
    3646:	b9 07       	cpc	r27, r25
    3648:	b8 f1       	brcs	.+110    	; 0x36b8 <uart_set_baudrate+0x476>
        Uart_tx_in_pu_off();     // TxD in input no pull-up

        // 1-bit (last bit) measurement
        t_meas_4 = t_meas_4 - t_meas_3;       // Bit[7]   length
        // 2-bit measurements
        t_meas_3 = t_meas_3 - t_meas_2;       // Bit[5:6] length
    364a:	de 01       	movw	r26, r28
    364c:	a4 1b       	sub	r26, r20
    364e:	b5 0b       	sbc	r27, r21
        t_min =  (2* t_meas_4) - (t_meas_4 >> 2);
        t_max =  (2* t_meas_4) + (t_meas_4 >> 2);
        if ((t_meas_0 > t_max) || (t_meas_0 < t_min)) return 0;
        if ((t_meas_1 > t_max) || (t_meas_1 < t_min)) return 0;
        if ((t_meas_2 > t_max) || (t_meas_2 < t_min)) return 0;
        if ((t_meas_3 > t_max) || (t_meas_3 < t_min)) return 0;
    3650:	ea 17       	cp	r30, r26
    3652:	fb 07       	cpc	r31, r27
    3654:	88 f1       	brcs	.+98     	; 0x36b8 <uart_set_baudrate+0x476>
    3656:	a8 17       	cp	r26, r24
    3658:	b9 07       	cpc	r27, r25
    365a:	70 f1       	brcs	.+92     	; 0x36b8 <uart_set_baudrate+0x476>

        // UBRRN Value (rounded to nearest division) with U2Xn=1
        t_meas_4  = (((((t_meas_0 + t_meas_1 + t_meas_2 + t_meas_3 ) << 1) >> 6) + 1) >> 1) - 1;
    365c:	20 0f       	add	r18, r16
    365e:	31 1f       	adc	r19, r17
    3660:	26 0f       	add	r18, r22
    3662:	37 1f       	adc	r19, r23
    3664:	2a 0f       	add	r18, r26
    3666:	3b 1f       	adc	r19, r27
    3668:	22 0f       	add	r18, r18
    366a:	33 1f       	adc	r19, r19
    366c:	96 e0       	ldi	r25, 0x06	; 6
    366e:	36 95       	lsr	r19
    3670:	27 95       	ror	r18
    3672:	9a 95       	dec	r25
    3674:	e1 f7       	brne	.-8      	; 0x366e <uart_set_baudrate+0x42c>
    3676:	2f 5f       	subi	r18, 0xFF	; 255
    3678:	3f 4f       	sbci	r19, 0xFF	; 255
    367a:	36 95       	lsr	r19
    367c:	27 95       	ror	r18
    367e:	21 50       	subi	r18, 0x01	; 1
    3680:	30 40       	sbci	r19, 0x00	; 0
    #elif (USE_UART ==  UART_1)
        UBRR1H  = (U8)((t_meas_4)>>8);
        UBRR1L  = (U8) (t_meas_4)    ;
        UCSR1A |=  (1<<U2X1);
    #elif (USE_UART ==  BOTH_UART)
        if (uart_selected == UART_0)
    3682:	80 91 d8 03 	lds	r24, 0x03D8
    3686:	88 23       	and	r24, r24
    3688:	51 f4       	brne	.+20     	; 0x369e <uart_set_baudrate+0x45c>
        {
            UBRR0H  = (U8)((t_meas_4)>>8);
    368a:	30 93 c5 00 	sts	0x00C5, r19
            UBRR0L  = (U8) (t_meas_4)    ;
    368e:	20 93 c4 00 	sts	0x00C4, r18
            UCSR0A |=  (1<<U2X0);
    3692:	80 91 c0 00 	lds	r24, 0x00C0
    3696:	82 60       	ori	r24, 0x02	; 2
    3698:	80 93 c0 00 	sts	0x00C0, r24
    369c:	0b c0       	rjmp	.+22     	; 0x36b4 <uart_set_baudrate+0x472>
        }
        if (uart_selected == UART_1)
    369e:	81 30       	cpi	r24, 0x01	; 1
    36a0:	49 f4       	brne	.+18     	; 0x36b4 <uart_set_baudrate+0x472>
        {
            UBRR1H  = (U8)((t_meas_4)>>8);
    36a2:	30 93 cd 00 	sts	0x00CD, r19
            UBRR1L  = (U8) (t_meas_4)    ;
    36a6:	20 93 cc 00 	sts	0x00CC, r18
            UCSR1A |=  (1<<U2X1);
    36aa:	80 91 c8 00 	lds	r24, 0x00C8
    36ae:	82 60       	ori	r24, 0x02	; 2
    36b0:	80 93 c8 00 	sts	0x00C8, r24
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	01 c0       	rjmp	.+2      	; 0x36ba <uart_set_baudrate+0x478>
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    #   else
    #       error USE_UART definition is not referenced in "uart_drv.h" file
    #endif
    
    return 1;
}
    36ba:	df 91       	pop	r29
    36bc:	cf 91       	pop	r28
    36be:	1f 91       	pop	r17
    36c0:	0f 91       	pop	r16
    36c2:	ff 90       	pop	r15
    36c4:	ef 90       	pop	r14
    36c6:	08 95       	ret

000036c8 <uart_rx_get_3_data>:

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_3_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    36c8:	80 91 d8 03 	lds	r24, 0x03D8
    36cc:	88 23       	and	r24, r24
    36ce:	39 f4       	brne	.+14     	; 0x36de <uart_rx_get_3_data+0x16>
    {
        u8_temp = (UART_0_PORT_IN  & UART_0_PORT_IN  & UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    36d0:	2c b1       	in	r18, 0x0c	; 12
    36d2:	8c b1       	in	r24, 0x0c	; 12
    36d4:	9c b1       	in	r25, 0x0c	; 12
    36d6:	28 23       	and	r18, r24
    36d8:	21 70       	andi	r18, 0x01	; 1
    36da:	29 23       	and	r18, r25
    36dc:	10 c0       	rjmp	.+32     	; 0x36fe <uart_rx_get_3_data+0x36>
    }
    if (uart_selected == UART_1)
    36de:	81 30       	cpi	r24, 0x01	; 1
    36e0:	11 f0       	breq	.+4      	; 0x36e6 <uart_rx_get_3_data+0x1e>
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	0c c0       	rjmp	.+24     	; 0x36fe <uart_rx_get_3_data+0x36>
    {
        u8_temp = (UART_1_PORT_IN  & UART_1_PORT_IN  & UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    36e6:	89 b1       	in	r24, 0x09	; 9
    36e8:	29 b1       	in	r18, 0x09	; 9
    36ea:	99 b1       	in	r25, 0x09	; 9
    36ec:	28 23       	and	r18, r24
    36ee:	29 23       	and	r18, r25
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	24 70       	andi	r18, 0x04	; 4
    36f4:	30 70       	andi	r19, 0x00	; 0
    36f6:	35 95       	asr	r19
    36f8:	27 95       	ror	r18
    36fa:	35 95       	asr	r19
    36fc:	27 95       	ror	r18
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
}
    36fe:	82 2f       	mov	r24, r18
    3700:	08 95       	ret

00003702 <uart_rx_get_data>:

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    3702:	80 91 d8 03 	lds	r24, 0x03D8
    3706:	88 23       	and	r24, r24
    3708:	19 f4       	brne	.+6      	; 0x3710 <uart_rx_get_data+0xe>
    {
        u8_temp = (UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    370a:	8c b1       	in	r24, 0x0c	; 12
    370c:	81 70       	andi	r24, 0x01	; 1
    370e:	08 95       	ret
    }
    if (uart_selected == UART_1)
    3710:	81 30       	cpi	r24, 0x01	; 1
    3712:	11 f0       	breq	.+4      	; 0x3718 <uart_rx_get_data+0x16>
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	08 95       	ret
    {
        u8_temp = (UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    3718:	89 b1       	in	r24, 0x09	; 9
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	84 70       	andi	r24, 0x04	; 4
    371e:	90 70       	andi	r25, 0x00	; 0
    3720:	95 95       	asr	r25
    3722:	87 95       	ror	r24
    3724:	95 95       	asr	r25
    3726:	87 95       	ror	r24
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
}
    3728:	08 95       	ret

0000372a <strcpy>:
    372a:	fb 01       	movw	r30, r22
    372c:	dc 01       	movw	r26, r24
    372e:	01 90       	ld	r0, Z+
    3730:	0d 92       	st	X+, r0
    3732:	00 20       	and	r0, r0
    3734:	e1 f7       	brne	.-8      	; 0x372e <strcpy+0x4>
    3736:	08 95       	ret

00003738 <sprintf>:
    3738:	ae e0       	ldi	r26, 0x0E	; 14
    373a:	b0 e0       	ldi	r27, 0x00	; 0
    373c:	e2 ea       	ldi	r30, 0xA2	; 162
    373e:	fb e1       	ldi	r31, 0x1B	; 27
    3740:	0c 94 d3 21 	jmp	0x43a6	; 0x43a6 <__prologue_saves__+0x1c>
    3744:	0d 89       	ldd	r16, Y+21	; 0x15
    3746:	1e 89       	ldd	r17, Y+22	; 0x16
    3748:	86 e0       	ldi	r24, 0x06	; 6
    374a:	8c 83       	std	Y+4, r24	; 0x04
    374c:	1a 83       	std	Y+2, r17	; 0x02
    374e:	09 83       	std	Y+1, r16	; 0x01
    3750:	8f ef       	ldi	r24, 0xFF	; 255
    3752:	9f e7       	ldi	r25, 0x7F	; 127
    3754:	9e 83       	std	Y+6, r25	; 0x06
    3756:	8d 83       	std	Y+5, r24	; 0x05
    3758:	9e 01       	movw	r18, r28
    375a:	27 5e       	subi	r18, 0xE7	; 231
    375c:	3f 4f       	sbci	r19, 0xFF	; 255
    375e:	ce 01       	movw	r24, r28
    3760:	01 96       	adiw	r24, 0x01	; 1
    3762:	6f 89       	ldd	r22, Y+23	; 0x17
    3764:	78 8d       	ldd	r23, Y+24	; 0x18
    3766:	a9 01       	movw	r20, r18
    3768:	0e 94 c0 1b 	call	0x3780	; 0x3780 <vfprintf>
    376c:	2f 81       	ldd	r18, Y+7	; 0x07
    376e:	38 85       	ldd	r19, Y+8	; 0x08
    3770:	02 0f       	add	r16, r18
    3772:	13 1f       	adc	r17, r19
    3774:	f8 01       	movw	r30, r16
    3776:	10 82       	st	Z, r1
    3778:	2e 96       	adiw	r28, 0x0e	; 14
    377a:	e4 e0       	ldi	r30, 0x04	; 4
    377c:	0c 94 ef 21 	jmp	0x43de	; 0x43de <__epilogue_restores__+0x1c>

00003780 <vfprintf>:
    3780:	ab e0       	ldi	r26, 0x0B	; 11
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	e6 ec       	ldi	r30, 0xC6	; 198
    3786:	fb e1       	ldi	r31, 0x1B	; 27
    3788:	0c 94 c5 21 	jmp	0x438a	; 0x438a <__prologue_saves__>
    378c:	3c 01       	movw	r6, r24
    378e:	2b 01       	movw	r4, r22
    3790:	5a 01       	movw	r10, r20
    3792:	fc 01       	movw	r30, r24
    3794:	17 82       	std	Z+7, r1	; 0x07
    3796:	16 82       	std	Z+6, r1	; 0x06
    3798:	83 81       	ldd	r24, Z+3	; 0x03
    379a:	81 fd       	sbrc	r24, 1
    379c:	03 c0       	rjmp	.+6      	; 0x37a4 <vfprintf+0x24>
    379e:	6f ef       	ldi	r22, 0xFF	; 255
    37a0:	7f ef       	ldi	r23, 0xFF	; 255
    37a2:	c6 c1       	rjmp	.+908    	; 0x3b30 <vfprintf+0x3b0>
    37a4:	9a e0       	ldi	r25, 0x0A	; 10
    37a6:	89 2e       	mov	r8, r25
    37a8:	1e 01       	movw	r2, r28
    37aa:	08 94       	sec
    37ac:	21 1c       	adc	r2, r1
    37ae:	31 1c       	adc	r3, r1
    37b0:	f3 01       	movw	r30, r6
    37b2:	23 81       	ldd	r18, Z+3	; 0x03
    37b4:	f2 01       	movw	r30, r4
    37b6:	23 fd       	sbrc	r18, 3
    37b8:	85 91       	lpm	r24, Z+
    37ba:	23 ff       	sbrs	r18, 3
    37bc:	81 91       	ld	r24, Z+
    37be:	2f 01       	movw	r4, r30
    37c0:	88 23       	and	r24, r24
    37c2:	09 f4       	brne	.+2      	; 0x37c6 <vfprintf+0x46>
    37c4:	b2 c1       	rjmp	.+868    	; 0x3b2a <vfprintf+0x3aa>
    37c6:	85 32       	cpi	r24, 0x25	; 37
    37c8:	39 f4       	brne	.+14     	; 0x37d8 <vfprintf+0x58>
    37ca:	23 fd       	sbrc	r18, 3
    37cc:	85 91       	lpm	r24, Z+
    37ce:	23 ff       	sbrs	r18, 3
    37d0:	81 91       	ld	r24, Z+
    37d2:	2f 01       	movw	r4, r30
    37d4:	85 32       	cpi	r24, 0x25	; 37
    37d6:	29 f4       	brne	.+10     	; 0x37e2 <vfprintf+0x62>
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	b3 01       	movw	r22, r6
    37dc:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <fputc>
    37e0:	e7 cf       	rjmp	.-50     	; 0x37b0 <vfprintf+0x30>
    37e2:	98 2f       	mov	r25, r24
    37e4:	ff 24       	eor	r15, r15
    37e6:	ee 24       	eor	r14, r14
    37e8:	99 24       	eor	r9, r9
    37ea:	ff e1       	ldi	r31, 0x1F	; 31
    37ec:	ff 15       	cp	r31, r15
    37ee:	d0 f0       	brcs	.+52     	; 0x3824 <vfprintf+0xa4>
    37f0:	9b 32       	cpi	r25, 0x2B	; 43
    37f2:	69 f0       	breq	.+26     	; 0x380e <vfprintf+0x8e>
    37f4:	9c 32       	cpi	r25, 0x2C	; 44
    37f6:	28 f4       	brcc	.+10     	; 0x3802 <vfprintf+0x82>
    37f8:	90 32       	cpi	r25, 0x20	; 32
    37fa:	59 f0       	breq	.+22     	; 0x3812 <vfprintf+0x92>
    37fc:	93 32       	cpi	r25, 0x23	; 35
    37fe:	91 f4       	brne	.+36     	; 0x3824 <vfprintf+0xa4>
    3800:	0e c0       	rjmp	.+28     	; 0x381e <vfprintf+0x9e>
    3802:	9d 32       	cpi	r25, 0x2D	; 45
    3804:	49 f0       	breq	.+18     	; 0x3818 <vfprintf+0x98>
    3806:	90 33       	cpi	r25, 0x30	; 48
    3808:	69 f4       	brne	.+26     	; 0x3824 <vfprintf+0xa4>
    380a:	41 e0       	ldi	r20, 0x01	; 1
    380c:	24 c0       	rjmp	.+72     	; 0x3856 <vfprintf+0xd6>
    380e:	52 e0       	ldi	r21, 0x02	; 2
    3810:	f5 2a       	or	r15, r21
    3812:	84 e0       	ldi	r24, 0x04	; 4
    3814:	f8 2a       	or	r15, r24
    3816:	28 c0       	rjmp	.+80     	; 0x3868 <vfprintf+0xe8>
    3818:	98 e0       	ldi	r25, 0x08	; 8
    381a:	f9 2a       	or	r15, r25
    381c:	25 c0       	rjmp	.+74     	; 0x3868 <vfprintf+0xe8>
    381e:	e0 e1       	ldi	r30, 0x10	; 16
    3820:	fe 2a       	or	r15, r30
    3822:	22 c0       	rjmp	.+68     	; 0x3868 <vfprintf+0xe8>
    3824:	f7 fc       	sbrc	r15, 7
    3826:	29 c0       	rjmp	.+82     	; 0x387a <vfprintf+0xfa>
    3828:	89 2f       	mov	r24, r25
    382a:	80 53       	subi	r24, 0x30	; 48
    382c:	8a 30       	cpi	r24, 0x0A	; 10
    382e:	70 f4       	brcc	.+28     	; 0x384c <vfprintf+0xcc>
    3830:	f6 fe       	sbrs	r15, 6
    3832:	05 c0       	rjmp	.+10     	; 0x383e <vfprintf+0xbe>
    3834:	98 9c       	mul	r9, r8
    3836:	90 2c       	mov	r9, r0
    3838:	11 24       	eor	r1, r1
    383a:	98 0e       	add	r9, r24
    383c:	15 c0       	rjmp	.+42     	; 0x3868 <vfprintf+0xe8>
    383e:	e8 9c       	mul	r14, r8
    3840:	e0 2c       	mov	r14, r0
    3842:	11 24       	eor	r1, r1
    3844:	e8 0e       	add	r14, r24
    3846:	f0 e2       	ldi	r31, 0x20	; 32
    3848:	ff 2a       	or	r15, r31
    384a:	0e c0       	rjmp	.+28     	; 0x3868 <vfprintf+0xe8>
    384c:	9e 32       	cpi	r25, 0x2E	; 46
    384e:	29 f4       	brne	.+10     	; 0x385a <vfprintf+0xda>
    3850:	f6 fc       	sbrc	r15, 6
    3852:	6b c1       	rjmp	.+726    	; 0x3b2a <vfprintf+0x3aa>
    3854:	40 e4       	ldi	r20, 0x40	; 64
    3856:	f4 2a       	or	r15, r20
    3858:	07 c0       	rjmp	.+14     	; 0x3868 <vfprintf+0xe8>
    385a:	9c 36       	cpi	r25, 0x6C	; 108
    385c:	19 f4       	brne	.+6      	; 0x3864 <vfprintf+0xe4>
    385e:	50 e8       	ldi	r21, 0x80	; 128
    3860:	f5 2a       	or	r15, r21
    3862:	02 c0       	rjmp	.+4      	; 0x3868 <vfprintf+0xe8>
    3864:	98 36       	cpi	r25, 0x68	; 104
    3866:	49 f4       	brne	.+18     	; 0x387a <vfprintf+0xfa>
    3868:	f2 01       	movw	r30, r4
    386a:	23 fd       	sbrc	r18, 3
    386c:	95 91       	lpm	r25, Z+
    386e:	23 ff       	sbrs	r18, 3
    3870:	91 91       	ld	r25, Z+
    3872:	2f 01       	movw	r4, r30
    3874:	99 23       	and	r25, r25
    3876:	09 f0       	breq	.+2      	; 0x387a <vfprintf+0xfa>
    3878:	b8 cf       	rjmp	.-144    	; 0x37ea <vfprintf+0x6a>
    387a:	89 2f       	mov	r24, r25
    387c:	85 54       	subi	r24, 0x45	; 69
    387e:	83 30       	cpi	r24, 0x03	; 3
    3880:	18 f0       	brcs	.+6      	; 0x3888 <vfprintf+0x108>
    3882:	80 52       	subi	r24, 0x20	; 32
    3884:	83 30       	cpi	r24, 0x03	; 3
    3886:	38 f4       	brcc	.+14     	; 0x3896 <vfprintf+0x116>
    3888:	44 e0       	ldi	r20, 0x04	; 4
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	a4 0e       	add	r10, r20
    388e:	b5 1e       	adc	r11, r21
    3890:	5f e3       	ldi	r21, 0x3F	; 63
    3892:	59 83       	std	Y+1, r21	; 0x01
    3894:	0f c0       	rjmp	.+30     	; 0x38b4 <vfprintf+0x134>
    3896:	93 36       	cpi	r25, 0x63	; 99
    3898:	31 f0       	breq	.+12     	; 0x38a6 <vfprintf+0x126>
    389a:	93 37       	cpi	r25, 0x73	; 115
    389c:	79 f0       	breq	.+30     	; 0x38bc <vfprintf+0x13c>
    389e:	93 35       	cpi	r25, 0x53	; 83
    38a0:	09 f0       	breq	.+2      	; 0x38a4 <vfprintf+0x124>
    38a2:	56 c0       	rjmp	.+172    	; 0x3950 <vfprintf+0x1d0>
    38a4:	20 c0       	rjmp	.+64     	; 0x38e6 <vfprintf+0x166>
    38a6:	f5 01       	movw	r30, r10
    38a8:	80 81       	ld	r24, Z
    38aa:	89 83       	std	Y+1, r24	; 0x01
    38ac:	42 e0       	ldi	r20, 0x02	; 2
    38ae:	50 e0       	ldi	r21, 0x00	; 0
    38b0:	a4 0e       	add	r10, r20
    38b2:	b5 1e       	adc	r11, r21
    38b4:	61 01       	movw	r12, r2
    38b6:	01 e0       	ldi	r16, 0x01	; 1
    38b8:	10 e0       	ldi	r17, 0x00	; 0
    38ba:	12 c0       	rjmp	.+36     	; 0x38e0 <vfprintf+0x160>
    38bc:	f5 01       	movw	r30, r10
    38be:	c0 80       	ld	r12, Z
    38c0:	d1 80       	ldd	r13, Z+1	; 0x01
    38c2:	f6 fc       	sbrc	r15, 6
    38c4:	03 c0       	rjmp	.+6      	; 0x38cc <vfprintf+0x14c>
    38c6:	6f ef       	ldi	r22, 0xFF	; 255
    38c8:	7f ef       	ldi	r23, 0xFF	; 255
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <vfprintf+0x150>
    38cc:	69 2d       	mov	r22, r9
    38ce:	70 e0       	ldi	r23, 0x00	; 0
    38d0:	42 e0       	ldi	r20, 0x02	; 2
    38d2:	50 e0       	ldi	r21, 0x00	; 0
    38d4:	a4 0e       	add	r10, r20
    38d6:	b5 1e       	adc	r11, r21
    38d8:	c6 01       	movw	r24, r12
    38da:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <strnlen>
    38de:	8c 01       	movw	r16, r24
    38e0:	5f e7       	ldi	r21, 0x7F	; 127
    38e2:	f5 22       	and	r15, r21
    38e4:	14 c0       	rjmp	.+40     	; 0x390e <vfprintf+0x18e>
    38e6:	f5 01       	movw	r30, r10
    38e8:	c0 80       	ld	r12, Z
    38ea:	d1 80       	ldd	r13, Z+1	; 0x01
    38ec:	f6 fc       	sbrc	r15, 6
    38ee:	03 c0       	rjmp	.+6      	; 0x38f6 <vfprintf+0x176>
    38f0:	6f ef       	ldi	r22, 0xFF	; 255
    38f2:	7f ef       	ldi	r23, 0xFF	; 255
    38f4:	02 c0       	rjmp	.+4      	; 0x38fa <vfprintf+0x17a>
    38f6:	69 2d       	mov	r22, r9
    38f8:	70 e0       	ldi	r23, 0x00	; 0
    38fa:	42 e0       	ldi	r20, 0x02	; 2
    38fc:	50 e0       	ldi	r21, 0x00	; 0
    38fe:	a4 0e       	add	r10, r20
    3900:	b5 1e       	adc	r11, r21
    3902:	c6 01       	movw	r24, r12
    3904:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <strnlen_P>
    3908:	8c 01       	movw	r16, r24
    390a:	50 e8       	ldi	r21, 0x80	; 128
    390c:	f5 2a       	or	r15, r21
    390e:	f3 fe       	sbrs	r15, 3
    3910:	07 c0       	rjmp	.+14     	; 0x3920 <vfprintf+0x1a0>
    3912:	1a c0       	rjmp	.+52     	; 0x3948 <vfprintf+0x1c8>
    3914:	80 e2       	ldi	r24, 0x20	; 32
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	b3 01       	movw	r22, r6
    391a:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <fputc>
    391e:	ea 94       	dec	r14
    3920:	8e 2d       	mov	r24, r14
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	08 17       	cp	r16, r24
    3926:	19 07       	cpc	r17, r25
    3928:	a8 f3       	brcs	.-22     	; 0x3914 <vfprintf+0x194>
    392a:	0e c0       	rjmp	.+28     	; 0x3948 <vfprintf+0x1c8>
    392c:	f6 01       	movw	r30, r12
    392e:	f7 fc       	sbrc	r15, 7
    3930:	85 91       	lpm	r24, Z+
    3932:	f7 fe       	sbrs	r15, 7
    3934:	81 91       	ld	r24, Z+
    3936:	6f 01       	movw	r12, r30
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	b3 01       	movw	r22, r6
    393c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <fputc>
    3940:	e1 10       	cpse	r14, r1
    3942:	ea 94       	dec	r14
    3944:	01 50       	subi	r16, 0x01	; 1
    3946:	10 40       	sbci	r17, 0x00	; 0
    3948:	01 15       	cp	r16, r1
    394a:	11 05       	cpc	r17, r1
    394c:	79 f7       	brne	.-34     	; 0x392c <vfprintf+0x1ac>
    394e:	ea c0       	rjmp	.+468    	; 0x3b24 <vfprintf+0x3a4>
    3950:	94 36       	cpi	r25, 0x64	; 100
    3952:	11 f0       	breq	.+4      	; 0x3958 <vfprintf+0x1d8>
    3954:	99 36       	cpi	r25, 0x69	; 105
    3956:	69 f5       	brne	.+90     	; 0x39b2 <vfprintf+0x232>
    3958:	f7 fe       	sbrs	r15, 7
    395a:	08 c0       	rjmp	.+16     	; 0x396c <vfprintf+0x1ec>
    395c:	f5 01       	movw	r30, r10
    395e:	20 81       	ld	r18, Z
    3960:	31 81       	ldd	r19, Z+1	; 0x01
    3962:	42 81       	ldd	r20, Z+2	; 0x02
    3964:	53 81       	ldd	r21, Z+3	; 0x03
    3966:	84 e0       	ldi	r24, 0x04	; 4
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	0a c0       	rjmp	.+20     	; 0x3980 <vfprintf+0x200>
    396c:	f5 01       	movw	r30, r10
    396e:	80 81       	ld	r24, Z
    3970:	91 81       	ldd	r25, Z+1	; 0x01
    3972:	9c 01       	movw	r18, r24
    3974:	44 27       	eor	r20, r20
    3976:	37 fd       	sbrc	r19, 7
    3978:	40 95       	com	r20
    397a:	54 2f       	mov	r21, r20
    397c:	82 e0       	ldi	r24, 0x02	; 2
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	a8 0e       	add	r10, r24
    3982:	b9 1e       	adc	r11, r25
    3984:	9f e6       	ldi	r25, 0x6F	; 111
    3986:	f9 22       	and	r15, r25
    3988:	57 ff       	sbrs	r21, 7
    398a:	09 c0       	rjmp	.+18     	; 0x399e <vfprintf+0x21e>
    398c:	50 95       	com	r21
    398e:	40 95       	com	r20
    3990:	30 95       	com	r19
    3992:	21 95       	neg	r18
    3994:	3f 4f       	sbci	r19, 0xFF	; 255
    3996:	4f 4f       	sbci	r20, 0xFF	; 255
    3998:	5f 4f       	sbci	r21, 0xFF	; 255
    399a:	e0 e8       	ldi	r30, 0x80	; 128
    399c:	fe 2a       	or	r15, r30
    399e:	ca 01       	movw	r24, r20
    39a0:	b9 01       	movw	r22, r18
    39a2:	a1 01       	movw	r20, r2
    39a4:	2a e0       	ldi	r18, 0x0A	; 10
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__ultoa_invert>
    39ac:	d8 2e       	mov	r13, r24
    39ae:	d2 18       	sub	r13, r2
    39b0:	40 c0       	rjmp	.+128    	; 0x3a32 <vfprintf+0x2b2>
    39b2:	95 37       	cpi	r25, 0x75	; 117
    39b4:	29 f4       	brne	.+10     	; 0x39c0 <vfprintf+0x240>
    39b6:	1f 2d       	mov	r17, r15
    39b8:	1f 7e       	andi	r17, 0xEF	; 239
    39ba:	2a e0       	ldi	r18, 0x0A	; 10
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	1d c0       	rjmp	.+58     	; 0x39fa <vfprintf+0x27a>
    39c0:	1f 2d       	mov	r17, r15
    39c2:	19 7f       	andi	r17, 0xF9	; 249
    39c4:	9f 36       	cpi	r25, 0x6F	; 111
    39c6:	61 f0       	breq	.+24     	; 0x39e0 <vfprintf+0x260>
    39c8:	90 37       	cpi	r25, 0x70	; 112
    39ca:	20 f4       	brcc	.+8      	; 0x39d4 <vfprintf+0x254>
    39cc:	98 35       	cpi	r25, 0x58	; 88
    39ce:	09 f0       	breq	.+2      	; 0x39d2 <vfprintf+0x252>
    39d0:	ac c0       	rjmp	.+344    	; 0x3b2a <vfprintf+0x3aa>
    39d2:	0f c0       	rjmp	.+30     	; 0x39f2 <vfprintf+0x272>
    39d4:	90 37       	cpi	r25, 0x70	; 112
    39d6:	39 f0       	breq	.+14     	; 0x39e6 <vfprintf+0x266>
    39d8:	98 37       	cpi	r25, 0x78	; 120
    39da:	09 f0       	breq	.+2      	; 0x39de <vfprintf+0x25e>
    39dc:	a6 c0       	rjmp	.+332    	; 0x3b2a <vfprintf+0x3aa>
    39de:	04 c0       	rjmp	.+8      	; 0x39e8 <vfprintf+0x268>
    39e0:	28 e0       	ldi	r18, 0x08	; 8
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	0a c0       	rjmp	.+20     	; 0x39fa <vfprintf+0x27a>
    39e6:	10 61       	ori	r17, 0x10	; 16
    39e8:	14 fd       	sbrc	r17, 4
    39ea:	14 60       	ori	r17, 0x04	; 4
    39ec:	20 e1       	ldi	r18, 0x10	; 16
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	04 c0       	rjmp	.+8      	; 0x39fa <vfprintf+0x27a>
    39f2:	14 fd       	sbrc	r17, 4
    39f4:	16 60       	ori	r17, 0x06	; 6
    39f6:	20 e1       	ldi	r18, 0x10	; 16
    39f8:	32 e0       	ldi	r19, 0x02	; 2
    39fa:	17 ff       	sbrs	r17, 7
    39fc:	08 c0       	rjmp	.+16     	; 0x3a0e <vfprintf+0x28e>
    39fe:	f5 01       	movw	r30, r10
    3a00:	60 81       	ld	r22, Z
    3a02:	71 81       	ldd	r23, Z+1	; 0x01
    3a04:	82 81       	ldd	r24, Z+2	; 0x02
    3a06:	93 81       	ldd	r25, Z+3	; 0x03
    3a08:	44 e0       	ldi	r20, 0x04	; 4
    3a0a:	50 e0       	ldi	r21, 0x00	; 0
    3a0c:	08 c0       	rjmp	.+16     	; 0x3a1e <vfprintf+0x29e>
    3a0e:	f5 01       	movw	r30, r10
    3a10:	80 81       	ld	r24, Z
    3a12:	91 81       	ldd	r25, Z+1	; 0x01
    3a14:	bc 01       	movw	r22, r24
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	42 e0       	ldi	r20, 0x02	; 2
    3a1c:	50 e0       	ldi	r21, 0x00	; 0
    3a1e:	a4 0e       	add	r10, r20
    3a20:	b5 1e       	adc	r11, r21
    3a22:	a1 01       	movw	r20, r2
    3a24:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__ultoa_invert>
    3a28:	d8 2e       	mov	r13, r24
    3a2a:	d2 18       	sub	r13, r2
    3a2c:	8f e7       	ldi	r24, 0x7F	; 127
    3a2e:	f8 2e       	mov	r15, r24
    3a30:	f1 22       	and	r15, r17
    3a32:	f6 fe       	sbrs	r15, 6
    3a34:	0b c0       	rjmp	.+22     	; 0x3a4c <vfprintf+0x2cc>
    3a36:	5e ef       	ldi	r21, 0xFE	; 254
    3a38:	f5 22       	and	r15, r21
    3a3a:	d9 14       	cp	r13, r9
    3a3c:	38 f4       	brcc	.+14     	; 0x3a4c <vfprintf+0x2cc>
    3a3e:	f4 fe       	sbrs	r15, 4
    3a40:	07 c0       	rjmp	.+14     	; 0x3a50 <vfprintf+0x2d0>
    3a42:	f2 fc       	sbrc	r15, 2
    3a44:	05 c0       	rjmp	.+10     	; 0x3a50 <vfprintf+0x2d0>
    3a46:	8f ee       	ldi	r24, 0xEF	; 239
    3a48:	f8 22       	and	r15, r24
    3a4a:	02 c0       	rjmp	.+4      	; 0x3a50 <vfprintf+0x2d0>
    3a4c:	1d 2d       	mov	r17, r13
    3a4e:	01 c0       	rjmp	.+2      	; 0x3a52 <vfprintf+0x2d2>
    3a50:	19 2d       	mov	r17, r9
    3a52:	f4 fe       	sbrs	r15, 4
    3a54:	0d c0       	rjmp	.+26     	; 0x3a70 <vfprintf+0x2f0>
    3a56:	fe 01       	movw	r30, r28
    3a58:	ed 0d       	add	r30, r13
    3a5a:	f1 1d       	adc	r31, r1
    3a5c:	80 81       	ld	r24, Z
    3a5e:	80 33       	cpi	r24, 0x30	; 48
    3a60:	19 f4       	brne	.+6      	; 0x3a68 <vfprintf+0x2e8>
    3a62:	99 ee       	ldi	r25, 0xE9	; 233
    3a64:	f9 22       	and	r15, r25
    3a66:	08 c0       	rjmp	.+16     	; 0x3a78 <vfprintf+0x2f8>
    3a68:	1f 5f       	subi	r17, 0xFF	; 255
    3a6a:	f2 fe       	sbrs	r15, 2
    3a6c:	05 c0       	rjmp	.+10     	; 0x3a78 <vfprintf+0x2f8>
    3a6e:	03 c0       	rjmp	.+6      	; 0x3a76 <vfprintf+0x2f6>
    3a70:	8f 2d       	mov	r24, r15
    3a72:	86 78       	andi	r24, 0x86	; 134
    3a74:	09 f0       	breq	.+2      	; 0x3a78 <vfprintf+0x2f8>
    3a76:	1f 5f       	subi	r17, 0xFF	; 255
    3a78:	0f 2d       	mov	r16, r15
    3a7a:	f3 fc       	sbrc	r15, 3
    3a7c:	14 c0       	rjmp	.+40     	; 0x3aa6 <vfprintf+0x326>
    3a7e:	f0 fe       	sbrs	r15, 0
    3a80:	0f c0       	rjmp	.+30     	; 0x3aa0 <vfprintf+0x320>
    3a82:	1e 15       	cp	r17, r14
    3a84:	10 f0       	brcs	.+4      	; 0x3a8a <vfprintf+0x30a>
    3a86:	9d 2c       	mov	r9, r13
    3a88:	0b c0       	rjmp	.+22     	; 0x3aa0 <vfprintf+0x320>
    3a8a:	9d 2c       	mov	r9, r13
    3a8c:	9e 0c       	add	r9, r14
    3a8e:	91 1a       	sub	r9, r17
    3a90:	1e 2d       	mov	r17, r14
    3a92:	06 c0       	rjmp	.+12     	; 0x3aa0 <vfprintf+0x320>
    3a94:	80 e2       	ldi	r24, 0x20	; 32
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	b3 01       	movw	r22, r6
    3a9a:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <fputc>
    3a9e:	1f 5f       	subi	r17, 0xFF	; 255
    3aa0:	1e 15       	cp	r17, r14
    3aa2:	c0 f3       	brcs	.-16     	; 0x3a94 <vfprintf+0x314>
    3aa4:	04 c0       	rjmp	.+8      	; 0x3aae <vfprintf+0x32e>
    3aa6:	1e 15       	cp	r17, r14
    3aa8:	10 f4       	brcc	.+4      	; 0x3aae <vfprintf+0x32e>
    3aaa:	e1 1a       	sub	r14, r17
    3aac:	01 c0       	rjmp	.+2      	; 0x3ab0 <vfprintf+0x330>
    3aae:	ee 24       	eor	r14, r14
    3ab0:	04 ff       	sbrs	r16, 4
    3ab2:	0f c0       	rjmp	.+30     	; 0x3ad2 <vfprintf+0x352>
    3ab4:	80 e3       	ldi	r24, 0x30	; 48
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	b3 01       	movw	r22, r6
    3aba:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <fputc>
    3abe:	02 ff       	sbrs	r16, 2
    3ac0:	1d c0       	rjmp	.+58     	; 0x3afc <vfprintf+0x37c>
    3ac2:	01 fd       	sbrc	r16, 1
    3ac4:	03 c0       	rjmp	.+6      	; 0x3acc <vfprintf+0x34c>
    3ac6:	88 e7       	ldi	r24, 0x78	; 120
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	0e c0       	rjmp	.+28     	; 0x3ae8 <vfprintf+0x368>
    3acc:	88 e5       	ldi	r24, 0x58	; 88
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	0b c0       	rjmp	.+22     	; 0x3ae8 <vfprintf+0x368>
    3ad2:	80 2f       	mov	r24, r16
    3ad4:	86 78       	andi	r24, 0x86	; 134
    3ad6:	91 f0       	breq	.+36     	; 0x3afc <vfprintf+0x37c>
    3ad8:	01 ff       	sbrs	r16, 1
    3ada:	02 c0       	rjmp	.+4      	; 0x3ae0 <vfprintf+0x360>
    3adc:	8b e2       	ldi	r24, 0x2B	; 43
    3ade:	01 c0       	rjmp	.+2      	; 0x3ae2 <vfprintf+0x362>
    3ae0:	80 e2       	ldi	r24, 0x20	; 32
    3ae2:	f7 fc       	sbrc	r15, 7
    3ae4:	8d e2       	ldi	r24, 0x2D	; 45
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	b3 01       	movw	r22, r6
    3aea:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <fputc>
    3aee:	06 c0       	rjmp	.+12     	; 0x3afc <vfprintf+0x37c>
    3af0:	80 e3       	ldi	r24, 0x30	; 48
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	b3 01       	movw	r22, r6
    3af6:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <fputc>
    3afa:	9a 94       	dec	r9
    3afc:	d9 14       	cp	r13, r9
    3afe:	c0 f3       	brcs	.-16     	; 0x3af0 <vfprintf+0x370>
    3b00:	da 94       	dec	r13
    3b02:	f1 01       	movw	r30, r2
    3b04:	ed 0d       	add	r30, r13
    3b06:	f1 1d       	adc	r31, r1
    3b08:	80 81       	ld	r24, Z
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	b3 01       	movw	r22, r6
    3b0e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <fputc>
    3b12:	dd 20       	and	r13, r13
    3b14:	a9 f7       	brne	.-22     	; 0x3b00 <vfprintf+0x380>
    3b16:	06 c0       	rjmp	.+12     	; 0x3b24 <vfprintf+0x3a4>
    3b18:	80 e2       	ldi	r24, 0x20	; 32
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	b3 01       	movw	r22, r6
    3b1e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <fputc>
    3b22:	ea 94       	dec	r14
    3b24:	ee 20       	and	r14, r14
    3b26:	c1 f7       	brne	.-16     	; 0x3b18 <vfprintf+0x398>
    3b28:	43 ce       	rjmp	.-890    	; 0x37b0 <vfprintf+0x30>
    3b2a:	f3 01       	movw	r30, r6
    3b2c:	66 81       	ldd	r22, Z+6	; 0x06
    3b2e:	77 81       	ldd	r23, Z+7	; 0x07
    3b30:	cb 01       	movw	r24, r22
    3b32:	2b 96       	adiw	r28, 0x0b	; 11
    3b34:	e2 e1       	ldi	r30, 0x12	; 18
    3b36:	0c 94 e1 21 	jmp	0x43c2	; 0x43c2 <__epilogue_restores__>

00003b3a <strnlen_P>:
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	05 90       	lpm	r0, Z+
    3b3e:	61 50       	subi	r22, 0x01	; 1
    3b40:	70 40       	sbci	r23, 0x00	; 0
    3b42:	01 10       	cpse	r0, r1
    3b44:	d8 f7       	brcc	.-10     	; 0x3b3c <strnlen_P+0x2>
    3b46:	80 95       	com	r24
    3b48:	90 95       	com	r25
    3b4a:	8e 0f       	add	r24, r30
    3b4c:	9f 1f       	adc	r25, r31
    3b4e:	08 95       	ret

00003b50 <strnlen>:
    3b50:	fc 01       	movw	r30, r24
    3b52:	61 50       	subi	r22, 0x01	; 1
    3b54:	70 40       	sbci	r23, 0x00	; 0
    3b56:	01 90       	ld	r0, Z+
    3b58:	01 10       	cpse	r0, r1
    3b5a:	d8 f7       	brcc	.-10     	; 0x3b52 <strnlen+0x2>
    3b5c:	80 95       	com	r24
    3b5e:	90 95       	com	r25
    3b60:	8e 0f       	add	r24, r30
    3b62:	9f 1f       	adc	r25, r31
    3b64:	08 95       	ret

00003b66 <fputc>:
    3b66:	0f 93       	push	r16
    3b68:	1f 93       	push	r17
    3b6a:	cf 93       	push	r28
    3b6c:	df 93       	push	r29
    3b6e:	8c 01       	movw	r16, r24
    3b70:	eb 01       	movw	r28, r22
    3b72:	8b 81       	ldd	r24, Y+3	; 0x03
    3b74:	81 ff       	sbrs	r24, 1
    3b76:	1b c0       	rjmp	.+54     	; 0x3bae <fputc+0x48>
    3b78:	82 ff       	sbrs	r24, 2
    3b7a:	0d c0       	rjmp	.+26     	; 0x3b96 <fputc+0x30>
    3b7c:	2e 81       	ldd	r18, Y+6	; 0x06
    3b7e:	3f 81       	ldd	r19, Y+7	; 0x07
    3b80:	8c 81       	ldd	r24, Y+4	; 0x04
    3b82:	9d 81       	ldd	r25, Y+5	; 0x05
    3b84:	28 17       	cp	r18, r24
    3b86:	39 07       	cpc	r19, r25
    3b88:	64 f4       	brge	.+24     	; 0x3ba2 <fputc+0x3c>
    3b8a:	e8 81       	ld	r30, Y
    3b8c:	f9 81       	ldd	r31, Y+1	; 0x01
    3b8e:	01 93       	st	Z+, r16
    3b90:	f9 83       	std	Y+1, r31	; 0x01
    3b92:	e8 83       	st	Y, r30
    3b94:	06 c0       	rjmp	.+12     	; 0x3ba2 <fputc+0x3c>
    3b96:	e8 85       	ldd	r30, Y+8	; 0x08
    3b98:	f9 85       	ldd	r31, Y+9	; 0x09
    3b9a:	80 2f       	mov	r24, r16
    3b9c:	09 95       	icall
    3b9e:	89 2b       	or	r24, r25
    3ba0:	31 f4       	brne	.+12     	; 0x3bae <fputc+0x48>
    3ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ba4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ba6:	01 96       	adiw	r24, 0x01	; 1
    3ba8:	9f 83       	std	Y+7, r25	; 0x07
    3baa:	8e 83       	std	Y+6, r24	; 0x06
    3bac:	02 c0       	rjmp	.+4      	; 0x3bb2 <fputc+0x4c>
    3bae:	0f ef       	ldi	r16, 0xFF	; 255
    3bb0:	1f ef       	ldi	r17, 0xFF	; 255
    3bb2:	c8 01       	movw	r24, r16
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	1f 91       	pop	r17
    3bba:	0f 91       	pop	r16
    3bbc:	08 95       	ret

00003bbe <__ultoa_invert>:
    3bbe:	fa 01       	movw	r30, r20
    3bc0:	aa 27       	eor	r26, r26
    3bc2:	28 30       	cpi	r18, 0x08	; 8
    3bc4:	51 f1       	breq	.+84     	; 0x3c1a <__ultoa_invert+0x5c>
    3bc6:	20 31       	cpi	r18, 0x10	; 16
    3bc8:	81 f1       	breq	.+96     	; 0x3c2a <__ultoa_invert+0x6c>
    3bca:	e8 94       	clt
    3bcc:	6f 93       	push	r22
    3bce:	6e 7f       	andi	r22, 0xFE	; 254
    3bd0:	6e 5f       	subi	r22, 0xFE	; 254
    3bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bd4:	8f 4f       	sbci	r24, 0xFF	; 255
    3bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd8:	af 4f       	sbci	r26, 0xFF	; 255
    3bda:	b1 e0       	ldi	r27, 0x01	; 1
    3bdc:	3e d0       	rcall	.+124    	; 0x3c5a <__ultoa_invert+0x9c>
    3bde:	b4 e0       	ldi	r27, 0x04	; 4
    3be0:	3c d0       	rcall	.+120    	; 0x3c5a <__ultoa_invert+0x9c>
    3be2:	67 0f       	add	r22, r23
    3be4:	78 1f       	adc	r23, r24
    3be6:	89 1f       	adc	r24, r25
    3be8:	9a 1f       	adc	r25, r26
    3bea:	a1 1d       	adc	r26, r1
    3bec:	68 0f       	add	r22, r24
    3bee:	79 1f       	adc	r23, r25
    3bf0:	8a 1f       	adc	r24, r26
    3bf2:	91 1d       	adc	r25, r1
    3bf4:	a1 1d       	adc	r26, r1
    3bf6:	6a 0f       	add	r22, r26
    3bf8:	71 1d       	adc	r23, r1
    3bfa:	81 1d       	adc	r24, r1
    3bfc:	91 1d       	adc	r25, r1
    3bfe:	a1 1d       	adc	r26, r1
    3c00:	20 d0       	rcall	.+64     	; 0x3c42 <__ultoa_invert+0x84>
    3c02:	09 f4       	brne	.+2      	; 0x3c06 <__ultoa_invert+0x48>
    3c04:	68 94       	set
    3c06:	3f 91       	pop	r19
    3c08:	2a e0       	ldi	r18, 0x0A	; 10
    3c0a:	26 9f       	mul	r18, r22
    3c0c:	11 24       	eor	r1, r1
    3c0e:	30 19       	sub	r19, r0
    3c10:	30 5d       	subi	r19, 0xD0	; 208
    3c12:	31 93       	st	Z+, r19
    3c14:	de f6       	brtc	.-74     	; 0x3bcc <__ultoa_invert+0xe>
    3c16:	cf 01       	movw	r24, r30
    3c18:	08 95       	ret
    3c1a:	46 2f       	mov	r20, r22
    3c1c:	47 70       	andi	r20, 0x07	; 7
    3c1e:	40 5d       	subi	r20, 0xD0	; 208
    3c20:	41 93       	st	Z+, r20
    3c22:	b3 e0       	ldi	r27, 0x03	; 3
    3c24:	0f d0       	rcall	.+30     	; 0x3c44 <__ultoa_invert+0x86>
    3c26:	c9 f7       	brne	.-14     	; 0x3c1a <__ultoa_invert+0x5c>
    3c28:	f6 cf       	rjmp	.-20     	; 0x3c16 <__ultoa_invert+0x58>
    3c2a:	46 2f       	mov	r20, r22
    3c2c:	4f 70       	andi	r20, 0x0F	; 15
    3c2e:	40 5d       	subi	r20, 0xD0	; 208
    3c30:	4a 33       	cpi	r20, 0x3A	; 58
    3c32:	18 f0       	brcs	.+6      	; 0x3c3a <__ultoa_invert+0x7c>
    3c34:	49 5d       	subi	r20, 0xD9	; 217
    3c36:	31 fd       	sbrc	r19, 1
    3c38:	40 52       	subi	r20, 0x20	; 32
    3c3a:	41 93       	st	Z+, r20
    3c3c:	02 d0       	rcall	.+4      	; 0x3c42 <__ultoa_invert+0x84>
    3c3e:	a9 f7       	brne	.-22     	; 0x3c2a <__ultoa_invert+0x6c>
    3c40:	ea cf       	rjmp	.-44     	; 0x3c16 <__ultoa_invert+0x58>
    3c42:	b4 e0       	ldi	r27, 0x04	; 4
    3c44:	a6 95       	lsr	r26
    3c46:	97 95       	ror	r25
    3c48:	87 95       	ror	r24
    3c4a:	77 95       	ror	r23
    3c4c:	67 95       	ror	r22
    3c4e:	ba 95       	dec	r27
    3c50:	c9 f7       	brne	.-14     	; 0x3c44 <__ultoa_invert+0x86>
    3c52:	00 97       	sbiw	r24, 0x00	; 0
    3c54:	61 05       	cpc	r22, r1
    3c56:	71 05       	cpc	r23, r1
    3c58:	08 95       	ret
    3c5a:	9b 01       	movw	r18, r22
    3c5c:	ac 01       	movw	r20, r24
    3c5e:	0a 2e       	mov	r0, r26
    3c60:	06 94       	lsr	r0
    3c62:	57 95       	ror	r21
    3c64:	47 95       	ror	r20
    3c66:	37 95       	ror	r19
    3c68:	27 95       	ror	r18
    3c6a:	ba 95       	dec	r27
    3c6c:	c9 f7       	brne	.-14     	; 0x3c60 <__ultoa_invert+0xa2>
    3c6e:	62 0f       	add	r22, r18
    3c70:	73 1f       	adc	r23, r19
    3c72:	84 1f       	adc	r24, r20
    3c74:	95 1f       	adc	r25, r21
    3c76:	a0 1d       	adc	r26, r0
    3c78:	08 95       	ret

00003c7a <acos>:
    3c7a:	9f 93       	push	r25
    3c7c:	9f 77       	andi	r25, 0x7F	; 127
    3c7e:	4d d1       	rcall	.+666    	; 0x3f1a <__fp_arccos>
    3c80:	0f 90       	pop	r0
    3c82:	00 20       	and	r0, r0
    3c84:	3a f4       	brpl	.+14     	; 0x3c94 <acos+0x1a>
    3c86:	90 58       	subi	r25, 0x80	; 128
    3c88:	a2 ea       	ldi	r26, 0xA2	; 162
    3c8a:	2a ed       	ldi	r18, 0xDA	; 218
    3c8c:	3f e0       	ldi	r19, 0x0F	; 15
    3c8e:	49 e4       	ldi	r20, 0x49	; 73
    3c90:	50 e4       	ldi	r21, 0x40	; 64
    3c92:	13 d0       	rcall	.+38     	; 0x3cba <__addsf3x>
    3c94:	ee c1       	rjmp	.+988    	; 0x4072 <__fp_round>

00003c96 <__subsf3>:
    3c96:	50 58       	subi	r21, 0x80	; 128

00003c98 <__addsf3>:
    3c98:	bb 27       	eor	r27, r27
    3c9a:	aa 27       	eor	r26, r26
    3c9c:	0e d0       	rcall	.+28     	; 0x3cba <__addsf3x>
    3c9e:	e9 c1       	rjmp	.+978    	; 0x4072 <__fp_round>
    3ca0:	a9 d1       	rcall	.+850    	; 0x3ff4 <__fp_pscA>
    3ca2:	30 f0       	brcs	.+12     	; 0x3cb0 <__addsf3+0x18>
    3ca4:	ae d1       	rcall	.+860    	; 0x4002 <__fp_pscB>
    3ca6:	20 f0       	brcs	.+8      	; 0x3cb0 <__addsf3+0x18>
    3ca8:	31 f4       	brne	.+12     	; 0x3cb6 <__addsf3+0x1e>
    3caa:	9f 3f       	cpi	r25, 0xFF	; 255
    3cac:	11 f4       	brne	.+4      	; 0x3cb2 <__addsf3+0x1a>
    3cae:	1e f4       	brtc	.+6      	; 0x3cb6 <__addsf3+0x1e>
    3cb0:	79 c1       	rjmp	.+754    	; 0x3fa4 <__fp_nan>
    3cb2:	0e f4       	brtc	.+2      	; 0x3cb6 <__addsf3+0x1e>
    3cb4:	e0 95       	com	r30
    3cb6:	e7 fb       	bst	r30, 7
    3cb8:	6f c1       	rjmp	.+734    	; 0x3f98 <__fp_inf>

00003cba <__addsf3x>:
    3cba:	e9 2f       	mov	r30, r25
    3cbc:	fc d1       	rcall	.+1016   	; 0x40b6 <__fp_split3>
    3cbe:	80 f3       	brcs	.-32     	; 0x3ca0 <__addsf3+0x8>
    3cc0:	ba 17       	cp	r27, r26
    3cc2:	62 07       	cpc	r22, r18
    3cc4:	73 07       	cpc	r23, r19
    3cc6:	84 07       	cpc	r24, r20
    3cc8:	95 07       	cpc	r25, r21
    3cca:	18 f0       	brcs	.+6      	; 0x3cd2 <__addsf3x+0x18>
    3ccc:	71 f4       	brne	.+28     	; 0x3cea <__addsf3x+0x30>
    3cce:	9e f5       	brtc	.+102    	; 0x3d36 <__addsf3x+0x7c>
    3cd0:	14 c2       	rjmp	.+1064   	; 0x40fa <__fp_zero>
    3cd2:	0e f4       	brtc	.+2      	; 0x3cd6 <__addsf3x+0x1c>
    3cd4:	e0 95       	com	r30
    3cd6:	0b 2e       	mov	r0, r27
    3cd8:	ba 2f       	mov	r27, r26
    3cda:	a0 2d       	mov	r26, r0
    3cdc:	0b 01       	movw	r0, r22
    3cde:	b9 01       	movw	r22, r18
    3ce0:	90 01       	movw	r18, r0
    3ce2:	0c 01       	movw	r0, r24
    3ce4:	ca 01       	movw	r24, r20
    3ce6:	a0 01       	movw	r20, r0
    3ce8:	11 24       	eor	r1, r1
    3cea:	ff 27       	eor	r31, r31
    3cec:	59 1b       	sub	r21, r25
    3cee:	99 f0       	breq	.+38     	; 0x3d16 <__addsf3x+0x5c>
    3cf0:	59 3f       	cpi	r21, 0xF9	; 249
    3cf2:	50 f4       	brcc	.+20     	; 0x3d08 <__addsf3x+0x4e>
    3cf4:	50 3e       	cpi	r21, 0xE0	; 224
    3cf6:	68 f1       	brcs	.+90     	; 0x3d52 <__addsf3x+0x98>
    3cf8:	1a 16       	cp	r1, r26
    3cfa:	f0 40       	sbci	r31, 0x00	; 0
    3cfc:	a2 2f       	mov	r26, r18
    3cfe:	23 2f       	mov	r18, r19
    3d00:	34 2f       	mov	r19, r20
    3d02:	44 27       	eor	r20, r20
    3d04:	58 5f       	subi	r21, 0xF8	; 248
    3d06:	f3 cf       	rjmp	.-26     	; 0x3cee <__addsf3x+0x34>
    3d08:	46 95       	lsr	r20
    3d0a:	37 95       	ror	r19
    3d0c:	27 95       	ror	r18
    3d0e:	a7 95       	ror	r26
    3d10:	f0 40       	sbci	r31, 0x00	; 0
    3d12:	53 95       	inc	r21
    3d14:	c9 f7       	brne	.-14     	; 0x3d08 <__addsf3x+0x4e>
    3d16:	7e f4       	brtc	.+30     	; 0x3d36 <__addsf3x+0x7c>
    3d18:	1f 16       	cp	r1, r31
    3d1a:	ba 0b       	sbc	r27, r26
    3d1c:	62 0b       	sbc	r22, r18
    3d1e:	73 0b       	sbc	r23, r19
    3d20:	84 0b       	sbc	r24, r20
    3d22:	ba f0       	brmi	.+46     	; 0x3d52 <__addsf3x+0x98>
    3d24:	91 50       	subi	r25, 0x01	; 1
    3d26:	a1 f0       	breq	.+40     	; 0x3d50 <__addsf3x+0x96>
    3d28:	ff 0f       	add	r31, r31
    3d2a:	bb 1f       	adc	r27, r27
    3d2c:	66 1f       	adc	r22, r22
    3d2e:	77 1f       	adc	r23, r23
    3d30:	88 1f       	adc	r24, r24
    3d32:	c2 f7       	brpl	.-16     	; 0x3d24 <__addsf3x+0x6a>
    3d34:	0e c0       	rjmp	.+28     	; 0x3d52 <__addsf3x+0x98>
    3d36:	ba 0f       	add	r27, r26
    3d38:	62 1f       	adc	r22, r18
    3d3a:	73 1f       	adc	r23, r19
    3d3c:	84 1f       	adc	r24, r20
    3d3e:	48 f4       	brcc	.+18     	; 0x3d52 <__addsf3x+0x98>
    3d40:	87 95       	ror	r24
    3d42:	77 95       	ror	r23
    3d44:	67 95       	ror	r22
    3d46:	b7 95       	ror	r27
    3d48:	f7 95       	ror	r31
    3d4a:	9e 3f       	cpi	r25, 0xFE	; 254
    3d4c:	08 f0       	brcs	.+2      	; 0x3d50 <__addsf3x+0x96>
    3d4e:	b3 cf       	rjmp	.-154    	; 0x3cb6 <__addsf3+0x1e>
    3d50:	93 95       	inc	r25
    3d52:	88 0f       	add	r24, r24
    3d54:	08 f0       	brcs	.+2      	; 0x3d58 <__addsf3x+0x9e>
    3d56:	99 27       	eor	r25, r25
    3d58:	ee 0f       	add	r30, r30
    3d5a:	97 95       	ror	r25
    3d5c:	87 95       	ror	r24
    3d5e:	08 95       	ret

00003d60 <__cmpsf2>:
    3d60:	f7 d0       	rcall	.+494    	; 0x3f50 <__fp_cmp>
    3d62:	08 f4       	brcc	.+2      	; 0x3d66 <__cmpsf2+0x6>
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	08 95       	ret

00003d68 <cos>:
    3d68:	54 d1       	rcall	.+680    	; 0x4012 <__fp_rempio2>
    3d6a:	e3 95       	inc	r30
    3d6c:	93 c1       	rjmp	.+806    	; 0x4094 <__fp_sinus>

00003d6e <__divsf3>:
    3d6e:	0c d0       	rcall	.+24     	; 0x3d88 <__divsf3x>
    3d70:	80 c1       	rjmp	.+768    	; 0x4072 <__fp_round>
    3d72:	47 d1       	rcall	.+654    	; 0x4002 <__fp_pscB>
    3d74:	40 f0       	brcs	.+16     	; 0x3d86 <__divsf3+0x18>
    3d76:	3e d1       	rcall	.+636    	; 0x3ff4 <__fp_pscA>
    3d78:	30 f0       	brcs	.+12     	; 0x3d86 <__divsf3+0x18>
    3d7a:	21 f4       	brne	.+8      	; 0x3d84 <__divsf3+0x16>
    3d7c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d7e:	19 f0       	breq	.+6      	; 0x3d86 <__divsf3+0x18>
    3d80:	0b c1       	rjmp	.+534    	; 0x3f98 <__fp_inf>
    3d82:	51 11       	cpse	r21, r1
    3d84:	bb c1       	rjmp	.+886    	; 0x40fc <__fp_szero>
    3d86:	0e c1       	rjmp	.+540    	; 0x3fa4 <__fp_nan>

00003d88 <__divsf3x>:
    3d88:	96 d1       	rcall	.+812    	; 0x40b6 <__fp_split3>
    3d8a:	98 f3       	brcs	.-26     	; 0x3d72 <__divsf3+0x4>

00003d8c <__divsf3_pse>:
    3d8c:	99 23       	and	r25, r25
    3d8e:	c9 f3       	breq	.-14     	; 0x3d82 <__divsf3+0x14>
    3d90:	55 23       	and	r21, r21
    3d92:	b1 f3       	breq	.-20     	; 0x3d80 <__divsf3+0x12>
    3d94:	95 1b       	sub	r25, r21
    3d96:	55 0b       	sbc	r21, r21
    3d98:	bb 27       	eor	r27, r27
    3d9a:	aa 27       	eor	r26, r26
    3d9c:	62 17       	cp	r22, r18
    3d9e:	73 07       	cpc	r23, r19
    3da0:	84 07       	cpc	r24, r20
    3da2:	38 f0       	brcs	.+14     	; 0x3db2 <__divsf3_pse+0x26>
    3da4:	9f 5f       	subi	r25, 0xFF	; 255
    3da6:	5f 4f       	sbci	r21, 0xFF	; 255
    3da8:	22 0f       	add	r18, r18
    3daa:	33 1f       	adc	r19, r19
    3dac:	44 1f       	adc	r20, r20
    3dae:	aa 1f       	adc	r26, r26
    3db0:	a9 f3       	breq	.-22     	; 0x3d9c <__divsf3_pse+0x10>
    3db2:	33 d0       	rcall	.+102    	; 0x3e1a <__divsf3_pse+0x8e>
    3db4:	0e 2e       	mov	r0, r30
    3db6:	3a f0       	brmi	.+14     	; 0x3dc6 <__divsf3_pse+0x3a>
    3db8:	e0 e8       	ldi	r30, 0x80	; 128
    3dba:	30 d0       	rcall	.+96     	; 0x3e1c <__divsf3_pse+0x90>
    3dbc:	91 50       	subi	r25, 0x01	; 1
    3dbe:	50 40       	sbci	r21, 0x00	; 0
    3dc0:	e6 95       	lsr	r30
    3dc2:	00 1c       	adc	r0, r0
    3dc4:	ca f7       	brpl	.-14     	; 0x3db8 <__divsf3_pse+0x2c>
    3dc6:	29 d0       	rcall	.+82     	; 0x3e1a <__divsf3_pse+0x8e>
    3dc8:	fe 2f       	mov	r31, r30
    3dca:	27 d0       	rcall	.+78     	; 0x3e1a <__divsf3_pse+0x8e>
    3dcc:	66 0f       	add	r22, r22
    3dce:	77 1f       	adc	r23, r23
    3dd0:	88 1f       	adc	r24, r24
    3dd2:	bb 1f       	adc	r27, r27
    3dd4:	26 17       	cp	r18, r22
    3dd6:	37 07       	cpc	r19, r23
    3dd8:	48 07       	cpc	r20, r24
    3dda:	ab 07       	cpc	r26, r27
    3ddc:	b0 e8       	ldi	r27, 0x80	; 128
    3dde:	09 f0       	breq	.+2      	; 0x3de2 <__divsf3_pse+0x56>
    3de0:	bb 0b       	sbc	r27, r27
    3de2:	80 2d       	mov	r24, r0
    3de4:	bf 01       	movw	r22, r30
    3de6:	ff 27       	eor	r31, r31
    3de8:	93 58       	subi	r25, 0x83	; 131
    3dea:	5f 4f       	sbci	r21, 0xFF	; 255
    3dec:	2a f0       	brmi	.+10     	; 0x3df8 <__divsf3_pse+0x6c>
    3dee:	9e 3f       	cpi	r25, 0xFE	; 254
    3df0:	51 05       	cpc	r21, r1
    3df2:	68 f0       	brcs	.+26     	; 0x3e0e <__divsf3_pse+0x82>
    3df4:	d1 c0       	rjmp	.+418    	; 0x3f98 <__fp_inf>
    3df6:	82 c1       	rjmp	.+772    	; 0x40fc <__fp_szero>
    3df8:	5f 3f       	cpi	r21, 0xFF	; 255
    3dfa:	ec f3       	brlt	.-6      	; 0x3df6 <__divsf3_pse+0x6a>
    3dfc:	98 3e       	cpi	r25, 0xE8	; 232
    3dfe:	dc f3       	brlt	.-10     	; 0x3df6 <__divsf3_pse+0x6a>
    3e00:	86 95       	lsr	r24
    3e02:	77 95       	ror	r23
    3e04:	67 95       	ror	r22
    3e06:	b7 95       	ror	r27
    3e08:	f7 95       	ror	r31
    3e0a:	9f 5f       	subi	r25, 0xFF	; 255
    3e0c:	c9 f7       	brne	.-14     	; 0x3e00 <__divsf3_pse+0x74>
    3e0e:	88 0f       	add	r24, r24
    3e10:	91 1d       	adc	r25, r1
    3e12:	96 95       	lsr	r25
    3e14:	87 95       	ror	r24
    3e16:	97 f9       	bld	r25, 7
    3e18:	08 95       	ret
    3e1a:	e1 e0       	ldi	r30, 0x01	; 1
    3e1c:	66 0f       	add	r22, r22
    3e1e:	77 1f       	adc	r23, r23
    3e20:	88 1f       	adc	r24, r24
    3e22:	bb 1f       	adc	r27, r27
    3e24:	62 17       	cp	r22, r18
    3e26:	73 07       	cpc	r23, r19
    3e28:	84 07       	cpc	r24, r20
    3e2a:	ba 07       	cpc	r27, r26
    3e2c:	20 f0       	brcs	.+8      	; 0x3e36 <__divsf3_pse+0xaa>
    3e2e:	62 1b       	sub	r22, r18
    3e30:	73 0b       	sbc	r23, r19
    3e32:	84 0b       	sbc	r24, r20
    3e34:	ba 0b       	sbc	r27, r26
    3e36:	ee 1f       	adc	r30, r30
    3e38:	88 f7       	brcc	.-30     	; 0x3e1c <__divsf3_pse+0x90>
    3e3a:	e0 95       	com	r30
    3e3c:	08 95       	ret

00003e3e <__fixsfsi>:
    3e3e:	04 d0       	rcall	.+8      	; 0x3e48 <__fixunssfsi>
    3e40:	68 94       	set
    3e42:	b1 11       	cpse	r27, r1
    3e44:	5b c1       	rjmp	.+694    	; 0x40fc <__fp_szero>
    3e46:	08 95       	ret

00003e48 <__fixunssfsi>:
    3e48:	3e d1       	rcall	.+636    	; 0x40c6 <__fp_splitA>
    3e4a:	88 f0       	brcs	.+34     	; 0x3e6e <__fixunssfsi+0x26>
    3e4c:	9f 57       	subi	r25, 0x7F	; 127
    3e4e:	90 f0       	brcs	.+36     	; 0x3e74 <__fixunssfsi+0x2c>
    3e50:	b9 2f       	mov	r27, r25
    3e52:	99 27       	eor	r25, r25
    3e54:	b7 51       	subi	r27, 0x17	; 23
    3e56:	a0 f0       	brcs	.+40     	; 0x3e80 <__fixunssfsi+0x38>
    3e58:	d1 f0       	breq	.+52     	; 0x3e8e <__fixunssfsi+0x46>
    3e5a:	66 0f       	add	r22, r22
    3e5c:	77 1f       	adc	r23, r23
    3e5e:	88 1f       	adc	r24, r24
    3e60:	99 1f       	adc	r25, r25
    3e62:	1a f0       	brmi	.+6      	; 0x3e6a <__fixunssfsi+0x22>
    3e64:	ba 95       	dec	r27
    3e66:	c9 f7       	brne	.-14     	; 0x3e5a <__fixunssfsi+0x12>
    3e68:	12 c0       	rjmp	.+36     	; 0x3e8e <__fixunssfsi+0x46>
    3e6a:	b1 30       	cpi	r27, 0x01	; 1
    3e6c:	81 f0       	breq	.+32     	; 0x3e8e <__fixunssfsi+0x46>
    3e6e:	45 d1       	rcall	.+650    	; 0x40fa <__fp_zero>
    3e70:	b1 e0       	ldi	r27, 0x01	; 1
    3e72:	08 95       	ret
    3e74:	42 c1       	rjmp	.+644    	; 0x40fa <__fp_zero>
    3e76:	67 2f       	mov	r22, r23
    3e78:	78 2f       	mov	r23, r24
    3e7a:	88 27       	eor	r24, r24
    3e7c:	b8 5f       	subi	r27, 0xF8	; 248
    3e7e:	39 f0       	breq	.+14     	; 0x3e8e <__fixunssfsi+0x46>
    3e80:	b9 3f       	cpi	r27, 0xF9	; 249
    3e82:	cc f3       	brlt	.-14     	; 0x3e76 <__fixunssfsi+0x2e>
    3e84:	86 95       	lsr	r24
    3e86:	77 95       	ror	r23
    3e88:	67 95       	ror	r22
    3e8a:	b3 95       	inc	r27
    3e8c:	d9 f7       	brne	.-10     	; 0x3e84 <__fixunssfsi+0x3c>
    3e8e:	3e f4       	brtc	.+14     	; 0x3e9e <__fixunssfsi+0x56>
    3e90:	90 95       	com	r25
    3e92:	80 95       	com	r24
    3e94:	70 95       	com	r23
    3e96:	61 95       	neg	r22
    3e98:	7f 4f       	sbci	r23, 0xFF	; 255
    3e9a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e9e:	08 95       	ret

00003ea0 <__floatunsisf>:
    3ea0:	e8 94       	clt
    3ea2:	09 c0       	rjmp	.+18     	; 0x3eb6 <__floatsisf+0x12>

00003ea4 <__floatsisf>:
    3ea4:	97 fb       	bst	r25, 7
    3ea6:	3e f4       	brtc	.+14     	; 0x3eb6 <__floatsisf+0x12>
    3ea8:	90 95       	com	r25
    3eaa:	80 95       	com	r24
    3eac:	70 95       	com	r23
    3eae:	61 95       	neg	r22
    3eb0:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb2:	8f 4f       	sbci	r24, 0xFF	; 255
    3eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb6:	99 23       	and	r25, r25
    3eb8:	a9 f0       	breq	.+42     	; 0x3ee4 <__floatsisf+0x40>
    3eba:	f9 2f       	mov	r31, r25
    3ebc:	96 e9       	ldi	r25, 0x96	; 150
    3ebe:	bb 27       	eor	r27, r27
    3ec0:	93 95       	inc	r25
    3ec2:	f6 95       	lsr	r31
    3ec4:	87 95       	ror	r24
    3ec6:	77 95       	ror	r23
    3ec8:	67 95       	ror	r22
    3eca:	b7 95       	ror	r27
    3ecc:	f1 11       	cpse	r31, r1
    3ece:	f8 cf       	rjmp	.-16     	; 0x3ec0 <__floatsisf+0x1c>
    3ed0:	fa f4       	brpl	.+62     	; 0x3f10 <__floatsisf+0x6c>
    3ed2:	bb 0f       	add	r27, r27
    3ed4:	11 f4       	brne	.+4      	; 0x3eda <__floatsisf+0x36>
    3ed6:	60 ff       	sbrs	r22, 0
    3ed8:	1b c0       	rjmp	.+54     	; 0x3f10 <__floatsisf+0x6c>
    3eda:	6f 5f       	subi	r22, 0xFF	; 255
    3edc:	7f 4f       	sbci	r23, 0xFF	; 255
    3ede:	8f 4f       	sbci	r24, 0xFF	; 255
    3ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee2:	16 c0       	rjmp	.+44     	; 0x3f10 <__floatsisf+0x6c>
    3ee4:	88 23       	and	r24, r24
    3ee6:	11 f0       	breq	.+4      	; 0x3eec <__floatsisf+0x48>
    3ee8:	96 e9       	ldi	r25, 0x96	; 150
    3eea:	11 c0       	rjmp	.+34     	; 0x3f0e <__floatsisf+0x6a>
    3eec:	77 23       	and	r23, r23
    3eee:	21 f0       	breq	.+8      	; 0x3ef8 <__floatsisf+0x54>
    3ef0:	9e e8       	ldi	r25, 0x8E	; 142
    3ef2:	87 2f       	mov	r24, r23
    3ef4:	76 2f       	mov	r23, r22
    3ef6:	05 c0       	rjmp	.+10     	; 0x3f02 <__floatsisf+0x5e>
    3ef8:	66 23       	and	r22, r22
    3efa:	71 f0       	breq	.+28     	; 0x3f18 <__floatsisf+0x74>
    3efc:	96 e8       	ldi	r25, 0x86	; 134
    3efe:	86 2f       	mov	r24, r22
    3f00:	70 e0       	ldi	r23, 0x00	; 0
    3f02:	60 e0       	ldi	r22, 0x00	; 0
    3f04:	2a f0       	brmi	.+10     	; 0x3f10 <__floatsisf+0x6c>
    3f06:	9a 95       	dec	r25
    3f08:	66 0f       	add	r22, r22
    3f0a:	77 1f       	adc	r23, r23
    3f0c:	88 1f       	adc	r24, r24
    3f0e:	da f7       	brpl	.-10     	; 0x3f06 <__floatsisf+0x62>
    3f10:	88 0f       	add	r24, r24
    3f12:	96 95       	lsr	r25
    3f14:	87 95       	ror	r24
    3f16:	97 f9       	bld	r25, 7
    3f18:	08 95       	ret

00003f1a <__fp_arccos>:
    3f1a:	df 93       	push	r29
    3f1c:	cf 93       	push	r28
    3f1e:	1f 93       	push	r17
    3f20:	0f 93       	push	r16
    3f22:	8b 01       	movw	r16, r22
    3f24:	ec 01       	movw	r28, r24
    3f26:	e4 e9       	ldi	r30, 0x94	; 148
    3f28:	f0 e0       	ldi	r31, 0x00	; 0
    3f2a:	3f d0       	rcall	.+126    	; 0x3faa <__fp_powser>
    3f2c:	a2 d0       	rcall	.+324    	; 0x4072 <__fp_round>
    3f2e:	98 01       	movw	r18, r16
    3f30:	ae 01       	movw	r20, r28
    3f32:	8b 01       	movw	r16, r22
    3f34:	ec 01       	movw	r28, r24
    3f36:	60 e0       	ldi	r22, 0x00	; 0
    3f38:	70 e0       	ldi	r23, 0x00	; 0
    3f3a:	80 e8       	ldi	r24, 0x80	; 128
    3f3c:	9f e3       	ldi	r25, 0x3F	; 63
    3f3e:	ab de       	rcall	.-682    	; 0x3c96 <__subsf3>
    3f40:	4e d1       	rcall	.+668    	; 0x41de <sqrt>
    3f42:	98 01       	movw	r18, r16
    3f44:	ae 01       	movw	r20, r28
    3f46:	0f 91       	pop	r16
    3f48:	1f 91       	pop	r17
    3f4a:	cf 91       	pop	r28
    3f4c:	df 91       	pop	r29
    3f4e:	ec c0       	rjmp	.+472    	; 0x4128 <__mulsf3x>

00003f50 <__fp_cmp>:
    3f50:	99 0f       	add	r25, r25
    3f52:	00 08       	sbc	r0, r0
    3f54:	55 0f       	add	r21, r21
    3f56:	aa 0b       	sbc	r26, r26
    3f58:	e0 e8       	ldi	r30, 0x80	; 128
    3f5a:	fe ef       	ldi	r31, 0xFE	; 254
    3f5c:	16 16       	cp	r1, r22
    3f5e:	17 06       	cpc	r1, r23
    3f60:	e8 07       	cpc	r30, r24
    3f62:	f9 07       	cpc	r31, r25
    3f64:	c0 f0       	brcs	.+48     	; 0x3f96 <__fp_cmp+0x46>
    3f66:	12 16       	cp	r1, r18
    3f68:	13 06       	cpc	r1, r19
    3f6a:	e4 07       	cpc	r30, r20
    3f6c:	f5 07       	cpc	r31, r21
    3f6e:	98 f0       	brcs	.+38     	; 0x3f96 <__fp_cmp+0x46>
    3f70:	62 1b       	sub	r22, r18
    3f72:	73 0b       	sbc	r23, r19
    3f74:	84 0b       	sbc	r24, r20
    3f76:	95 0b       	sbc	r25, r21
    3f78:	39 f4       	brne	.+14     	; 0x3f88 <__fp_cmp+0x38>
    3f7a:	0a 26       	eor	r0, r26
    3f7c:	61 f0       	breq	.+24     	; 0x3f96 <__fp_cmp+0x46>
    3f7e:	23 2b       	or	r18, r19
    3f80:	24 2b       	or	r18, r20
    3f82:	25 2b       	or	r18, r21
    3f84:	21 f4       	brne	.+8      	; 0x3f8e <__fp_cmp+0x3e>
    3f86:	08 95       	ret
    3f88:	0a 26       	eor	r0, r26
    3f8a:	09 f4       	brne	.+2      	; 0x3f8e <__fp_cmp+0x3e>
    3f8c:	a1 40       	sbci	r26, 0x01	; 1
    3f8e:	a6 95       	lsr	r26
    3f90:	8f ef       	ldi	r24, 0xFF	; 255
    3f92:	81 1d       	adc	r24, r1
    3f94:	81 1d       	adc	r24, r1
    3f96:	08 95       	ret

00003f98 <__fp_inf>:
    3f98:	97 f9       	bld	r25, 7
    3f9a:	9f 67       	ori	r25, 0x7F	; 127
    3f9c:	80 e8       	ldi	r24, 0x80	; 128
    3f9e:	70 e0       	ldi	r23, 0x00	; 0
    3fa0:	60 e0       	ldi	r22, 0x00	; 0
    3fa2:	08 95       	ret

00003fa4 <__fp_nan>:
    3fa4:	9f ef       	ldi	r25, 0xFF	; 255
    3fa6:	80 ec       	ldi	r24, 0xC0	; 192
    3fa8:	08 95       	ret

00003faa <__fp_powser>:
    3faa:	df 93       	push	r29
    3fac:	cf 93       	push	r28
    3fae:	1f 93       	push	r17
    3fb0:	0f 93       	push	r16
    3fb2:	ff 92       	push	r15
    3fb4:	ef 92       	push	r14
    3fb6:	df 92       	push	r13
    3fb8:	7b 01       	movw	r14, r22
    3fba:	8c 01       	movw	r16, r24
    3fbc:	68 94       	set
    3fbe:	05 c0       	rjmp	.+10     	; 0x3fca <__fp_powser+0x20>
    3fc0:	da 2e       	mov	r13, r26
    3fc2:	ef 01       	movw	r28, r30
    3fc4:	b1 d0       	rcall	.+354    	; 0x4128 <__mulsf3x>
    3fc6:	fe 01       	movw	r30, r28
    3fc8:	e8 94       	clt
    3fca:	a5 91       	lpm	r26, Z+
    3fcc:	25 91       	lpm	r18, Z+
    3fce:	35 91       	lpm	r19, Z+
    3fd0:	45 91       	lpm	r20, Z+
    3fd2:	55 91       	lpm	r21, Z+
    3fd4:	ae f3       	brts	.-22     	; 0x3fc0 <__fp_powser+0x16>
    3fd6:	ef 01       	movw	r28, r30
    3fd8:	70 de       	rcall	.-800    	; 0x3cba <__addsf3x>
    3fda:	fe 01       	movw	r30, r28
    3fdc:	97 01       	movw	r18, r14
    3fde:	a8 01       	movw	r20, r16
    3fe0:	da 94       	dec	r13
    3fe2:	79 f7       	brne	.-34     	; 0x3fc2 <__fp_powser+0x18>
    3fe4:	df 90       	pop	r13
    3fe6:	ef 90       	pop	r14
    3fe8:	ff 90       	pop	r15
    3fea:	0f 91       	pop	r16
    3fec:	1f 91       	pop	r17
    3fee:	cf 91       	pop	r28
    3ff0:	df 91       	pop	r29
    3ff2:	08 95       	ret

00003ff4 <__fp_pscA>:
    3ff4:	00 24       	eor	r0, r0
    3ff6:	0a 94       	dec	r0
    3ff8:	16 16       	cp	r1, r22
    3ffa:	17 06       	cpc	r1, r23
    3ffc:	18 06       	cpc	r1, r24
    3ffe:	09 06       	cpc	r0, r25
    4000:	08 95       	ret

00004002 <__fp_pscB>:
    4002:	00 24       	eor	r0, r0
    4004:	0a 94       	dec	r0
    4006:	12 16       	cp	r1, r18
    4008:	13 06       	cpc	r1, r19
    400a:	14 06       	cpc	r1, r20
    400c:	05 06       	cpc	r0, r21
    400e:	08 95       	ret
    4010:	c9 cf       	rjmp	.-110    	; 0x3fa4 <__fp_nan>

00004012 <__fp_rempio2>:
    4012:	59 d0       	rcall	.+178    	; 0x40c6 <__fp_splitA>
    4014:	e8 f3       	brcs	.-6      	; 0x4010 <__fp_pscB+0xe>
    4016:	e8 94       	clt
    4018:	ef ef       	ldi	r30, 0xFF	; 255
    401a:	bb 27       	eor	r27, r27
    401c:	3f e0       	ldi	r19, 0x0F	; 15
    401e:	48 ec       	ldi	r20, 0xC8	; 200
    4020:	5f e7       	ldi	r21, 0x7F	; 127
    4022:	6b 3d       	cpi	r22, 0xDB	; 219
    4024:	73 07       	cpc	r23, r19
    4026:	84 07       	cpc	r24, r20
    4028:	95 07       	cpc	r25, r21
    402a:	08 f1       	brcs	.+66     	; 0x406e <__fp_rempio2+0x5c>
    402c:	ff 27       	eor	r31, r31
    402e:	9f 57       	subi	r25, 0x7F	; 127
    4030:	b2 5a       	subi	r27, 0xA2	; 162
    4032:	6a 4d       	sbci	r22, 0xDA	; 218
    4034:	7f 40       	sbci	r23, 0x0F	; 15
    4036:	89 4c       	sbci	r24, 0xC9	; 201
    4038:	f0 40       	sbci	r31, 0x00	; 0
    403a:	32 f4       	brpl	.+12     	; 0x4048 <__fp_rempio2+0x36>
    403c:	be 55       	subi	r27, 0x5E	; 94
    403e:	65 42       	sbci	r22, 0x25	; 37
    4040:	70 4f       	sbci	r23, 0xF0	; 240
    4042:	86 43       	sbci	r24, 0x36	; 54
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	08 94       	sec
    4048:	ee 1f       	adc	r30, r30
    404a:	91 50       	subi	r25, 0x01	; 1
    404c:	30 f0       	brcs	.+12     	; 0x405a <__fp_rempio2+0x48>
    404e:	bb 0f       	add	r27, r27
    4050:	66 1f       	adc	r22, r22
    4052:	77 1f       	adc	r23, r23
    4054:	88 1f       	adc	r24, r24
    4056:	ff 1f       	adc	r31, r31
    4058:	eb cf       	rjmp	.-42     	; 0x4030 <__fp_rempio2+0x1e>
    405a:	9e e7       	ldi	r25, 0x7E	; 126
    405c:	88 23       	and	r24, r24
    405e:	32 f0       	brmi	.+12     	; 0x406c <__fp_rempio2+0x5a>
    4060:	bb 0f       	add	r27, r27
    4062:	66 1f       	adc	r22, r22
    4064:	77 1f       	adc	r23, r23
    4066:	88 1f       	adc	r24, r24
    4068:	9a 95       	dec	r25
    406a:	c1 f7       	brne	.-16     	; 0x405c <__fp_rempio2+0x4a>
    406c:	93 95       	inc	r25
    406e:	e0 95       	com	r30
    4070:	00 c1       	rjmp	.+512    	; 0x4272 <__fp_mpack>

00004072 <__fp_round>:
    4072:	09 2e       	mov	r0, r25
    4074:	03 94       	inc	r0
    4076:	00 0c       	add	r0, r0
    4078:	11 f4       	brne	.+4      	; 0x407e <__fp_round+0xc>
    407a:	88 23       	and	r24, r24
    407c:	52 f0       	brmi	.+20     	; 0x4092 <__fp_round+0x20>
    407e:	bb 0f       	add	r27, r27
    4080:	40 f4       	brcc	.+16     	; 0x4092 <__fp_round+0x20>
    4082:	bf 2b       	or	r27, r31
    4084:	11 f4       	brne	.+4      	; 0x408a <__fp_round+0x18>
    4086:	60 ff       	sbrs	r22, 0
    4088:	04 c0       	rjmp	.+8      	; 0x4092 <__fp_round+0x20>
    408a:	6f 5f       	subi	r22, 0xFF	; 255
    408c:	7f 4f       	sbci	r23, 0xFF	; 255
    408e:	8f 4f       	sbci	r24, 0xFF	; 255
    4090:	9f 4f       	sbci	r25, 0xFF	; 255
    4092:	08 95       	ret

00004094 <__fp_sinus>:
    4094:	ef 93       	push	r30
    4096:	e0 ff       	sbrs	r30, 0
    4098:	06 c0       	rjmp	.+12     	; 0x40a6 <__fp_sinus+0x12>
    409a:	a2 ea       	ldi	r26, 0xA2	; 162
    409c:	2a ed       	ldi	r18, 0xDA	; 218
    409e:	3f e0       	ldi	r19, 0x0F	; 15
    40a0:	49 ec       	ldi	r20, 0xC9	; 201
    40a2:	5f eb       	ldi	r21, 0xBF	; 191
    40a4:	0a de       	rcall	.-1004   	; 0x3cba <__addsf3x>
    40a6:	e5 df       	rcall	.-54     	; 0x4072 <__fp_round>
    40a8:	0f 90       	pop	r0
    40aa:	03 94       	inc	r0
    40ac:	01 fc       	sbrc	r0, 1
    40ae:	90 58       	subi	r25, 0x80	; 128
    40b0:	ec eb       	ldi	r30, 0xBC	; 188
    40b2:	f0 e0       	ldi	r31, 0x00	; 0
    40b4:	f5 c0       	rjmp	.+490    	; 0x42a0 <__fp_powsodd>

000040b6 <__fp_split3>:
    40b6:	57 fd       	sbrc	r21, 7
    40b8:	90 58       	subi	r25, 0x80	; 128
    40ba:	44 0f       	add	r20, r20
    40bc:	55 1f       	adc	r21, r21
    40be:	59 f0       	breq	.+22     	; 0x40d6 <__fp_splitA+0x10>
    40c0:	5f 3f       	cpi	r21, 0xFF	; 255
    40c2:	71 f0       	breq	.+28     	; 0x40e0 <__fp_splitA+0x1a>
    40c4:	47 95       	ror	r20

000040c6 <__fp_splitA>:
    40c6:	88 0f       	add	r24, r24
    40c8:	97 fb       	bst	r25, 7
    40ca:	99 1f       	adc	r25, r25
    40cc:	61 f0       	breq	.+24     	; 0x40e6 <__fp_splitA+0x20>
    40ce:	9f 3f       	cpi	r25, 0xFF	; 255
    40d0:	79 f0       	breq	.+30     	; 0x40f0 <__fp_splitA+0x2a>
    40d2:	87 95       	ror	r24
    40d4:	08 95       	ret
    40d6:	12 16       	cp	r1, r18
    40d8:	13 06       	cpc	r1, r19
    40da:	14 06       	cpc	r1, r20
    40dc:	55 1f       	adc	r21, r21
    40de:	f2 cf       	rjmp	.-28     	; 0x40c4 <__fp_split3+0xe>
    40e0:	46 95       	lsr	r20
    40e2:	f1 df       	rcall	.-30     	; 0x40c6 <__fp_splitA>
    40e4:	08 c0       	rjmp	.+16     	; 0x40f6 <__fp_splitA+0x30>
    40e6:	16 16       	cp	r1, r22
    40e8:	17 06       	cpc	r1, r23
    40ea:	18 06       	cpc	r1, r24
    40ec:	99 1f       	adc	r25, r25
    40ee:	f1 cf       	rjmp	.-30     	; 0x40d2 <__fp_splitA+0xc>
    40f0:	86 95       	lsr	r24
    40f2:	71 05       	cpc	r23, r1
    40f4:	61 05       	cpc	r22, r1
    40f6:	08 94       	sec
    40f8:	08 95       	ret

000040fa <__fp_zero>:
    40fa:	e8 94       	clt

000040fc <__fp_szero>:
    40fc:	bb 27       	eor	r27, r27
    40fe:	66 27       	eor	r22, r22
    4100:	77 27       	eor	r23, r23
    4102:	cb 01       	movw	r24, r22
    4104:	97 f9       	bld	r25, 7
    4106:	08 95       	ret

00004108 <__gesf2>:
    4108:	23 df       	rcall	.-442    	; 0x3f50 <__fp_cmp>
    410a:	08 f4       	brcc	.+2      	; 0x410e <__gesf2+0x6>
    410c:	8f ef       	ldi	r24, 0xFF	; 255
    410e:	08 95       	ret

00004110 <__mulsf3>:
    4110:	0b d0       	rcall	.+22     	; 0x4128 <__mulsf3x>
    4112:	af cf       	rjmp	.-162    	; 0x4072 <__fp_round>
    4114:	6f df       	rcall	.-290    	; 0x3ff4 <__fp_pscA>
    4116:	28 f0       	brcs	.+10     	; 0x4122 <__mulsf3+0x12>
    4118:	74 df       	rcall	.-280    	; 0x4002 <__fp_pscB>
    411a:	18 f0       	brcs	.+6      	; 0x4122 <__mulsf3+0x12>
    411c:	95 23       	and	r25, r21
    411e:	09 f0       	breq	.+2      	; 0x4122 <__mulsf3+0x12>
    4120:	3b cf       	rjmp	.-394    	; 0x3f98 <__fp_inf>
    4122:	40 cf       	rjmp	.-384    	; 0x3fa4 <__fp_nan>
    4124:	11 24       	eor	r1, r1
    4126:	ea cf       	rjmp	.-44     	; 0x40fc <__fp_szero>

00004128 <__mulsf3x>:
    4128:	c6 df       	rcall	.-116    	; 0x40b6 <__fp_split3>
    412a:	a0 f3       	brcs	.-24     	; 0x4114 <__mulsf3+0x4>

0000412c <__mulsf3_pse>:
    412c:	95 9f       	mul	r25, r21
    412e:	d1 f3       	breq	.-12     	; 0x4124 <__mulsf3+0x14>
    4130:	95 0f       	add	r25, r21
    4132:	50 e0       	ldi	r21, 0x00	; 0
    4134:	55 1f       	adc	r21, r21
    4136:	62 9f       	mul	r22, r18
    4138:	f0 01       	movw	r30, r0
    413a:	72 9f       	mul	r23, r18
    413c:	bb 27       	eor	r27, r27
    413e:	f0 0d       	add	r31, r0
    4140:	b1 1d       	adc	r27, r1
    4142:	63 9f       	mul	r22, r19
    4144:	aa 27       	eor	r26, r26
    4146:	f0 0d       	add	r31, r0
    4148:	b1 1d       	adc	r27, r1
    414a:	aa 1f       	adc	r26, r26
    414c:	64 9f       	mul	r22, r20
    414e:	66 27       	eor	r22, r22
    4150:	b0 0d       	add	r27, r0
    4152:	a1 1d       	adc	r26, r1
    4154:	66 1f       	adc	r22, r22
    4156:	82 9f       	mul	r24, r18
    4158:	22 27       	eor	r18, r18
    415a:	b0 0d       	add	r27, r0
    415c:	a1 1d       	adc	r26, r1
    415e:	62 1f       	adc	r22, r18
    4160:	73 9f       	mul	r23, r19
    4162:	b0 0d       	add	r27, r0
    4164:	a1 1d       	adc	r26, r1
    4166:	62 1f       	adc	r22, r18
    4168:	83 9f       	mul	r24, r19
    416a:	a0 0d       	add	r26, r0
    416c:	61 1d       	adc	r22, r1
    416e:	22 1f       	adc	r18, r18
    4170:	74 9f       	mul	r23, r20
    4172:	33 27       	eor	r19, r19
    4174:	a0 0d       	add	r26, r0
    4176:	61 1d       	adc	r22, r1
    4178:	23 1f       	adc	r18, r19
    417a:	84 9f       	mul	r24, r20
    417c:	60 0d       	add	r22, r0
    417e:	21 1d       	adc	r18, r1
    4180:	82 2f       	mov	r24, r18
    4182:	76 2f       	mov	r23, r22
    4184:	6a 2f       	mov	r22, r26
    4186:	11 24       	eor	r1, r1
    4188:	9f 57       	subi	r25, 0x7F	; 127
    418a:	50 40       	sbci	r21, 0x00	; 0
    418c:	8a f0       	brmi	.+34     	; 0x41b0 <__mulsf3_pse+0x84>
    418e:	e1 f0       	breq	.+56     	; 0x41c8 <__mulsf3_pse+0x9c>
    4190:	88 23       	and	r24, r24
    4192:	4a f0       	brmi	.+18     	; 0x41a6 <__mulsf3_pse+0x7a>
    4194:	ee 0f       	add	r30, r30
    4196:	ff 1f       	adc	r31, r31
    4198:	bb 1f       	adc	r27, r27
    419a:	66 1f       	adc	r22, r22
    419c:	77 1f       	adc	r23, r23
    419e:	88 1f       	adc	r24, r24
    41a0:	91 50       	subi	r25, 0x01	; 1
    41a2:	50 40       	sbci	r21, 0x00	; 0
    41a4:	a9 f7       	brne	.-22     	; 0x4190 <__mulsf3_pse+0x64>
    41a6:	9e 3f       	cpi	r25, 0xFE	; 254
    41a8:	51 05       	cpc	r21, r1
    41aa:	70 f0       	brcs	.+28     	; 0x41c8 <__mulsf3_pse+0x9c>
    41ac:	f5 ce       	rjmp	.-534    	; 0x3f98 <__fp_inf>
    41ae:	a6 cf       	rjmp	.-180    	; 0x40fc <__fp_szero>
    41b0:	5f 3f       	cpi	r21, 0xFF	; 255
    41b2:	ec f3       	brlt	.-6      	; 0x41ae <__mulsf3_pse+0x82>
    41b4:	98 3e       	cpi	r25, 0xE8	; 232
    41b6:	dc f3       	brlt	.-10     	; 0x41ae <__mulsf3_pse+0x82>
    41b8:	86 95       	lsr	r24
    41ba:	77 95       	ror	r23
    41bc:	67 95       	ror	r22
    41be:	b7 95       	ror	r27
    41c0:	f7 95       	ror	r31
    41c2:	e7 95       	ror	r30
    41c4:	9f 5f       	subi	r25, 0xFF	; 255
    41c6:	c1 f7       	brne	.-16     	; 0x41b8 <__mulsf3_pse+0x8c>
    41c8:	fe 2b       	or	r31, r30
    41ca:	88 0f       	add	r24, r24
    41cc:	91 1d       	adc	r25, r1
    41ce:	96 95       	lsr	r25
    41d0:	87 95       	ror	r24
    41d2:	97 f9       	bld	r25, 7
    41d4:	08 95       	ret
    41d6:	11 f4       	brne	.+4      	; 0x41dc <__mulsf3_pse+0xb0>
    41d8:	0e f4       	brtc	.+2      	; 0x41dc <__mulsf3_pse+0xb0>
    41da:	e4 ce       	rjmp	.-568    	; 0x3fa4 <__fp_nan>
    41dc:	4a c0       	rjmp	.+148    	; 0x4272 <__fp_mpack>

000041de <sqrt>:
    41de:	73 df       	rcall	.-282    	; 0x40c6 <__fp_splitA>
    41e0:	d0 f3       	brcs	.-12     	; 0x41d6 <__mulsf3_pse+0xaa>
    41e2:	99 23       	and	r25, r25
    41e4:	d9 f3       	breq	.-10     	; 0x41dc <__mulsf3_pse+0xb0>
    41e6:	ce f3       	brts	.-14     	; 0x41da <__mulsf3_pse+0xae>
    41e8:	9f 57       	subi	r25, 0x7F	; 127
    41ea:	55 0b       	sbc	r21, r21
    41ec:	87 ff       	sbrs	r24, 7
    41ee:	51 d0       	rcall	.+162    	; 0x4292 <__fp_norm2>
    41f0:	56 95       	lsr	r21
    41f2:	97 95       	ror	r25
    41f4:	b0 e0       	ldi	r27, 0x00	; 0
    41f6:	20 f4       	brcc	.+8      	; 0x4200 <sqrt+0x22>
    41f8:	66 0f       	add	r22, r22
    41fa:	77 1f       	adc	r23, r23
    41fc:	88 1f       	adc	r24, r24
    41fe:	bb 1f       	adc	r27, r27
    4200:	1f 93       	push	r17
    4202:	0f 93       	push	r16
    4204:	00 24       	eor	r0, r0
    4206:	90 01       	movw	r18, r0
    4208:	a0 01       	movw	r20, r0
    420a:	80 01       	movw	r16, r0
    420c:	f0 01       	movw	r30, r0
    420e:	a0 e8       	ldi	r26, 0x80	; 128
    4210:	0e 0f       	add	r16, r30
    4212:	1f 1f       	adc	r17, r31
    4214:	0a 1e       	adc	r0, r26
    4216:	51 1d       	adc	r21, r1
    4218:	60 1b       	sub	r22, r16
    421a:	71 0b       	sbc	r23, r17
    421c:	80 09       	sbc	r24, r0
    421e:	b5 0b       	sbc	r27, r21
    4220:	48 f4       	brcc	.+18     	; 0x4234 <sqrt+0x56>
    4222:	60 0f       	add	r22, r16
    4224:	71 1f       	adc	r23, r17
    4226:	80 1d       	adc	r24, r0
    4228:	b5 1f       	adc	r27, r21
    422a:	0e 1b       	sub	r16, r30
    422c:	1f 0b       	sbc	r17, r31
    422e:	0a 0a       	sbc	r0, r26
    4230:	51 09       	sbc	r21, r1
    4232:	07 c0       	rjmp	.+14     	; 0x4242 <sqrt+0x64>
    4234:	2e 0f       	add	r18, r30
    4236:	3f 1f       	adc	r19, r31
    4238:	4a 1f       	adc	r20, r26
    423a:	0e 0f       	add	r16, r30
    423c:	1f 1f       	adc	r17, r31
    423e:	0a 1e       	adc	r0, r26
    4240:	51 1d       	adc	r21, r1
    4242:	66 0f       	add	r22, r22
    4244:	77 1f       	adc	r23, r23
    4246:	88 1f       	adc	r24, r24
    4248:	bb 1f       	adc	r27, r27
    424a:	a6 95       	lsr	r26
    424c:	f7 95       	ror	r31
    424e:	e7 95       	ror	r30
    4250:	f8 f6       	brcc	.-66     	; 0x4210 <sqrt+0x32>
    4252:	06 17       	cp	r16, r22
    4254:	17 07       	cpc	r17, r23
    4256:	08 06       	cpc	r0, r24
    4258:	5b 07       	cpc	r21, r27
    425a:	21 1d       	adc	r18, r1
    425c:	31 1d       	adc	r19, r1
    425e:	41 1d       	adc	r20, r1
    4260:	0f 91       	pop	r16
    4262:	1f 91       	pop	r17
    4264:	b9 01       	movw	r22, r18
    4266:	84 2f       	mov	r24, r20
    4268:	91 58       	subi	r25, 0x81	; 129
    426a:	88 0f       	add	r24, r24
    426c:	96 95       	lsr	r25
    426e:	87 95       	ror	r24
    4270:	08 95       	ret

00004272 <__fp_mpack>:
    4272:	9f 3f       	cpi	r25, 0xFF	; 255
    4274:	49 f0       	breq	.+18     	; 0x4288 <__fp_mpack+0x16>
    4276:	91 50       	subi	r25, 0x01	; 1
    4278:	28 f4       	brcc	.+10     	; 0x4284 <__fp_mpack+0x12>
    427a:	86 95       	lsr	r24
    427c:	77 95       	ror	r23
    427e:	67 95       	ror	r22
    4280:	b7 95       	ror	r27
    4282:	9f 5f       	subi	r25, 0xFF	; 255
    4284:	80 38       	cpi	r24, 0x80	; 128
    4286:	9f 4f       	sbci	r25, 0xFF	; 255
    4288:	88 0f       	add	r24, r24
    428a:	96 95       	lsr	r25
    428c:	87 95       	ror	r24
    428e:	97 f9       	bld	r25, 7
    4290:	08 95       	ret

00004292 <__fp_norm2>:
    4292:	91 50       	subi	r25, 0x01	; 1
    4294:	50 40       	sbci	r21, 0x00	; 0
    4296:	66 0f       	add	r22, r22
    4298:	77 1f       	adc	r23, r23
    429a:	88 1f       	adc	r24, r24
    429c:	d2 f7       	brpl	.-12     	; 0x4292 <__fp_norm2>
    429e:	08 95       	ret

000042a0 <__fp_powsodd>:
    42a0:	9f 93       	push	r25
    42a2:	8f 93       	push	r24
    42a4:	7f 93       	push	r23
    42a6:	6f 93       	push	r22
    42a8:	ff 93       	push	r31
    42aa:	ef 93       	push	r30
    42ac:	9b 01       	movw	r18, r22
    42ae:	ac 01       	movw	r20, r24
    42b0:	2f df       	rcall	.-418    	; 0x4110 <__mulsf3>
    42b2:	ef 91       	pop	r30
    42b4:	ff 91       	pop	r31
    42b6:	79 de       	rcall	.-782    	; 0x3faa <__fp_powser>
    42b8:	2f 91       	pop	r18
    42ba:	3f 91       	pop	r19
    42bc:	4f 91       	pop	r20
    42be:	5f 91       	pop	r21
    42c0:	27 cf       	rjmp	.-434    	; 0x4110 <__mulsf3>

000042c2 <__udivmodhi4>:
    42c2:	aa 1b       	sub	r26, r26
    42c4:	bb 1b       	sub	r27, r27
    42c6:	51 e1       	ldi	r21, 0x11	; 17
    42c8:	07 c0       	rjmp	.+14     	; 0x42d8 <__udivmodhi4_ep>

000042ca <__udivmodhi4_loop>:
    42ca:	aa 1f       	adc	r26, r26
    42cc:	bb 1f       	adc	r27, r27
    42ce:	a6 17       	cp	r26, r22
    42d0:	b7 07       	cpc	r27, r23
    42d2:	10 f0       	brcs	.+4      	; 0x42d8 <__udivmodhi4_ep>
    42d4:	a6 1b       	sub	r26, r22
    42d6:	b7 0b       	sbc	r27, r23

000042d8 <__udivmodhi4_ep>:
    42d8:	88 1f       	adc	r24, r24
    42da:	99 1f       	adc	r25, r25
    42dc:	5a 95       	dec	r21
    42de:	a9 f7       	brne	.-22     	; 0x42ca <__udivmodhi4_loop>
    42e0:	80 95       	com	r24
    42e2:	90 95       	com	r25
    42e4:	bc 01       	movw	r22, r24
    42e6:	cd 01       	movw	r24, r26
    42e8:	08 95       	ret

000042ea <__divmodhi4>:
    42ea:	97 fb       	bst	r25, 7
    42ec:	09 2e       	mov	r0, r25
    42ee:	07 26       	eor	r0, r23
    42f0:	0a d0       	rcall	.+20     	; 0x4306 <__divmodhi4_neg1>
    42f2:	77 fd       	sbrc	r23, 7
    42f4:	04 d0       	rcall	.+8      	; 0x42fe <__divmodhi4_neg2>
    42f6:	e5 df       	rcall	.-54     	; 0x42c2 <__udivmodhi4>
    42f8:	06 d0       	rcall	.+12     	; 0x4306 <__divmodhi4_neg1>
    42fa:	00 20       	and	r0, r0
    42fc:	1a f4       	brpl	.+6      	; 0x4304 <__divmodhi4_exit>

000042fe <__divmodhi4_neg2>:
    42fe:	70 95       	com	r23
    4300:	61 95       	neg	r22
    4302:	7f 4f       	sbci	r23, 0xFF	; 255

00004304 <__divmodhi4_exit>:
    4304:	08 95       	ret

00004306 <__divmodhi4_neg1>:
    4306:	f6 f7       	brtc	.-4      	; 0x4304 <__divmodhi4_exit>
    4308:	90 95       	com	r25
    430a:	81 95       	neg	r24
    430c:	9f 4f       	sbci	r25, 0xFF	; 255
    430e:	08 95       	ret

00004310 <__udivmodsi4>:
    4310:	a1 e2       	ldi	r26, 0x21	; 33
    4312:	1a 2e       	mov	r1, r26
    4314:	aa 1b       	sub	r26, r26
    4316:	bb 1b       	sub	r27, r27
    4318:	fd 01       	movw	r30, r26
    431a:	0d c0       	rjmp	.+26     	; 0x4336 <__udivmodsi4_ep>

0000431c <__udivmodsi4_loop>:
    431c:	aa 1f       	adc	r26, r26
    431e:	bb 1f       	adc	r27, r27
    4320:	ee 1f       	adc	r30, r30
    4322:	ff 1f       	adc	r31, r31
    4324:	a2 17       	cp	r26, r18
    4326:	b3 07       	cpc	r27, r19
    4328:	e4 07       	cpc	r30, r20
    432a:	f5 07       	cpc	r31, r21
    432c:	20 f0       	brcs	.+8      	; 0x4336 <__udivmodsi4_ep>
    432e:	a2 1b       	sub	r26, r18
    4330:	b3 0b       	sbc	r27, r19
    4332:	e4 0b       	sbc	r30, r20
    4334:	f5 0b       	sbc	r31, r21

00004336 <__udivmodsi4_ep>:
    4336:	66 1f       	adc	r22, r22
    4338:	77 1f       	adc	r23, r23
    433a:	88 1f       	adc	r24, r24
    433c:	99 1f       	adc	r25, r25
    433e:	1a 94       	dec	r1
    4340:	69 f7       	brne	.-38     	; 0x431c <__udivmodsi4_loop>
    4342:	60 95       	com	r22
    4344:	70 95       	com	r23
    4346:	80 95       	com	r24
    4348:	90 95       	com	r25
    434a:	9b 01       	movw	r18, r22
    434c:	ac 01       	movw	r20, r24
    434e:	bd 01       	movw	r22, r26
    4350:	cf 01       	movw	r24, r30
    4352:	08 95       	ret

00004354 <__divmodsi4>:
    4354:	97 fb       	bst	r25, 7
    4356:	09 2e       	mov	r0, r25
    4358:	05 26       	eor	r0, r21
    435a:	0e d0       	rcall	.+28     	; 0x4378 <__divmodsi4_neg1>
    435c:	57 fd       	sbrc	r21, 7
    435e:	04 d0       	rcall	.+8      	; 0x4368 <__divmodsi4_neg2>
    4360:	d7 df       	rcall	.-82     	; 0x4310 <__udivmodsi4>
    4362:	0a d0       	rcall	.+20     	; 0x4378 <__divmodsi4_neg1>
    4364:	00 1c       	adc	r0, r0
    4366:	38 f4       	brcc	.+14     	; 0x4376 <__divmodsi4_exit>

00004368 <__divmodsi4_neg2>:
    4368:	50 95       	com	r21
    436a:	40 95       	com	r20
    436c:	30 95       	com	r19
    436e:	21 95       	neg	r18
    4370:	3f 4f       	sbci	r19, 0xFF	; 255
    4372:	4f 4f       	sbci	r20, 0xFF	; 255
    4374:	5f 4f       	sbci	r21, 0xFF	; 255

00004376 <__divmodsi4_exit>:
    4376:	08 95       	ret

00004378 <__divmodsi4_neg1>:
    4378:	f6 f7       	brtc	.-4      	; 0x4376 <__divmodsi4_exit>
    437a:	90 95       	com	r25
    437c:	80 95       	com	r24
    437e:	70 95       	com	r23
    4380:	61 95       	neg	r22
    4382:	7f 4f       	sbci	r23, 0xFF	; 255
    4384:	8f 4f       	sbci	r24, 0xFF	; 255
    4386:	9f 4f       	sbci	r25, 0xFF	; 255
    4388:	08 95       	ret

0000438a <__prologue_saves__>:
    438a:	2f 92       	push	r2
    438c:	3f 92       	push	r3
    438e:	4f 92       	push	r4
    4390:	5f 92       	push	r5
    4392:	6f 92       	push	r6
    4394:	7f 92       	push	r7
    4396:	8f 92       	push	r8
    4398:	9f 92       	push	r9
    439a:	af 92       	push	r10
    439c:	bf 92       	push	r11
    439e:	cf 92       	push	r12
    43a0:	df 92       	push	r13
    43a2:	ef 92       	push	r14
    43a4:	ff 92       	push	r15
    43a6:	0f 93       	push	r16
    43a8:	1f 93       	push	r17
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	cd b7       	in	r28, 0x3d	; 61
    43b0:	de b7       	in	r29, 0x3e	; 62
    43b2:	ca 1b       	sub	r28, r26
    43b4:	db 0b       	sbc	r29, r27
    43b6:	0f b6       	in	r0, 0x3f	; 63
    43b8:	f8 94       	cli
    43ba:	de bf       	out	0x3e, r29	; 62
    43bc:	0f be       	out	0x3f, r0	; 63
    43be:	cd bf       	out	0x3d, r28	; 61
    43c0:	09 94       	ijmp

000043c2 <__epilogue_restores__>:
    43c2:	2a 88       	ldd	r2, Y+18	; 0x12
    43c4:	39 88       	ldd	r3, Y+17	; 0x11
    43c6:	48 88       	ldd	r4, Y+16	; 0x10
    43c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    43ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    43cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    43ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    43d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    43d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    43d4:	b9 84       	ldd	r11, Y+9	; 0x09
    43d6:	c8 84       	ldd	r12, Y+8	; 0x08
    43d8:	df 80       	ldd	r13, Y+7	; 0x07
    43da:	ee 80       	ldd	r14, Y+6	; 0x06
    43dc:	fd 80       	ldd	r15, Y+5	; 0x05
    43de:	0c 81       	ldd	r16, Y+4	; 0x04
    43e0:	1b 81       	ldd	r17, Y+3	; 0x03
    43e2:	aa 81       	ldd	r26, Y+2	; 0x02
    43e4:	b9 81       	ldd	r27, Y+1	; 0x01
    43e6:	ce 0f       	add	r28, r30
    43e8:	d1 1d       	adc	r29, r1
    43ea:	0f b6       	in	r0, 0x3f	; 63
    43ec:	f8 94       	cli
    43ee:	de bf       	out	0x3e, r29	; 62
    43f0:	0f be       	out	0x3f, r0	; 63
    43f2:	cd bf       	out	0x3d, r28	; 61
    43f4:	ed 01       	movw	r28, r26
    43f6:	08 95       	ret

000043f8 <_exit>:
    43f8:	f8 94       	cli

000043fa <__stop_program>:
    43fa:	ff cf       	rjmp	.-2      	; 0x43fa <__stop_program>
